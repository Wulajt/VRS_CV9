
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003068  08003068  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003068  08003068  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003068  08003068  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000008  08003078  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08003078  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071a1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000166c  00000000  00000000  000271d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  00028848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  000290a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004792  00000000  00000000  00029830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005ff0  00000000  00000000  0002dfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000786fe  00000000  00000000  00033fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac6b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  000ac72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003020 	.word	0x08003020

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08003020 	.word	0x08003020

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f043 0201 	orr.w	r2, r3, #1
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f023 0201 	bic.w	r2, r3, #1
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	0219      	lsls	r1, r3, #8
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	430b      	orrs	r3, r1
 800050e:	431a      	orrs	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000534:	f023 0307 	bic.w	r3, r3, #7
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	430a      	orrs	r2, r1
 800053e:	431a      	orrs	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	609a      	str	r2, [r3, #8]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	609a      	str	r2, [r3, #8]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	431a      	orrs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	431a      	orrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff65 	bl	80004d2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	461a      	mov	r2, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ff6d 	bl	80004f2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffb6 	bl	8000590 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff44 	bl	80004b2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ffa0 	bl	8000570 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6919      	ldr	r1, [r3, #16]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	461a      	mov	r2, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ff70 	bl	8000520 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff81 	bl	8000550 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffa9 	bl	80005ac <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffb6 	bl	80005d2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f043 0201 	orr.w	r2, r3, #1
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	615a      	str	r2, [r3, #20]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <LL_TIM_Init+0xd4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d007      	beq.n	80007b8 <LL_TIM_Init+0x2c>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ae:	d003      	beq.n	80007b8 <LL_TIM_Init+0x2c>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <LL_TIM_Init+0xd8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <LL_TIM_Init+0xd4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d013      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d00f      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <LL_TIM_Init+0xd8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d00b      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <LL_TIM_Init+0xdc>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d007      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <LL_TIM_Init+0xe0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d003      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <LL_TIM_Init+0xe4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff3b 	bl	800068c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff27 	bl	8000670 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <LL_TIM_Init+0xd4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d00b      	beq.n	8000842 <LL_TIM_Init+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <LL_TIM_Init+0xdc>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d007      	beq.n	8000842 <LL_TIM_Init+0xb6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LL_TIM_Init+0xe0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d003      	beq.n	8000842 <LL_TIM_Init+0xb6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <LL_TIM_Init+0xe4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d105      	bne.n	800084e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	7c1b      	ldrb	r3, [r3, #16]
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff2d 	bl	80006a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff8c 	bl	800076c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40000400 	.word	0x40000400
 8000868:	40014000 	.word	0x40014000
 800086c:	40014400 	.word	0x40014400
 8000870:	40014800 	.word	0x40014800

08000874 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800088a:	d01f      	beq.n	80008cc <LL_TIM_OC_Init+0x58>
 800088c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000890:	d804      	bhi.n	800089c <LL_TIM_OC_Init+0x28>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d00c      	beq.n	80008b0 <LL_TIM_OC_Init+0x3c>
 8000896:	2b10      	cmp	r3, #16
 8000898:	d011      	beq.n	80008be <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800089a:	e033      	b.n	8000904 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800089c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a0:	d022      	beq.n	80008e8 <LL_TIM_OC_Init+0x74>
 80008a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80008a6:	d026      	beq.n	80008f6 <LL_TIM_OC_Init+0x82>
 80008a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ac:	d015      	beq.n	80008da <LL_TIM_OC_Init+0x66>
      break;
 80008ae:	e029      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f82c 	bl	8000910 <OC1Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	75fb      	strb	r3, [r7, #23]
      break;
 80008bc:	e022      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f8a5 	bl	8000a10 <OC2Config>
 80008c6:	4603      	mov	r3, r0
 80008c8:	75fb      	strb	r3, [r7, #23]
      break;
 80008ca:	e01b      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f000 f922 	bl	8000b18 <OC3Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	75fb      	strb	r3, [r7, #23]
      break;
 80008d8:	e014      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f99f 	bl	8000c20 <OC4Config>
 80008e2:	4603      	mov	r3, r0
 80008e4:	75fb      	strb	r3, [r7, #23]
      break;
 80008e6:	e00d      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 fa04 	bl	8000cf8 <OC5Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	75fb      	strb	r3, [r7, #23]
      break;
 80008f4:	e006      	b.n	8000904 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f000 fa5f 	bl	8000dbc <OC6Config>
 80008fe:	4603      	mov	r3, r0
 8000900:	75fb      	strb	r3, [r7, #23]
      break;
 8000902:	bf00      	nop
  }

  return result;
 8000904:	7dfb      	ldrb	r3, [r7, #23]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	f023 0201 	bic.w	r2, r3, #1
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	4313      	orrs	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f023 0202 	bic.w	r2, r3, #2
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f023 0201 	bic.w	r2, r3, #1
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4313      	orrs	r3, r2
 8000978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <OC1Config+0xf0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00b      	beq.n	800099a <OC1Config+0x8a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <OC1Config+0xf4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <OC1Config+0x8a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <OC1Config+0xf8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d003      	beq.n	800099a <OC1Config+0x8a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <OC1Config+0xfc>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d11e      	bne.n	80009d8 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f023 0208 	bic.w	r2, r3, #8
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4313      	orrs	r3, r2
 80009a8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f023 0204 	bic.w	r2, r3, #4
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4313      	orrs	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fe6a 	bl	80006c4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	40014000 	.word	0x40014000
 8000a08:	40014400 	.word	0x40014400
 8000a0c:	40014800 	.word	0x40014800

08000a10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	f023 0210 	bic.w	r2, r3, #16
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	0212      	lsls	r2, r2, #8
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f023 0220 	bic.w	r2, r3, #32
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f023 0210 	bic.w	r2, r3, #16
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <OC2Config+0xf8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d00b      	beq.n	8000aa0 <OC2Config+0x90>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <OC2Config+0xfc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d007      	beq.n	8000aa0 <OC2Config+0x90>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <OC2Config+0x100>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d003      	beq.n	8000aa0 <OC2Config+0x90>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <OC2Config+0x104>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d11f      	bne.n	8000ae0 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	019b      	lsls	r3, r3, #6
 8000aac:	4313      	orrs	r3, r2
 8000aae:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	019b      	lsls	r3, r3, #6
 8000abc:	4313      	orrs	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4619      	mov	r1, r3
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fdf4 	bl	80006e0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	40014000 	.word	0x40014000
 8000b10:	40014400 	.word	0x40014400
 8000b14:	40014800 	.word	0x40014800

08000b18 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 0303 	bic.w	r3, r3, #3
 8000b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4313      	orrs	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <OC3Config+0xf8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d00b      	beq.n	8000ba6 <OC3Config+0x8e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <OC3Config+0xfc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <OC3Config+0x8e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <OC3Config+0x100>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d003      	beq.n	8000ba6 <OC3Config+0x8e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <OC3Config+0x104>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d11f      	bne.n	8000be6 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	029b      	lsls	r3, r3, #10
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	029b      	lsls	r3, r3, #10
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fd7f 	bl	80006fc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c00 	.word	0x40012c00
 8000c14:	40014000 	.word	0x40014000
 8000c18:	40014400 	.word	0x40014400
 8000c1c:	40014800 	.word	0x40014800

08000c20 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a1b      	ldr	r3, [r3, #32]
 8000c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c5a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	0212      	lsls	r2, r2, #8
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	031b      	lsls	r3, r3, #12
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	031b      	lsls	r3, r3, #12
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <OC4Config+0xc8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00b      	beq.n	8000cb0 <OC4Config+0x90>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <OC4Config+0xcc>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <OC4Config+0x90>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <OC4Config+0xd0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d003      	beq.n	8000cb0 <OC4Config+0x90>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <OC4Config+0xd4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d107      	bne.n	8000cc0 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	019b      	lsls	r3, r3, #6
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fd20 	bl	8000718 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40014000 	.word	0x40014000
 8000cf0:	40014400 	.word	0x40014400
 8000cf4:	40014800 	.word	0x40014800

08000cf8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	041b      	lsls	r3, r3, #16
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	041b      	lsls	r3, r3, #16
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <OC5Config+0xb4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00b      	beq.n	8000d74 <OC5Config+0x7c>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <OC5Config+0xb8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <OC5Config+0x7c>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <OC5Config+0xbc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d003      	beq.n	8000d74 <OC5Config+0x7c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <OC5Config+0xc0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d109      	bne.n	8000d88 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fccd 	bl	8000734 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40012c00 	.word	0x40012c00
 8000db0:	40014000 	.word	0x40014000
 8000db4:	40014400 	.word	0x40014400
 8000db8:	40014800 	.word	0x40014800

08000dbc <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	0212      	lsls	r2, r2, #8
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	4313      	orrs	r3, r2
 8000e18:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <OC6Config+0xb4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00b      	beq.n	8000e3a <OC6Config+0x7e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <OC6Config+0xb8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <OC6Config+0x7e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <OC6Config+0xbc>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d003      	beq.n	8000e3a <OC6Config+0x7e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <OC6Config+0xc0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d109      	bne.n	8000e4e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	029b      	lsls	r3, r3, #10
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fc78 	bl	8000750 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	40014000 	.word	0x40014000
 8000e78:	40014400 	.word	0x40014400
 8000e7c:	40014800 	.word	0x40014800

08000e80 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <LL_InitTick+0x30>)
 8000e94:	3b01      	subs	r3, #1
 8000e96:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_InitTick+0x30>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LL_InitTick+0x30>)
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000ebc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffdd 	bl	8000e80 <LL_InitTick>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <LL_mDelay+0x44>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000ede:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee6:	d00c      	beq.n	8000f02 <LL_mDelay+0x32>
  {
    Delay++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000eee:	e008      	b.n	8000f02 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LL_mDelay+0x44>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <LL_mDelay+0x32>
    {
      Delay--;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f3      	bne.n	8000ef0 <LL_mDelay+0x20>
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <LL_SetSystemCoreClock+0x1c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	619a      	str	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_TIM_ClearFlag_UPDATE>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f06f 0201 	mvn.w	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f7ff ffba 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f7ff ffb4 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <resetSegments+0x58>)
 8000fd4:	f7ff ffb0 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000fd8:	2120      	movs	r1, #32
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <resetSegments+0x58>)
 8000fdc:	f7ff ffac 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	480a      	ldr	r0, [pc, #40]	; (800100c <resetSegments+0x58>)
 8000fe4:	f7ff ffa8 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f7ff ffa3 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f7ff ff9e 	bl	8000f38 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f7ff ff99 	bl	8000f38 <LL_GPIO_SetOutputPin>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	48000400 	.word	0x48000400

08001010 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f7ff ff9a 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f7ff ff94 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800102c:	2102      	movs	r1, #2
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <setSegments+0x58>)
 8001030:	f7ff ff90 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001034:	2120      	movs	r1, #32
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <setSegments+0x58>)
 8001038:	f7ff ff8c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800103c:	2110      	movs	r1, #16
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <setSegments+0x58>)
 8001040:	f7ff ff88 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001044:	2101      	movs	r1, #1
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f7ff ff83 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800104e:	2102      	movs	r1, #2
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f7ff ff7e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001058:	2108      	movs	r1, #8
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f7ff ff79 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	48000400 	.word	0x48000400

0800106c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001070:	2104      	movs	r1, #4
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f7ff ff6d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800107a:	2101      	movs	r1, #1
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <resetDigits+0x3c>)
 800107e:	f7ff ff69 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001082:	2110      	movs	r1, #16
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f7ff ff64 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 800108c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f7ff ff5e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f7ff ff59 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80010b0:	2101      	movs	r1, #1
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <setDigits+0x3c>)
 80010b4:	f7ff ff40 	bl	8000f38 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80010b8:	2110      	movs	r1, #16
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f7ff ff3b 	bl	8000f38 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80010c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f7ff ff35 	bl	8000f38 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 80010ce:	2104      	movs	r1, #4
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f7ff ff30 	bl	8000f38 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f7ff ff2b 	bl	8000f38 <LL_GPIO_SetOutputPin>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000400 	.word	0x48000400

080010ec <setDecimalPoint>:

void setDecimalPoint(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 80010f0:	2102      	movs	r1, #2
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <setDecimalPoint+0x10>)
 80010f4:	f7ff ff2e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	48000400 	.word	0x48000400

08001100 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001104:	2101      	movs	r1, #1
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f7ff ff23 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f7ff ff1d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <setTwo>:

void setTwo(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001124:	2101      	movs	r1, #1
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f7ff ff13 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800112e:	2102      	movs	r1, #2
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f7ff ff0e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001138:	2110      	movs	r1, #16
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <setTwo+0x38>)
 800113c:	f7ff ff0a 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f7ff ff04 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800114c:	2120      	movs	r1, #32
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <setTwo+0x38>)
 8001150:	f7ff ff00 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	48000400 	.word	0x48000400

0800115c <setThree>:

void setThree(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001160:	2101      	movs	r1, #1
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f7ff fef5 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800116a:	2102      	movs	r1, #2
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f7ff fef0 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001174:	2110      	movs	r1, #16
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <setThree+0x38>)
 8001178:	f7ff feec 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f7ff fee6 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001188:	2120      	movs	r1, #32
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <setThree+0x38>)
 800118c:	f7ff fee2 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400

08001198 <setFour>:

void setFour(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800119c:	2108      	movs	r1, #8
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f7ff fed7 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011a6:	2101      	movs	r1, #1
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f7ff fed2 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011b0:	2110      	movs	r1, #16
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <setFour+0x30>)
 80011b4:	f7ff fece 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f7ff fec8 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000400 	.word	0x48000400

080011cc <setFive>:

void setFive(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80011d0:	2108      	movs	r1, #8
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f7ff febd 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80011da:	2120      	movs	r1, #32
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <setFive+0x38>)
 80011de:	f7ff feb9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011e2:	2110      	movs	r1, #16
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <setFive+0x38>)
 80011e6:	f7ff feb5 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f7ff feaf 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011f6:	2102      	movs	r1, #2
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f7ff feaa 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400

08001208 <setSix>:

void setSix(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800120c:	2108      	movs	r1, #8
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f7ff fe9f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001216:	2120      	movs	r1, #32
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <setSix+0x44>)
 800121a:	f7ff fe9b 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800121e:	2110      	movs	r1, #16
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <setSix+0x44>)
 8001222:	f7ff fe97 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f7ff fe91 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001232:	2102      	movs	r1, #2
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f7ff fe8c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800123c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f7ff fe86 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	48000400 	.word	0x48000400

08001250 <setSeven>:

void setSeven(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001254:	2101      	movs	r1, #1
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f7ff fe7b 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f7ff fe75 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800126a:	2102      	movs	r1, #2
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f7ff fe70 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <setEight>:

void setEight(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800127c:	2108      	movs	r1, #8
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f7ff fe67 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001286:	2120      	movs	r1, #32
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <setEight+0x50>)
 800128a:	f7ff fe63 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800128e:	2110      	movs	r1, #16
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <setEight+0x50>)
 8001292:	f7ff fe5f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f7ff fe59 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012a2:	2102      	movs	r1, #2
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f7ff fe54 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f7ff fe4e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80012b8:	2101      	movs	r1, #1
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f7ff fe49 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400

080012cc <setNine>:

void setNine(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80012d0:	2101      	movs	r1, #1
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f7ff fe3d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80012da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f7ff fe37 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012e6:	2102      	movs	r1, #2
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f7ff fe32 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80012f0:	2110      	movs	r1, #16
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <setNine+0x3c>)
 80012f4:	f7ff fe2e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80012f8:	2108      	movs	r1, #8
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f7ff fe29 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	48000400 	.word	0x48000400

0800130c <setZero>:

void setZero(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001310:	2108      	movs	r1, #8
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f7ff fe1d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800131a:	2120      	movs	r1, #32
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <setZero+0x48>)
 800131e:	f7ff fe19 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f7ff fe13 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800132e:	2102      	movs	r1, #2
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f7ff fe0e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f7ff fe08 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001344:	2101      	movs	r1, #1
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f7ff fe03 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	48000400 	.word	0x48000400

08001358 <setA>:

void setA(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800135c:	2108      	movs	r1, #8
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f7ff fdf7 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f7ff fdf1 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001372:	2102      	movs	r1, #2
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f7ff fdec 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800137c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f7ff fde6 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001388:	2101      	movs	r1, #1
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f7ff fde1 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001392:	2110      	movs	r1, #16
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <setA+0x48>)
 8001396:	f7ff fddd 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	48000400 	.word	0x48000400

080013a4 <setB>:

void setB(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f7ff fdd0 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013b4:	2120      	movs	r1, #32
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <setB+0x3c>)
 80013b8:	f7ff fdcc 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f7ff fdc6 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80013c8:	2108      	movs	r1, #8
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f7ff fdc1 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80013d2:	2110      	movs	r1, #16
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <setB+0x3c>)
 80013d6:	f7ff fdbd 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	48000400 	.word	0x48000400

080013e4 <setC>:

void setC(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80013e8:	2102      	movs	r1, #2
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f7ff fdb1 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013f2:	2120      	movs	r1, #32
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <setC+0x30>)
 80013f6:	f7ff fdad 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f7ff fda7 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001406:	2108      	movs	r1, #8
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f7ff fda2 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	48000400 	.word	0x48000400

08001418 <setD>:

void setD(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800141c:	2101      	movs	r1, #1
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f7ff fd97 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f7ff fd91 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001432:	2120      	movs	r1, #32
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <setD+0x3c>)
 8001436:	f7ff fd8d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f7ff fd87 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001446:	2110      	movs	r1, #16
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <setD+0x3c>)
 800144a:	f7ff fd83 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	48000400 	.word	0x48000400

08001458 <setE>:

void setE(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800145c:	2102      	movs	r1, #2
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f7ff fd77 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001466:	2120      	movs	r1, #32
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <setE+0x38>)
 800146a:	f7ff fd73 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800146e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f7ff fd6d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800147a:	2108      	movs	r1, #8
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f7ff fd68 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001484:	2110      	movs	r1, #16
 8001486:	4802      	ldr	r0, [pc, #8]	; (8001490 <setE+0x38>)
 8001488:	f7ff fd64 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	48000400 	.word	0x48000400

08001494 <setF>:

void setF(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001498:	2102      	movs	r1, #2
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f7ff fd59 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f7ff fd53 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014ae:	2108      	movs	r1, #8
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f7ff fd4e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014b8:	2110      	movs	r1, #16
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <setF+0x30>)
 80014bc:	f7ff fd4a 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	48000400 	.word	0x48000400

080014c8 <setG>:

void setG(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014cc:	2102      	movs	r1, #2
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f7ff fd3f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f7ff fd39 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014e2:	2120      	movs	r1, #32
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <setG+0x3c>)
 80014e6:	f7ff fd35 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f7ff fd2f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014f6:	2108      	movs	r1, #8
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f7ff fd2a 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	48000400 	.word	0x48000400

08001508 <setH>:

void setH(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800150c:	2101      	movs	r1, #1
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f7ff fd1f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f7ff fd19 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f7ff fd13 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800152e:	2108      	movs	r1, #8
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f7ff fd0e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001538:	2110      	movs	r1, #16
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <setH+0x3c>)
 800153c:	f7ff fd0a 	bl	8000f54 <LL_GPIO_ResetOutputPin>

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400

08001548 <setI>:

void setI(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f7ff fcfe 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001558:	2108      	movs	r1, #8
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff fcf9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <setJ>:

void setJ(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800156c:	2101      	movs	r1, #1
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f7ff fcef 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f7ff fce9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001582:	2120      	movs	r1, #32
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <setJ+0x34>)
 8001586:	f7ff fce5 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800158a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f7ff fcdf 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	48000400 	.word	0x48000400

080015a0 <setL>:

void setL(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015a4:	2120      	movs	r1, #32
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <setL+0x28>)
 80015a8:	f7ff fcd4 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f7ff fcce 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015b8:	2108      	movs	r1, #8
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f7ff fcc9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	48000400 	.word	0x48000400

080015cc <setN>:

void setN(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f7ff fcbc 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f7ff fcb6 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015e8:	2110      	movs	r1, #16
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <setN+0x28>)
 80015ec:	f7ff fcb2 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	48000400 	.word	0x48000400

080015f8 <setO>:

void setO(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015fc:	2102      	movs	r1, #2
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f7ff fca7 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001606:	2101      	movs	r1, #1
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f7ff fca2 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f7ff fc9c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800161c:	2120      	movs	r1, #32
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <setO+0x48>)
 8001620:	f7ff fc98 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f7ff fc92 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001630:	2108      	movs	r1, #8
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f7ff fc8d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	48000400 	.word	0x48000400

08001644 <setP>:

void setP(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001648:	2102      	movs	r1, #2
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f7ff fc81 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001652:	2101      	movs	r1, #1
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f7ff fc7c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f7ff fc76 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001668:	2108      	movs	r1, #8
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f7ff fc71 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001672:	2110      	movs	r1, #16
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <setP+0x3c>)
 8001676:	f7ff fc6d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	48000400 	.word	0x48000400

08001684 <setQ>:

void setQ(void){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001688:	2102      	movs	r1, #2
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f7ff fc61 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001692:	2101      	movs	r1, #1
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f7ff fc5c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f7ff fc56 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016a8:	2108      	movs	r1, #8
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f7ff fc51 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016b2:	2110      	movs	r1, #16
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <setQ+0x3c>)
 80016b6:	f7ff fc4d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	48000400 	.word	0x48000400

080016c4 <setR>:

void setR(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f7ff fc40 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016d4:	2110      	movs	r1, #16
 80016d6:	4802      	ldr	r0, [pc, #8]	; (80016e0 <setR+0x1c>)
 80016d8:	f7ff fc3c 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	48000400 	.word	0x48000400

080016e4 <setS>:

void setS(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016e8:	2102      	movs	r1, #2
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f7ff fc31 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f7ff fc2b 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016fe:	2120      	movs	r1, #32
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <setS+0x38>)
 8001702:	f7ff fc27 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001706:	2108      	movs	r1, #8
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f7ff fc22 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001710:	2110      	movs	r1, #16
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <setS+0x38>)
 8001714:	f7ff fc1e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48000400 	.word	0x48000400

08001720 <setT>:

void setT(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001724:	2120      	movs	r1, #32
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <setT+0x30>)
 8001728:	f7ff fc14 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800172c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f7ff fc0e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001738:	2108      	movs	r1, #8
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f7ff fc09 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001742:	2110      	movs	r1, #16
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <setT+0x30>)
 8001746:	f7ff fc05 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	48000400 	.word	0x48000400

08001754 <setU>:

void setU(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001758:	2101      	movs	r1, #1
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f7ff fbf9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f7ff fbf3 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800176e:	2120      	movs	r1, #32
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <setU+0x3c>)
 8001772:	f7ff fbef 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f7ff fbe9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001782:	2108      	movs	r1, #8
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f7ff fbe4 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	48000400 	.word	0x48000400

08001794 <setY>:

void setY(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001798:	2101      	movs	r1, #1
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f7ff fbd9 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f7ff fbd3 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017ae:	2120      	movs	r1, #32
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <setY+0x38>)
 80017b2:	f7ff fbcf 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017b6:	2108      	movs	r1, #8
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f7ff fbca 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80017c0:	2110      	movs	r1, #16
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <setY+0x38>)
 80017c4:	f7ff fbc6 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	48000400 	.word	0x48000400

080017d0 <setK>:

void setK(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	// B,C,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80017d4:	2101      	movs	r1, #1
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f7ff fbbb 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f7ff fbb5 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80017ea:	2110      	movs	r1, #16
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <setK+0x28>)
 80017ee:	f7ff fbb1 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	48000400 	.word	0x48000400

080017fc <setM>:

void setM(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	// A,C,E
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001800:	2102      	movs	r1, #2
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f7ff fba5 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800180a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f7ff fb9f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f7ff fb99 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <setV>:

void setV(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800182c:	2101      	movs	r1, #1
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f7ff fb8f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001836:	2120      	movs	r1, #32
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <setV+0x24>)
 800183a:	f7ff fb8b 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800183e:	2108      	movs	r1, #8
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f7ff fb86 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	48000400 	.word	0x48000400

08001850 <setW>:

void setW(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001854:	2108      	movs	r1, #8
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f7ff fb7b 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800185e:	2120      	movs	r1, #32
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <setW+0x44>)
 8001862:	f7ff fb77 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001866:	2110      	movs	r1, #16
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <setW+0x44>)
 800186a:	f7ff fb73 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800186e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f7ff fb6d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800187a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f7ff fb67 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001886:	2101      	movs	r1, #1
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f7ff fb62 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	48000400 	.word	0x48000400

08001898 <setX>:

void setX(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	// A,D,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800189c:	2102      	movs	r1, #2
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f7ff fb57 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80018a6:	2120      	movs	r1, #32
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <setX+0x24>)
 80018aa:	f7ff fb53 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018ae:	2110      	movs	r1, #16
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <setX+0x24>)
 80018b2:	f7ff fb4f 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	48000400 	.word	0x48000400

080018c0 <setZ>:

void setZ(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	// B,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f7ff fb42 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80018d0:	2101      	movs	r1, #1
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f7ff fb3d 	bl	8000f54 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018da:	2110      	movs	r1, #16
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <setZ+0x28>)
 80018de:	f7ff fb39 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	48000400 	.word	0x48000400

080018ec <set_>:

void set_(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80018f0:	2120      	movs	r1, #32
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <set_+0x10>)
 80018f4:	f7ff fb2e 	bl	8000f54 <LL_GPIO_ResetOutputPin>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	48000400 	.word	0x48000400

08001900 <displayString>:
	        i++;
	    }
	}
}

void displayString(uint8_t str[4]){
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    dDisplayData.digit_num = 4;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <displayString+0x54>)
 800190a:	2204      	movs	r2, #4
 800190c:	711a      	strb	r2, [r3, #4]
    dDisplayData.negative = 0;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <displayString+0x54>)
 8001910:	2200      	movs	r2, #0
 8001912:	715a      	strb	r2, [r3, #5]
    dDisplayData.resolution = 0;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <displayString+0x54>)
 8001916:	2200      	movs	r2, #0
 8001918:	719a      	strb	r2, [r3, #6]

    int j = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 800191e:	2303      	movs	r3, #3
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	e00e      	b.n	8001942 <displayString+0x42>
        dDisplayData.digit[i] = str[j];
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4a09      	ldr	r2, [pc, #36]	; (8001954 <displayString+0x54>)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4413      	add	r3, r2
 8001932:	460a      	mov	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
        j++;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	3b01      	subs	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	daed      	bge.n	8001924 <displayString+0x24>
    }
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20000024 	.word	0x20000024

08001958 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d823      	bhi.n	80019b0 <setDigit+0x58>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <setDigit+0x18>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	0800198d 	.word	0x0800198d
 8001978:	0800199b 	.word	0x0800199b
 800197c:	080019a7 	.word	0x080019a7
	{
		case 0:
			DIGIT_4_ON;
 8001980:	2104      	movs	r1, #4
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f7ff fad7 	bl	8000f38 <LL_GPIO_SetOutputPin>
			break;
 800198a:	e011      	b.n	80019b0 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 800198c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f7ff fad0 	bl	8000f38 <LL_GPIO_SetOutputPin>
			break;
 8001998:	e00a      	b.n	80019b0 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 800199a:	2110      	movs	r1, #16
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f7ff faca 	bl	8000f38 <LL_GPIO_SetOutputPin>
			break;
 80019a4:	e004      	b.n	80019b0 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 80019a6:	2101      	movs	r1, #1
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <setDigit+0x60>)
 80019aa:	f7ff fac5 	bl	8000f38 <LL_GPIO_SetOutputPin>
			break;
 80019ae:	bf00      	nop
	}
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	48000400 	.word	0x48000400

080019bc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	e1c6      	b.n	8001d56 <updateDisplay+0x39a>
	{
		switch(dDisplayData.digit[i])
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4acd      	ldr	r2, [pc, #820]	; (8001d00 <updateDisplay+0x344>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	3b30      	subs	r3, #48	; 0x30
 80019d0:	2b4a      	cmp	r3, #74	; 0x4a
 80019d2:	f200 819e 	bhi.w	8001d12 <updateDisplay+0x356>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <updateDisplay+0x20>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001b09 	.word	0x08001b09
 80019e0:	08001b17 	.word	0x08001b17
 80019e4:	08001b25 	.word	0x08001b25
 80019e8:	08001b33 	.word	0x08001b33
 80019ec:	08001b41 	.word	0x08001b41
 80019f0:	08001b4f 	.word	0x08001b4f
 80019f4:	08001b5d 	.word	0x08001b5d
 80019f8:	08001b6b 	.word	0x08001b6b
 80019fc:	08001b79 	.word	0x08001b79
 8001a00:	08001b87 	.word	0x08001b87
 8001a04:	08001d13 	.word	0x08001d13
 8001a08:	08001d13 	.word	0x08001d13
 8001a0c:	08001d13 	.word	0x08001d13
 8001a10:	08001d13 	.word	0x08001d13
 8001a14:	08001d13 	.word	0x08001d13
 8001a18:	08001d13 	.word	0x08001d13
 8001a1c:	08001d13 	.word	0x08001d13
 8001a20:	08001d13 	.word	0x08001d13
 8001a24:	08001d13 	.word	0x08001d13
 8001a28:	08001d13 	.word	0x08001d13
 8001a2c:	08001d13 	.word	0x08001d13
 8001a30:	08001d13 	.word	0x08001d13
 8001a34:	08001d13 	.word	0x08001d13
 8001a38:	08001d13 	.word	0x08001d13
 8001a3c:	08001d13 	.word	0x08001d13
 8001a40:	08001d13 	.word	0x08001d13
 8001a44:	08001d13 	.word	0x08001d13
 8001a48:	08001d13 	.word	0x08001d13
 8001a4c:	08001d13 	.word	0x08001d13
 8001a50:	08001d13 	.word	0x08001d13
 8001a54:	08001d13 	.word	0x08001d13
 8001a58:	08001d13 	.word	0x08001d13
 8001a5c:	08001d13 	.word	0x08001d13
 8001a60:	08001d13 	.word	0x08001d13
 8001a64:	08001d13 	.word	0x08001d13
 8001a68:	08001d13 	.word	0x08001d13
 8001a6c:	08001d13 	.word	0x08001d13
 8001a70:	08001d13 	.word	0x08001d13
 8001a74:	08001d13 	.word	0x08001d13
 8001a78:	08001d13 	.word	0x08001d13
 8001a7c:	08001d13 	.word	0x08001d13
 8001a80:	08001d13 	.word	0x08001d13
 8001a84:	08001d13 	.word	0x08001d13
 8001a88:	08001d13 	.word	0x08001d13
 8001a8c:	08001d13 	.word	0x08001d13
 8001a90:	08001d13 	.word	0x08001d13
 8001a94:	08001d13 	.word	0x08001d13
 8001a98:	08001d05 	.word	0x08001d05
 8001a9c:	08001d13 	.word	0x08001d13
 8001aa0:	08001b95 	.word	0x08001b95
 8001aa4:	08001ba3 	.word	0x08001ba3
 8001aa8:	08001bb1 	.word	0x08001bb1
 8001aac:	08001bbf 	.word	0x08001bbf
 8001ab0:	08001bcd 	.word	0x08001bcd
 8001ab4:	08001bdb 	.word	0x08001bdb
 8001ab8:	08001be9 	.word	0x08001be9
 8001abc:	08001bf7 	.word	0x08001bf7
 8001ac0:	08001c05 	.word	0x08001c05
 8001ac4:	08001c13 	.word	0x08001c13
 8001ac8:	08001c21 	.word	0x08001c21
 8001acc:	08001c2f 	.word	0x08001c2f
 8001ad0:	08001c3d 	.word	0x08001c3d
 8001ad4:	08001c4b 	.word	0x08001c4b
 8001ad8:	08001c59 	.word	0x08001c59
 8001adc:	08001c67 	.word	0x08001c67
 8001ae0:	08001c75 	.word	0x08001c75
 8001ae4:	08001c83 	.word	0x08001c83
 8001ae8:	08001c91 	.word	0x08001c91
 8001aec:	08001c9f 	.word	0x08001c9f
 8001af0:	08001cad 	.word	0x08001cad
 8001af4:	08001cbb 	.word	0x08001cbb
 8001af8:	08001cc9 	.word	0x08001cc9
 8001afc:	08001cd7 	.word	0x08001cd7
 8001b00:	08001ce5 	.word	0x08001ce5
 8001b04:	08001cf3 	.word	0x08001cf3
		{
			case 48:
			  setDigit(i);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff24 	bl	8001958 <setDigit>
			  setZero();
 8001b10:	f7ff fbfc 	bl	800130c <setZero>
			  break;
 8001b14:	e0fd      	b.n	8001d12 <updateDisplay+0x356>
			case 49:
			  setDigit(i);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff1d 	bl	8001958 <setDigit>
			  setOne();
 8001b1e:	f7ff faef 	bl	8001100 <setOne>
			  break;
 8001b22:	e0f6      	b.n	8001d12 <updateDisplay+0x356>
			case 50:
			  setDigit(i);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff16 	bl	8001958 <setDigit>
			  setTwo();
 8001b2c:	f7ff faf8 	bl	8001120 <setTwo>
			  break;
 8001b30:	e0ef      	b.n	8001d12 <updateDisplay+0x356>
			case 51:
			  setDigit(i);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff0f 	bl	8001958 <setDigit>
			  setThree();
 8001b3a:	f7ff fb0f 	bl	800115c <setThree>
			  break;
 8001b3e:	e0e8      	b.n	8001d12 <updateDisplay+0x356>
			case 52:
			  setDigit(i);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff08 	bl	8001958 <setDigit>
			  setFour();
 8001b48:	f7ff fb26 	bl	8001198 <setFour>
			  break;
 8001b4c:	e0e1      	b.n	8001d12 <updateDisplay+0x356>
			case 53:
			  setDigit(i);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff01 	bl	8001958 <setDigit>
			  setFive();
 8001b56:	f7ff fb39 	bl	80011cc <setFive>
			  break;
 8001b5a:	e0da      	b.n	8001d12 <updateDisplay+0x356>
			case 54:
			  setDigit(i);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fefa 	bl	8001958 <setDigit>
			  setSix();
 8001b64:	f7ff fb50 	bl	8001208 <setSix>
			  break;
 8001b68:	e0d3      	b.n	8001d12 <updateDisplay+0x356>
			case 55:
			  setDigit(i);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fef3 	bl	8001958 <setDigit>
			  setSeven();
 8001b72:	f7ff fb6d 	bl	8001250 <setSeven>
			  break;
 8001b76:	e0cc      	b.n	8001d12 <updateDisplay+0x356>
			case 56:
			  setDigit(i);
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff feec 	bl	8001958 <setDigit>
			  setEight();
 8001b80:	f7ff fb7a 	bl	8001278 <setEight>
			  break;
 8001b84:	e0c5      	b.n	8001d12 <updateDisplay+0x356>
			case 57:
			  setDigit(i);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fee5 	bl	8001958 <setDigit>
			  setNine();
 8001b8e:	f7ff fb9d 	bl	80012cc <setNine>
			  break;
 8001b92:	e0be      	b.n	8001d12 <updateDisplay+0x356>

			// Letters - ASCII code of small letter

			case 97:
			  setDigit(i);
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fede 	bl	8001958 <setDigit>
			  setA();
 8001b9c:	f7ff fbdc 	bl	8001358 <setA>
			  break;
 8001ba0:	e0b7      	b.n	8001d12 <updateDisplay+0x356>
			case 98:
			  setDigit(i);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fed7 	bl	8001958 <setDigit>
		      setB();
 8001baa:	f7ff fbfb 	bl	80013a4 <setB>
		      break;
 8001bae:	e0b0      	b.n	8001d12 <updateDisplay+0x356>
			case 99:
			  setDigit(i);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fed0 	bl	8001958 <setDigit>
			  setC();
 8001bb8:	f7ff fc14 	bl	80013e4 <setC>
			  break;
 8001bbc:	e0a9      	b.n	8001d12 <updateDisplay+0x356>
			case 100:
			  setDigit(i);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fec9 	bl	8001958 <setDigit>
			  setD();
 8001bc6:	f7ff fc27 	bl	8001418 <setD>
		      break;
 8001bca:	e0a2      	b.n	8001d12 <updateDisplay+0x356>
			case 101:
			  setDigit(i);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fec2 	bl	8001958 <setDigit>
		      setE();
 8001bd4:	f7ff fc40 	bl	8001458 <setE>
		      break;
 8001bd8:	e09b      	b.n	8001d12 <updateDisplay+0x356>
			case 102:
			  setDigit(i);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff febb 	bl	8001958 <setDigit>
			  setF();
 8001be2:	f7ff fc57 	bl	8001494 <setF>
			  break;
 8001be6:	e094      	b.n	8001d12 <updateDisplay+0x356>
			case 103:
			  setDigit(i);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff feb4 	bl	8001958 <setDigit>
			  setG();
 8001bf0:	f7ff fc6a 	bl	80014c8 <setG>
			  break;
 8001bf4:	e08d      	b.n	8001d12 <updateDisplay+0x356>
			case 104:
			  setDigit(i);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fead 	bl	8001958 <setDigit>
			  setH();
 8001bfe:	f7ff fc83 	bl	8001508 <setH>
			  break;
 8001c02:	e086      	b.n	8001d12 <updateDisplay+0x356>
			case 105:
			  setDigit(i);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fea6 	bl	8001958 <setDigit>
			  setI();
 8001c0c:	f7ff fc9c 	bl	8001548 <setI>
			  break;
 8001c10:	e07f      	b.n	8001d12 <updateDisplay+0x356>
			case 106:
			  setDigit(i);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe9f 	bl	8001958 <setDigit>
			  setJ();
 8001c1a:	f7ff fca5 	bl	8001568 <setJ>
			  break;
 8001c1e:	e078      	b.n	8001d12 <updateDisplay+0x356>
			case 107:
			  setDigit(i);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fe98 	bl	8001958 <setDigit>
			  setK();
 8001c28:	f7ff fdd2 	bl	80017d0 <setK>
			  break;
 8001c2c:	e071      	b.n	8001d12 <updateDisplay+0x356>
			case 108:
			  setDigit(i);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe91 	bl	8001958 <setDigit>
			  setL();
 8001c36:	f7ff fcb3 	bl	80015a0 <setL>
			  break;
 8001c3a:	e06a      	b.n	8001d12 <updateDisplay+0x356>
			case 109:
			  setDigit(i);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe8a 	bl	8001958 <setDigit>
			  setM();
 8001c44:	f7ff fdda 	bl	80017fc <setM>
			  break;
 8001c48:	e063      	b.n	8001d12 <updateDisplay+0x356>
			case 110:
			  setDigit(i);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe83 	bl	8001958 <setDigit>
			  setN();
 8001c52:	f7ff fcbb 	bl	80015cc <setN>
			  break;
 8001c56:	e05c      	b.n	8001d12 <updateDisplay+0x356>
			case 111:
			  setDigit(i);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe7c 	bl	8001958 <setDigit>
			  setO();
 8001c60:	f7ff fcca 	bl	80015f8 <setO>
			  break;
 8001c64:	e055      	b.n	8001d12 <updateDisplay+0x356>
			case 112:
			  setDigit(i);
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe75 	bl	8001958 <setDigit>
			  setP();
 8001c6e:	f7ff fce9 	bl	8001644 <setP>
			  break;
 8001c72:	e04e      	b.n	8001d12 <updateDisplay+0x356>
			case 113:
    		  setDigit(i);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fe6e 	bl	8001958 <setDigit>
    		  setQ();
 8001c7c:	f7ff fd02 	bl	8001684 <setQ>
    		  break;
 8001c80:	e047      	b.n	8001d12 <updateDisplay+0x356>
			case 114:
			  setDigit(i);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe67 	bl	8001958 <setDigit>
			  setR();
 8001c8a:	f7ff fd1b 	bl	80016c4 <setR>
			  break;
 8001c8e:	e040      	b.n	8001d12 <updateDisplay+0x356>
			case 115:
			  setDigit(i);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe60 	bl	8001958 <setDigit>
			  setS();
 8001c98:	f7ff fd24 	bl	80016e4 <setS>
			  break;
 8001c9c:	e039      	b.n	8001d12 <updateDisplay+0x356>
			case 116:
			  setDigit(i);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe59 	bl	8001958 <setDigit>
			  setT();
 8001ca6:	f7ff fd3b 	bl	8001720 <setT>
			  break;
 8001caa:	e032      	b.n	8001d12 <updateDisplay+0x356>
			case 117:
     		  setDigit(i);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe52 	bl	8001958 <setDigit>
     		  setU();
 8001cb4:	f7ff fd4e 	bl	8001754 <setU>
     		  break;
 8001cb8:	e02b      	b.n	8001d12 <updateDisplay+0x356>
			case 118:
			  setDigit(i);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe4b 	bl	8001958 <setDigit>
			  setV();
 8001cc2:	f7ff fdb1 	bl	8001828 <setV>
			  break;
 8001cc6:	e024      	b.n	8001d12 <updateDisplay+0x356>
			case 119:
			  setDigit(i);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe44 	bl	8001958 <setDigit>
			  setW();
 8001cd0:	f7ff fdbe 	bl	8001850 <setW>
			  break;
 8001cd4:	e01d      	b.n	8001d12 <updateDisplay+0x356>
			case 120:
			  setDigit(i);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe3d 	bl	8001958 <setDigit>
			  setX();
 8001cde:	f7ff fddb 	bl	8001898 <setX>
			  break;
 8001ce2:	e016      	b.n	8001d12 <updateDisplay+0x356>
			case 121:
			  setDigit(i);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe36 	bl	8001958 <setDigit>
			  setY();
 8001cec:	f7ff fd52 	bl	8001794 <setY>
			  break;
 8001cf0:	e00f      	b.n	8001d12 <updateDisplay+0x356>
			case 122:
			  setDigit(i);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe2f 	bl	8001958 <setDigit>
			  setZ();
 8001cfa:	f7ff fde1 	bl	80018c0 <setZ>
			  break;
 8001cfe:	e008      	b.n	8001d12 <updateDisplay+0x356>
 8001d00:	20000024 	.word	0x20000024
			case 95:
    		  setDigit(i);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fe26 	bl	8001958 <setDigit>
    		  set_();
 8001d0c:	f7ff fdee 	bl	80018ec <set_>
    		  break;
 8001d10:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <updateDisplay+0x3ac>)
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d101      	bne.n	8001d20 <updateDisplay+0x364>
		{
			setDecimalPoint();
 8001d1c:	f7ff f9e6 	bl	80010ec <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <updateDisplay+0x3b0>)
 8001d22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <updateDisplay+0x3b4>)
 8001d28:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8001d2c:	bf00      	nop
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <updateDisplay+0x3b4>)
 8001d30:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d34:	1c8b      	adds	r3, r1, #2
 8001d36:	f142 0400 	adc.w	r4, r2, #0
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <updateDisplay+0x3b0>)
 8001d3c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001d40:	42a2      	cmp	r2, r4
 8001d42:	bf08      	it	eq
 8001d44:	4299      	cmpeq	r1, r3
 8001d46:	d3f2      	bcc.n	8001d2e <updateDisplay+0x372>

		resetDigits();
 8001d48:	f7ff f990 	bl	800106c <resetDigits>
		resetSegments();
 8001d4c:	f7ff f932 	bl	8000fb4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	3301      	adds	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	f67f ae35 	bls.w	80019c8 <updateDisplay+0xc>
	}
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000024 	.word	0x20000024
 8001d6c:	20000030 	.word	0x20000030
 8001d70:	20000038 	.word	0x20000038

08001d74 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <TIM3_IRQHandler+0x20>)
 8001d7a:	f7ff f907 	bl	8000f8c <LL_TIM_IsActiveFlag_UPDATE>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001d84:	f7ff fe1a 	bl	80019bc <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM3_IRQHandler+0x20>)
 8001d8a:	f7ff f8f1 	bl	8000f70 <LL_TIM_ClearFlag_UPDATE>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000400 	.word	0x40000400

08001d98 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <LL_GPIO_ResetOutputPin>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dfe:	f7ff ffcb 	bl	8001d98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e06:	f7ff ffc7 	bl	8001d98 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8001e0a:	f640 111b 	movw	r1, #2331	; 0x91b
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f7ff ffd9 	bl	8001dc8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001e16:	2132      	movs	r1, #50	; 0x32
 8001e18:	4813      	ldr	r0, [pc, #76]	; (8001e68 <MX_GPIO_Init+0x84>)
 8001e1a:	f7ff ffd5 	bl	8001dc8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8001e1e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001e22:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e24:	2301      	movs	r3, #1
 8001e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f7fe fabf 	bl	80003be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 8001e40:	2333      	movs	r3, #51	; 0x33
 8001e42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e44:	2301      	movs	r3, #1
 8001e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_GPIO_Init+0x84>)
 8001e5a:	f7fe fab0 	bl	80003be <LL_GPIO_Init>

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	48000400 	.word	0x48000400

08001e6c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <NVIC_EnableIRQ+0x30>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da0b      	bge.n	8001ee8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <NVIC_SetPriority+0x4c>)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	3b04      	subs	r3, #4
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee6:	e009      	b.n	8001efc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <NVIC_SetPriority+0x50>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_I2C_Enable>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_I2C_EnableClockStretching>:
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_I2C_DisableGeneralCall>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_I2C_SetOwnAddress2>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fea:	f023 0306 	bic.w	r3, r3, #6
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	60da      	str	r2, [r3, #12]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_I2C_DisableOwnAddress2>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_I2C_EnableIT_RX>:
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f043 0204 	orr.w	r2, r3, #4
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_I2C_DisableIT_RX>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0204 	bic.w	r2, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_I2C_IsActiveFlag_TXIS>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_I2C_IsActiveFlag_RXNE>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_I2C_IsActiveFlag_STOP>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_I2C_ClearFlag_STOP>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	61da      	str	r2, [r3, #28]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_I2C_EnableAutoEndMode>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <LL_I2C_HandleTransfer+0x48>)
 8002134:	430b      	orrs	r3, r1
 8002136:	43db      	mvns	r3, r3
 8002138:	401a      	ands	r2, r3
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4319      	orrs	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	4319      	orrs	r1, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4319      	orrs	r1, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	430b      	orrs	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	03ff7bff 	.word	0x03ff7bff

08002164 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_AHB1_GRP1_EnableClock>:
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000

080021cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000

080021fc <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
 8002212:	615a      	str	r2, [r3, #20]
 8002214:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002226:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800222a:	f7ff ffb7 	bl	800219c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002232:	2302      	movs	r3, #2
 8002234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800223a:	2301      	movs	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002242:	2304      	movs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4821      	ldr	r0, [pc, #132]	; (80022d0 <MX_I2C1_Init+0xd4>)
 800224c:	f7fe f8b7 	bl	80003be <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002250:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002254:	f7ff ffba 	bl	80021cc <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002258:	f7ff fe08 	bl	8001e6c <NVIC_GetPriorityGrouping>
 800225c:	4603      	mov	r3, r0
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fe54 	bl	8001f10 <NVIC_EncodePriority>
 8002268:	4603      	mov	r3, r0
 800226a:	4619      	mov	r1, r3
 800226c:	201f      	movs	r0, #31
 800226e:	f7ff fe25 	bl	8001ebc <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002272:	201f      	movs	r0, #31
 8002274:	f7ff fe08 	bl	8001e88 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002278:	4816      	ldr	r0, [pc, #88]	; (80022d4 <MX_I2C1_Init+0xd8>)
 800227a:	f7ff ff3d 	bl	80020f8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800227e:	4815      	ldr	r0, [pc, #84]	; (80022d4 <MX_I2C1_Init+0xd8>)
 8002280:	f7ff fec1 	bl	8002006 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002284:	4813      	ldr	r0, [pc, #76]	; (80022d4 <MX_I2C1_Init+0xd8>)
 8002286:	f7ff fe96 	bl	8001fb6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800228a:	4812      	ldr	r0, [pc, #72]	; (80022d4 <MX_I2C1_Init+0xd8>)
 800228c:	f7ff fe83 	bl	8001f96 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_I2C1_Init+0xdc>)
 8002296:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80022a0:	2302      	movs	r3, #2
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4808      	ldr	r0, [pc, #32]	; (80022d4 <MX_I2C1_Init+0xd8>)
 80022b4:	f7fe f9a0 	bl	80005f8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_I2C1_Init+0xd8>)
 80022be:	f7ff fe8a 	bl	8001fd6 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 80022c2:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_I2C1_Init+0xd8>)
 80022c4:	f7ff fe57 	bl	8001f76 <LL_I2C_Enable>
}
 80022c8:	bf00      	nop
 80022ca:	3738      	adds	r7, #56	; 0x38
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	48000400 	.word	0x48000400
 80022d4:	40005400 	.word	0x40005400
 80022d8:	2000090e 	.word	0x2000090e

080022dc <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	4604      	mov	r4, r0
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	4603      	mov	r3, r0
 80022f0:	71bb      	strb	r3, [r7, #6]
 80022f2:	460b      	mov	r3, r1
 80022f4:	717b      	strb	r3, [r7, #5]
 80022f6:	4613      	mov	r3, r2
 80022f8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80022fa:	793b      	ldrb	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002306:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002308:	7979      	ldrb	r1, [r7, #5]
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <i2c_master_write+0x80>)
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2302      	movs	r3, #2
 8002316:	2200      	movs	r2, #0
 8002318:	4811      	ldr	r0, [pc, #68]	; (8002360 <i2c_master_write+0x84>)
 800231a:	f7ff fefd 	bl	8002118 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	4619      	mov	r1, r3
 8002322:	480f      	ldr	r0, [pc, #60]	; (8002360 <i2c_master_write+0x84>)
 8002324:	f7ff ff2b 	bl	800217e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002328:	e00a      	b.n	8002340 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <i2c_master_write+0x84>)
 800232c:	f7ff fe9b 	bl	8002066 <LL_I2C_IsActiveFlag_TXIS>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4619      	mov	r1, r3
 800233a:	4809      	ldr	r0, [pc, #36]	; (8002360 <i2c_master_write+0x84>)
 800233c:	f7ff ff1f 	bl	800217e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <i2c_master_write+0x84>)
 8002342:	f7ff feb6 	bl	80020b2 <LL_I2C_IsActiveFlag_STOP>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <i2c_master_write+0x84>)
 800234e:	f7ff fec3 	bl	80020d8 <LL_I2C_ClearFlag_STOP>
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	bf00      	nop
 800235c:	80002000 	.word	0x80002000
 8002360:	40005400 	.word	0x40005400

08002364 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af02      	add	r7, sp, #8
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	70fb      	strb	r3, [r7, #3]
 8002376:	460b      	mov	r3, r1
 8002378:	70bb      	strb	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800237e:	4a31      	ldr	r2, [pc, #196]	; (8002444 <i2c_master_read+0xe0>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002384:	7c3b      	ldrb	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002390:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <i2c_master_read+0xe4>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002398:	482c      	ldr	r0, [pc, #176]	; (800244c <i2c_master_read+0xe8>)
 800239a:	f7ff fe44 	bl	8002026 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800239e:	7879      	ldrb	r1, [r7, #1]
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <i2c_master_read+0xec>)
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	2200      	movs	r2, #0
 80023ae:	4827      	ldr	r0, [pc, #156]	; (800244c <i2c_master_read+0xe8>)
 80023b0:	f7ff feb2 	bl	8002118 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80023b4:	e00a      	b.n	80023cc <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80023b6:	4825      	ldr	r0, [pc, #148]	; (800244c <i2c_master_read+0xe8>)
 80023b8:	f7ff fe55 	bl	8002066 <LL_I2C_IsActiveFlag_TXIS>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80023c2:	78bb      	ldrb	r3, [r7, #2]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4821      	ldr	r0, [pc, #132]	; (800244c <i2c_master_read+0xe8>)
 80023c8:	f7ff fed9 	bl	800217e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80023cc:	481f      	ldr	r0, [pc, #124]	; (800244c <i2c_master_read+0xe8>)
 80023ce:	f7ff fe70 	bl	80020b2 <LL_I2C_IsActiveFlag_STOP>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ee      	beq.n	80023b6 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80023d8:	481c      	ldr	r0, [pc, #112]	; (800244c <i2c_master_read+0xe8>)
 80023da:	f7ff fe7d 	bl	80020d8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80023de:	bf00      	nop
 80023e0:	481a      	ldr	r0, [pc, #104]	; (800244c <i2c_master_read+0xe8>)
 80023e2:	f7ff fe66 	bl	80020b2 <LL_I2C_IsActiveFlag_STOP>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80023ec:	7879      	ldrb	r1, [r7, #1]
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <i2c_master_read+0xf0>)
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	2200      	movs	r2, #0
 80023fe:	4813      	ldr	r0, [pc, #76]	; (800244c <i2c_master_read+0xe8>)
 8002400:	f7ff fe8a 	bl	8002118 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002404:	bf00      	nop
 8002406:	4811      	ldr	r0, [pc, #68]	; (800244c <i2c_master_read+0xe8>)
 8002408:	f7ff fe53 	bl	80020b2 <LL_I2C_IsActiveFlag_STOP>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f9      	beq.n	8002406 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002412:	480e      	ldr	r0, [pc, #56]	; (800244c <i2c_master_read+0xe8>)
 8002414:	f7ff fe60 	bl	80020d8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <i2c_master_read+0xe8>)
 800241a:	f7ff fe14 	bl	8002046 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <i2c_master_read+0xe8>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <i2c_master_read+0xe8>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <i2c_master_read+0xf4>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <i2c_master_read+0xe4>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002436:	4b03      	ldr	r3, [pc, #12]	; (8002444 <i2c_master_read+0xe0>)
 8002438:	681b      	ldr	r3, [r3, #0]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000044 	.word	0x20000044
 8002448:	20000040 	.word	0x20000040
 800244c:	40005400 	.word	0x40005400
 8002450:	80002000 	.word	0x80002000
 8002454:	80002400 	.word	0x80002400
 8002458:	20000041 	.word	0x20000041

0800245c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800245c:	b598      	push	{r3, r4, r7, lr}
 800245e:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002460:	4812      	ldr	r0, [pc, #72]	; (80024ac <I2C1_EV_IRQHandler+0x50>)
 8002462:	f7ff fe13 	bl	800208c <LL_I2C_IsActiveFlag_RXNE>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01c      	beq.n	80024a6 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <I2C1_EV_IRQHandler+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <I2C1_EV_IRQHandler+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	b2c8      	uxtb	r0, r1
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <I2C1_EV_IRQHandler+0x58>)
 800247c:	7008      	strb	r0, [r1, #0]
 800247e:	18d4      	adds	r4, r2, r3
 8002480:	480a      	ldr	r0, [pc, #40]	; (80024ac <I2C1_EV_IRQHandler+0x50>)
 8002482:	f7ff fe6f 	bl	8002164 <LL_I2C_ReceiveData8>
 8002486:	4603      	mov	r3, r0
 8002488:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <I2C1_EV_IRQHandler+0x58>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b13      	cmp	r3, #19
 8002492:	d903      	bls.n	800249c <I2C1_EV_IRQHandler+0x40>
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <I2C1_EV_IRQHandler+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e001      	b.n	80024a0 <I2C1_EV_IRQHandler+0x44>
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <I2C1_EV_IRQHandler+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <I2C1_EV_IRQHandler+0x5c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
	}
}
 80024a6:	bf00      	nop
 80024a8:	bd98      	pop	{r3, r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40005400 	.word	0x40005400
 80024b0:	20000044 	.word	0x20000044
 80024b4:	20000041 	.word	0x20000041
 80024b8:	20000040 	.word	0x20000040

080024bc <NVIC_SetPriorityGrouping>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <LL_RCC_HSI_Enable+0x1c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <LL_RCC_HSI_Enable+0x1c>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000

08002524 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <LL_RCC_HSI_IsReady+0x20>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b02      	cmp	r3, #2
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40021000 	.word	0x40021000

08002548 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000

08002574 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <LL_RCC_SetSysClkSource+0x24>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 0203 	bic.w	r2, r3, #3
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <LL_RCC_SetSysClkSource+0x24>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000

0800259c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <LL_RCC_GetSysClkSource+0x18>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <LL_RCC_SetAHBPrescaler+0x24>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <LL_RCC_SetAHBPrescaler+0x24>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000

080025e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <LL_RCC_SetAPB1Prescaler+0x24>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f0:	4904      	ldr	r1, [pc, #16]	; (8002604 <LL_RCC_SetAPB1Prescaler+0x24>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000

08002608 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002618:	4904      	ldr	r1, [pc, #16]	; (800262c <LL_RCC_SetAPB2Prescaler+0x24>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40021000 	.word	0x40021000

08002630 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <LL_RCC_SetI2CClockSource+0x2c>)
 800263a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0e1b      	lsrs	r3, r3, #24
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800264a:	4904      	ldr	r1, [pc, #16]	; (800265c <LL_RCC_SetI2CClockSource+0x2c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40021000 	.word	0x40021000

08002660 <LL_APB1_GRP1_EnableClock>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <LL_APB1_GRP1_EnableClock+0x2c>)
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <LL_APB1_GRP1_EnableClock+0x2c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40021000 	.word	0x40021000

08002690 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000

080026c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <LL_FLASH_SetLatency+0x24>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <LL_FLASH_SetLatency+0x24>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40022000 	.word	0x40022000

080026e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <LL_FLASH_GetLatency+0x18>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000

08002704 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d106      	bne.n	8002720 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <LL_SYSTICK_SetClkSource+0x34>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <LL_SYSTICK_SetClkSource+0x34>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800271e:	e005      	b.n	800272c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <LL_SYSTICK_SetClkSource+0x34>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <LL_SYSTICK_SetClkSource+0x34>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e010 	.word	0xe000e010

0800273c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <LL_SYSTICK_EnableIT+0x1c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <LL_SYSTICK_EnableIT+0x1c>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <main>:
extern uint64_t disp_time;
uint64_t saved_time;
double num_to_display = 10;

int main(void)
{
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002762:	2001      	movs	r0, #1
 8002764:	f7ff ff94 	bl	8002690 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002768:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800276c:	f7ff ff78 	bl	8002660 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002770:	2003      	movs	r0, #3
 8002772:	f7ff fea3 	bl	80024bc <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8002776:	f000 f885 	bl	8002884 <SystemClock_Config>

  MX_GPIO_Init();
 800277a:	f7ff fb33 	bl	8001de4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800277e:	f7ff fd3d 	bl	80021fc <MX_I2C1_Init>


  uint8_t lsm = lsm6ds0_init();
 8002782:	f000 fb57 	bl	8002e34 <lsm6ds0_init>
 8002786:	4603      	mov	r3, r0
 8002788:	77fb      	strb	r3, [r7, #31]

  setSegments();
 800278a:	f7fe fc41 	bl	8001010 <setSegments>
  setDigits();
 800278e:	f7fe fc8d 	bl	80010ac <setDigits>

  LL_mDelay(2000);
 8002792:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002796:	f7fe fb9b 	bl	8000ed0 <LL_mDelay>

  resetDigits();
 800279a:	f7fe fc67 	bl	800106c <resetDigits>
  resetSegments();
 800279e:	f7fe fc09 	bl	8000fb4 <resetSegments>

  MX_TIM3_Init();
 80027a2:	f000 fa8b 	bl	8002cbc <MX_TIM3_Init>
  uint8_t lps = lps25hb_init();
 80027a6:	f000 fbdb 	bl	8002f60 <lps25hb_init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	77bb      	strb	r3, [r7, #30]

  uint8_t text[21] = "branislav_kutas_98344";
 80027ae:	4b32      	ldr	r3, [pc, #200]	; (8002878 <main+0x11c>)
 80027b0:	1d3c      	adds	r4, r7, #4
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027bc:	6020      	str	r0, [r4, #0]
 80027be:	3404      	adds	r4, #4
 80027c0:	7021      	strb	r1, [r4, #0]
  uint8_t txtIndex = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t cycleRight = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  while (1)
  {
	  int16_t temp = lps25hb_get_press();
 80027ce:	f000 fbab 	bl	8002f28 <lps25hb_get_press>
 80027d2:	4603      	mov	r3, r0
 80027d4:	83bb      	strh	r3, [r7, #28]

	  if(disp_time > (saved_time + 500))
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <main+0x120>)
 80027d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027dc:	f513 71fa 	adds.w	r1, r3, #500	; 0x1f4
 80027e0:	f144 0200 	adc.w	r2, r4, #0
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <main+0x124>)
 80027e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027ea:	42a2      	cmp	r2, r4
 80027ec:	bf08      	it	eq
 80027ee:	4299      	cmpeq	r1, r3
 80027f0:	d2ed      	bcs.n	80027ce <main+0x72>
	         {
	             uint8_t toDisplay[4] = "";
 80027f2:	2300      	movs	r3, #0
 80027f4:	603b      	str	r3, [r7, #0]

	             if (txtIndex >= 17){
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d903      	bls.n	8002806 <main+0xaa>
	                 cycleRight = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002804:	e006      	b.n	8002814 <main+0xb8>
	             }
	             else if (txtIndex <= 0){
 8002806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <main+0xb8>
	                 cycleRight = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	             }

	             for (int i = 0; i<4; i++){
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	e010      	b.n	800283c <main+0xe0>
	                 toDisplay[i] = text[i + txtIndex];
 800281a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	4413      	add	r3, r2
 8002822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002826:	4413      	add	r3, r2
 8002828:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800282c:	463a      	mov	r2, r7
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	460a      	mov	r2, r1
 8002834:	701a      	strb	r2, [r3, #0]
	             for (int i = 0; i<4; i++){
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	3301      	adds	r3, #1
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b03      	cmp	r3, #3
 8002840:	ddeb      	ble.n	800281a <main+0xbe>
	             }

	             if (cycleRight){
 8002842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <main+0xfa>
	                 txtIndex++;
 800284a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284e:	3301      	adds	r3, #1
 8002850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002854:	e004      	b.n	8002860 <main+0x104>
	             }
	             else {
	                 txtIndex--;
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	3b01      	subs	r3, #1
 800285c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	             }

	             displayString(toDisplay);
 8002860:	463b      	mov	r3, r7
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f84c 	bl	8001900 <displayString>

	             saved_time = disp_time;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <main+0x124>)
 800286a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800286e:	4a03      	ldr	r2, [pc, #12]	; (800287c <main+0x120>)
 8002870:	e9c2 3400 	strd	r3, r4, [r2]
  {
 8002874:	e7ab      	b.n	80027ce <main+0x72>
 8002876:	bf00      	nop
 8002878:	08003038 	.word	0x08003038
 800287c:	20000058 	.word	0x20000058
 8002880:	20000030 	.word	0x20000030

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff ff19 	bl	80026c0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800288e:	f7ff ff2b 	bl	80026e8 <LL_FLASH_GetLatency>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8002898:	f000 f830 	bl	80028fc <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800289c:	f7ff fe32 	bl	8002504 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80028a0:	bf00      	nop
 80028a2:	f7ff fe3f 	bl	8002524 <LL_RCC_HSI_IsReady>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d1fa      	bne.n	80028a2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80028ac:	2010      	movs	r0, #16
 80028ae:	f7ff fe4b 	bl	8002548 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7ff fe80 	bl	80025b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff fe91 	bl	80025e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7ff fea2 	bl	8002608 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7ff fe55 	bl	8002574 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80028ca:	bf00      	nop
 80028cc:	f7ff fe66 	bl	800259c <LL_RCC_GetSysClkSource>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1fa      	bne.n	80028cc <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80028d6:	4808      	ldr	r0, [pc, #32]	; (80028f8 <SystemClock_Config+0x74>)
 80028d8:	f7fe faec 	bl	8000eb4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80028dc:	2004      	movs	r0, #4
 80028de:	f7ff ff11 	bl	8002704 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <SystemClock_Config+0x74>)
 80028e4:	f7fe fb18 	bl	8000f18 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80028e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80028ec:	f7ff fea0 	bl	8002630 <LL_RCC_SetI2CClockSource>
  LL_SYSTICK_EnableIT();
 80028f0:	f7ff ff24 	bl	800273c <LL_SYSTICK_EnableIT>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	007a1200 	.word	0x007a1200

080028fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <HardFault_Handler+0x4>

0800291e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <MemManage_Handler+0x4>

08002924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <BusFault_Handler+0x4>

0800292a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <UsageFault_Handler+0x4>

08002930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b490      	push	{r4, r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <SysTick_Handler+0x20>)
 8002962:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002966:	1c4b      	adds	r3, r1, #1
 8002968:	f142 0400 	adc.w	r4, r2, #0
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <SysTick_Handler+0x20>)
 800296e:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000030 	.word	0x20000030

08002980 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <SystemInit+0x84>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <SystemInit+0x84>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <SystemInit+0x88>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <SystemInit+0x88>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <SystemInit+0x88>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4918      	ldr	r1, [pc, #96]	; (8002a08 <SystemInit+0x88>)
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <SystemInit+0x8c>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <SystemInit+0x88>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <SystemInit+0x88>)
 80029b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <SystemInit+0x88>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <SystemInit+0x88>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <SystemInit+0x88>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <SystemInit+0x88>)
 80029ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029d2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <SystemInit+0x88>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <SystemInit+0x88>)
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <SystemInit+0x88>)
 80029e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e4:	4908      	ldr	r1, [pc, #32]	; (8002a08 <SystemInit+0x88>)
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <SystemInit+0x90>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <SystemInit+0x88>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SystemInit+0x84>)
 80029f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029f8:	609a      	str	r2, [r3, #8]
#endif
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	f87fc00c 	.word	0xf87fc00c
 8002a10:	ff00fccc 	.word	0xff00fccc

08002a14 <NVIC_GetPriorityGrouping>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EnableIRQ>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4907      	ldr	r1, [pc, #28]	; (8002a60 <NVIC_EnableIRQ+0x30>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <NVIC_SetPriority>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da0b      	bge.n	8002a90 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <NVIC_SetPriority+0x4c>)
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	3b04      	subs	r3, #4
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	761a      	strb	r2, [r3, #24]
}
 8002a8e:	e009      	b.n	8002aa4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <NVIC_SetPriority+0x50>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <NVIC_EncodePriority>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <LL_APB1_GRP1_EnableClock>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40021000 	.word	0x40021000

08002b50 <LL_TIM_EnableCounter>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_TIM_EnableARRPreload>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_TIM_OC_DisableFast>:
{
 8002b90:	b4b0      	push	{r4, r5, r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d028      	beq.n	8002bf2 <LL_TIM_OC_DisableFast+0x62>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d023      	beq.n	8002bee <LL_TIM_OC_DisableFast+0x5e>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d01e      	beq.n	8002bea <LL_TIM_OC_DisableFast+0x5a>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d019      	beq.n	8002be6 <LL_TIM_OC_DisableFast+0x56>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d013      	beq.n	8002be2 <LL_TIM_OC_DisableFast+0x52>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d00d      	beq.n	8002bde <LL_TIM_OC_DisableFast+0x4e>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d007      	beq.n	8002bda <LL_TIM_OC_DisableFast+0x4a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d101      	bne.n	8002bd6 <LL_TIM_OC_DisableFast+0x46>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e00e      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00c      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e00a      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_TIM_OC_DisableFast+0x64>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3318      	adds	r3, #24
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <LL_TIM_OC_DisableFast+0x94>)
 8002c00:	5c5b      	ldrb	r3, [r3, r1]
 8002c02:	4413      	add	r3, r2
 8002c04:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <LL_TIM_OC_DisableFast+0x98>)
 8002c0c:	5c5b      	ldrb	r3, [r3, r1]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2304      	movs	r3, #4
 8002c12:	408b      	lsls	r3, r1
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4013      	ands	r3, r2
 8002c18:	6023      	str	r3, [r4, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bcb0      	pop	{r4, r5, r7}
 8002c22:	4770      	bx	lr
 8002c24:	08003050 	.word	0x08003050
 8002c28:	0800305c 	.word	0x0800305c

08002c2c <LL_TIM_SetClockSource>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_TIM_SetTriggerOutput>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	605a      	str	r2, [r3, #4]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_TIM_DisableMasterSlaveMode>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_TIM_EnableIT_UPDATE>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	; 0x38
 8002cc0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f999 	bl	8003010 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f7ff ff1e 	bl	8002b20 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8002ce4:	f7ff fe96 	bl	8002a14 <NVIC_GetPriorityGrouping>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2202      	movs	r2, #2
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fee2 	bl	8002ab8 <NVIC_EncodePriority>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	201d      	movs	r0, #29
 8002cfa:	f7ff feb3 	bl	8002a64 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002cfe:	201d      	movs	r0, #29
 8002d00:	f7ff fe96 	bl	8002a30 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8002d04:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002d08:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8002d0e:	2313      	movs	r3, #19
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4817      	ldr	r0, [pc, #92]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d1e:	f7fd fd35 	bl	800078c <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8002d22:	4816      	ldr	r0, [pc, #88]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d24:	f7ff ff24 	bl	8002b70 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4814      	ldr	r0, [pc, #80]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d2c:	f7ff ff7e 	bl	8002c2c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002d30:	2310      	movs	r3, #16
 8002d32:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	461a      	mov	r2, r3
 8002d48:	2101      	movs	r1, #1
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d4c:	f7fd fd92 	bl	8000874 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002d50:	2101      	movs	r1, #1
 8002d52:	480a      	ldr	r0, [pc, #40]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d54:	f7ff ff1c 	bl	8002b90 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d5c:	f7ff ff7b 	bl	8002c56 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002d60:	4806      	ldr	r0, [pc, #24]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d62:	f7ff ff8b 	bl	8002c7c <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d68:	f7ff ff98 	bl	8002c9c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <MX_TIM3_Init+0xc0>)
 8002d6e:	f7ff feef 	bl	8002b50 <LL_TIM_EnableCounter>

}
 8002d72:	bf00      	nop
 8002d74:	3738      	adds	r7, #56	; 0x38
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40000400 	.word	0x40000400

08002d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d86:	e003      	b.n	8002d90 <LoopCopyDataInit>

08002d88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d8e:	3104      	adds	r1, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d90:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d98:	d3f6      	bcc.n	8002d88 <CopyDataInit>
	ldr	r2, =_sbss
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d9c:	e002      	b.n	8002da4 <LoopFillZerobss>

08002d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002da0:	f842 3b04 	str.w	r3, [r2], #4

08002da4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <LoopForever+0x16>)
	cmp	r2, r3
 8002da6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002da8:	d3f9      	bcc.n	8002d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002daa:	f7ff fde9 	bl	8002980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dae:	f000 f90b 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002db2:	f7ff fcd3 	bl	800275c <main>

08002db6 <LoopForever>:

LoopForever:
    b LoopForever
 8002db6:	e7fe      	b.n	8002db6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002db8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002dbc:	08003070 	.word	0x08003070
	ldr	r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002dc4:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8002dc8:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002dcc:	2000006c 	.word	0x2000006c

08002dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC1_2_IRQHandler>
	...

08002dd4 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t adress_acc = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, adress_acc, 0));
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <lsm6ds0_read_byte+0x30>)
 8002de4:	7819      	ldrb	r1, [r3, #0]
 8002de6:	79fa      	ldrb	r2, [r7, #7]
 8002de8:	f107 000f 	add.w	r0, r7, #15
 8002dec:	2300      	movs	r3, #0
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	460b      	mov	r3, r1
 8002df2:	2101      	movs	r1, #1
 8002df4:	f7ff fab6 	bl	8002364 <i2c_master_read>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000004 	.word	0x20000004

08002e08 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	71fb      	strb	r3, [r7, #7]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, adress_acc, 0);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <lsm6ds0_write_byte+0x28>)
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	79f9      	ldrb	r1, [r7, #7]
 8002e1e:	79b8      	ldrb	r0, [r7, #6]
 8002e20:	2300      	movs	r3, #0
 8002e22:	f7ff fa5b 	bl	80022dc <i2c_master_write>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000004 	.word	0x20000004

08002e34 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002e3e:	2064      	movs	r0, #100	; 0x64
 8002e40:	f7fe f846 	bl	8000ed0 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002e44:	200f      	movs	r0, #15
 8002e46:	f7ff ffc5 	bl	8002dd4 <lsm6ds0_read_byte>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002e4e:	79bb      	ldrb	r3, [r7, #6]
 8002e50:	2b68      	cmp	r3, #104	; 0x68
 8002e52:	d102      	bne.n	8002e5a <lsm6ds0_init+0x26>
	{
		status = 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	71fb      	strb	r3, [r7, #7]
 8002e58:	e00f      	b.n	8002e7a <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		adress_acc = LSM6DS0_DEVICE_ADDRESS_1;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <lsm6ds0_init+0x60>)
 8002e5c:	22d6      	movs	r2, #214	; 0xd6
 8002e5e:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002e60:	200f      	movs	r0, #15
 8002e62:	f7ff ffb7 	bl	8002dd4 <lsm6ds0_read_byte>
 8002e66:	4603      	mov	r3, r0
 8002e68:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	2b68      	cmp	r3, #104	; 0x68
 8002e6e:	d102      	bne.n	8002e76 <lsm6ds0_init+0x42>
		{
			status = 1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	e001      	b.n	8002e7a <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002e7e:	797b      	ldrb	r3, [r7, #5]
 8002e80:	4619      	mov	r1, r3
 8002e82:	2010      	movs	r0, #16
 8002e84:	f7ff ffc0 	bl	8002e08 <lsm6ds0_write_byte>

	return status;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000004 	.word	0x20000004

08002e98 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_press = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_press, 0));
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <lps25hb_read_byte+0x30>)
 8002ea8:	7819      	ldrb	r1, [r3, #0]
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	f107 000f 	add.w	r0, r7, #15
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	f7ff fa54 	bl	8002364 <i2c_master_read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000005 	.word	0x20000005

08002ecc <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460a      	mov	r2, r1
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_press, 0);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <lps25hb_write_byte+0x28>)
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	79f9      	ldrb	r1, [r7, #7]
 8002ee2:	79b8      	ldrb	r0, [r7, #6]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f7ff f9f9 	bl	80022dc <i2c_master_write>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000005 	.word	0x20000005

08002ef8 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
 8002f04:	4613      	mov	r3, r2
 8002f06:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_press, 1);
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <lps25hb_readArray+0x2c>)
 8002f0a:	7818      	ldrb	r0, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	78b9      	ldrb	r1, [r7, #2]
 8002f10:	2301      	movs	r3, #1
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4603      	mov	r3, r0
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fa24 	bl	8002364 <i2c_master_read>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000005 	.word	0x20000005

08002f28 <lps25hb_get_press>:
	lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP_L, 2);
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

int16_t lps25hb_get_press()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t data[3];

	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS_XL, 3);
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2203      	movs	r2, #3
 8002f32:	2128      	movs	r1, #40	; 0x28
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ffdf 	bl	8002ef8 <lps25hb_readArray>

	uint32_t press = ((data[2] << 16) | (data[1] << 8) | data[0])/4096;
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	787b      	ldrb	r3, [r7, #1]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	4313      	orrs	r3, r2
 8002f44:	783a      	ldrb	r2, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da01      	bge.n	8002f50 <lps25hb_get_press+0x28>
 8002f4c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002f50:	131b      	asrs	r3, r3, #12
 8002f52:	607b      	str	r3, [r7, #4]

//	return ((int32_t)((data[2] << 16) | (data[1] << 8) | data[0]))/4096;

	return ((int16_t)(press));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	b21b      	sxth	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002f6a:	2064      	movs	r0, #100	; 0x64
 8002f6c:	f7fd ffb0 	bl	8000ed0 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8002f70:	200f      	movs	r0, #15
 8002f72:	f7ff ff91 	bl	8002e98 <lps25hb_read_byte>
 8002f76:	4603      	mov	r3, r0
 8002f78:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	2bbd      	cmp	r3, #189	; 0xbd
 8002f7e:	d102      	bne.n	8002f86 <lps25hb_init+0x26>
	{
		status = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	e011      	b.n	8002faa <lps25hb_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		address_press = LPS25HB_DEVICE_ADDRESS_1;
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <lps25hb_init+0x64>)
 8002f88:	22ba      	movs	r2, #186	; 0xba
 8002f8a:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8002f8c:	200f      	movs	r0, #15
 8002f8e:	f7ff ff83 	bl	8002e98 <lps25hb_read_byte>
 8002f92:	4603      	mov	r3, r0
 8002f94:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8002f96:	79bb      	ldrb	r3, [r7, #6]
 8002f98:	2bbd      	cmp	r3, #189	; 0xbd
 8002f9a:	d102      	bne.n	8002fa2 <lps25hb_init+0x42>
		{
			status = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	e003      	b.n	8002faa <lps25hb_init+0x4a>
		}
		else
		{
			status = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	71fb      	strb	r3, [r7, #7]
			return status;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	e007      	b.n	8002fba <lps25hb_init+0x5a>
		}
	}

	//acc device init

	uint8_t ctrl1 = 9 << 4;
 8002faa:	2390      	movs	r3, #144	; 0x90
 8002fac:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8002fae:	797b      	ldrb	r3, [r7, #5]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2020      	movs	r0, #32
 8002fb4:	f7ff ff8a 	bl	8002ecc <lps25hb_write_byte>

	return status;
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000005 	.word	0x20000005

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	4e0d      	ldr	r6, [pc, #52]	; (8003000 <__libc_init_array+0x38>)
 8002fcc:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fce:	1ba4      	subs	r4, r4, r6
 8002fd0:	10a4      	asrs	r4, r4, #2
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	4e0b      	ldr	r6, [pc, #44]	; (8003008 <__libc_init_array+0x40>)
 8002fda:	4c0c      	ldr	r4, [pc, #48]	; (800300c <__libc_init_array+0x44>)
 8002fdc:	f000 f820 	bl	8003020 <_init>
 8002fe0:	1ba4      	subs	r4, r4, r6
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	42a5      	cmp	r5, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff0:	4798      	blx	r3
 8002ff2:	3501      	adds	r5, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffa:	4798      	blx	r3
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003068 	.word	0x08003068
 8003004:	08003068 	.word	0x08003068
 8003008:	08003068 	.word	0x08003068
 800300c:	0800306c 	.word	0x0800306c

08003010 <memset>:
 8003010:	4402      	add	r2, r0
 8003012:	4603      	mov	r3, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
