
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080077b8  080077b8  000177b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007aa0  08007aa0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aa0  08007aa0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001e0  08007c84  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08007c84  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b2e  00000000  00000000  00028df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002a928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004dd9  00000000  00000000  0002bb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d93  00000000  00000000  00030949  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000793af  00000000  00000000  000376dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0a8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  000b0b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800779c 	.word	0x0800779c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800779c 	.word	0x0800779c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c76:	6a1a      	ldr	r2, [r3, #32]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	620b      	str	r3, [r1, #32]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400

08000de8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010400 	.word	0x40010400

08000e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400

08000e80 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80c2 	beq.w	8001042 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d05b      	beq.n	8000f7e <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d00e      	beq.n	8000eec <LL_EXTI_Init+0x44>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d017      	beq.n	8000f02 <LL_EXTI_Init+0x5a>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d120      	bne.n	8000f18 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff24 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff feaf 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          break;
 8000eea:	e018      	b.n	8000f1e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fecd 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fef0 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f00:	e00d      	b.n	8000f1e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe9e 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fee5 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f16:	e002      	b.n	8000f1e <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8000f1c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7a9b      	ldrb	r3, [r3, #10]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02b      	beq.n	8000f7e <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a9b      	ldrb	r3, [r3, #10]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d00e      	beq.n	8000f4c <LL_EXTI_Init+0xa4>
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <LL_EXTI_Init+0xba>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d120      	bne.n	8000f78 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff8c 	bl	8000e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff17 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f4a:	e019      	b.n	8000f80 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff35 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff58 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f60:	e00e      	b.n	8000f80 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff06 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff4d 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f76:	e003      	b.n	8000f80 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
            break;
 8000f7c:	e000      	b.n	8000f80 <LL_EXTI_Init+0xd8>
        }
      }
 8000f7e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d071      	beq.n	800106c <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7a5b      	ldrb	r3, [r3, #9]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d00e      	beq.n	8000fae <LL_EXTI_Init+0x106>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d017      	beq.n	8000fc4 <LL_EXTI_Init+0x11c>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fed7 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe60 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          break;
 8000fac:	e018      	b.n	8000fe0 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fe80 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fea1 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fc2:	e00d      	b.n	8000fe0 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe4f 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe96 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fd8:	e002      	b.n	8000fe0 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8000fde:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7a9b      	ldrb	r3, [r3, #10]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d041      	beq.n	800106c <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d00e      	beq.n	800100e <LL_EXTI_Init+0x166>
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <LL_EXTI_Init+0x17c>
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d120      	bne.n	800103a <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff3f 	bl	8000e80 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fec8 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800100c:	e02f      	b.n	800106e <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fee8 	bl	8000de8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff09 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001022:	e024      	b.n	800106e <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff feb7 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fefe 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001038:	e019      	b.n	800106e <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
            break;
 800103e:	bf00      	nop
 8001040:	e015      	b.n	800106e <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe22 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe69 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fe2c 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fe73 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
 800106a:	e000      	b.n	800106e <LL_EXTI_Init+0x1c6>
      }
 800106c:	bf00      	nop
#endif
  }
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2103      	movs	r1, #3
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	401a      	ands	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	fb01 f303 	mul.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	605a      	str	r2, [r3, #4]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001102:	b480      	push	{r7}
 8001104:	b089      	sub	sp, #36	; 0x24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	613b      	str	r3, [r7, #16]
  return(result);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2103      	movs	r1, #3
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	401a      	ands	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	61bb      	str	r3, [r7, #24]
  return(result);
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	613b      	str	r3, [r7, #16]
  return(result);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2103      	movs	r1, #3
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	401a      	ands	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	61bb      	str	r3, [r7, #24]
  return(result);
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	431a      	orrs	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	60da      	str	r2, [r3, #12]
}
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b089      	sub	sp, #36	; 0x24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a1a      	ldr	r2, [r3, #32]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	613b      	str	r3, [r7, #16]
  return(result);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	210f      	movs	r1, #15
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	431a      	orrs	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001204:	bf00      	nop
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	613b      	str	r3, [r7, #16]
  return(result);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	210f      	movs	r1, #15
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	61bb      	str	r3, [r7, #24]
  return(result);
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	431a      	orrs	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b088      	sub	sp, #32
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
  return(result);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001296:	e048      	b.n	800132a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d03a      	beq.n	8001324 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	461a      	mov	r2, r3
 80012b4:	69b9      	ldr	r1, [r7, #24]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fede 	bl	8001078 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d003      	beq.n	80012cc <LL_GPIO_Init+0x5e>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d106      	bne.n	80012da <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	461a      	mov	r2, r3
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff14 	bl	8001102 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	461a      	mov	r2, r3
 80012e0:	69b9      	ldr	r1, [r7, #24]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff3a 	bl	800115c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d119      	bne.n	8001324 <LL_GPIO_Init+0xb6>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80012fc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	2b07      	cmp	r3, #7
 8001304:	d807      	bhi.n	8001316 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	461a      	mov	r2, r3
 800130c:	69b9      	ldr	r1, [r7, #24]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff51 	bl	80011b6 <LL_GPIO_SetAFPin_0_7>
 8001314:	e006      	b.n	8001324 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	461a      	mov	r2, r3
 800131c:	69b9      	ldr	r1, [r7, #24]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff76 	bl	8001210 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1af      	bne.n	8001298 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d003      	beq.n	8001348 <LL_GPIO_Init+0xda>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d107      	bne.n	8001358 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	461a      	mov	r2, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff febd 	bl	80010d2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0201 	bic.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0219      	lsls	r1, r3, #8
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	430b      	orrs	r3, r1
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013e4:	f023 0307 	bic.w	r3, r3, #7
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff65 	bl	8001382 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	461a      	mov	r2, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff6d 	bl	80013a2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffb6 	bl	8001440 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff44 	bl	8001362 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa0 	bl	8001420 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6919      	ldr	r1, [r3, #16]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff70 	bl	80013d0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff81 	bl	8001400 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ffa9 	bl	800145c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffb6 	bl	8001482 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <LL_TIM_Init+0xd4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <LL_TIM_Init+0x2c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165e:	d003      	beq.n	8001668 <LL_TIM_Init+0x2c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <LL_TIM_Init+0xd8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <LL_TIM_Init+0xd4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <LL_TIM_Init+0x6a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001684:	d00f      	beq.n	80016a6 <LL_TIM_Init+0x6a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <LL_TIM_Init+0xd8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00b      	beq.n	80016a6 <LL_TIM_Init+0x6a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <LL_TIM_Init+0xdc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <LL_TIM_Init+0x6a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <LL_TIM_Init+0xe0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d003      	beq.n	80016a6 <LL_TIM_Init+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <LL_TIM_Init+0xe4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d106      	bne.n	80016b4 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff3b 	bl	800153c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff27 	bl	8001520 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LL_TIM_Init+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00b      	beq.n	80016f2 <LL_TIM_Init+0xb6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <LL_TIM_Init+0xdc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <LL_TIM_Init+0xb6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LL_TIM_Init+0xe0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d003      	beq.n	80016f2 <LL_TIM_Init+0xb6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <LL_TIM_Init+0xe4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d105      	bne.n	80016fe <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7c1b      	ldrb	r3, [r3, #16]
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff2d 	bl	8001558 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ff8c 	bl	800161c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012c00 	.word	0x40012c00
 8001714:	40000400 	.word	0x40000400
 8001718:	40014000 	.word	0x40014000
 800171c:	40014400 	.word	0x40014400
 8001720:	40014800 	.word	0x40014800

08001724 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800173a:	d01f      	beq.n	800177c <LL_TIM_OC_Init+0x58>
 800173c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001740:	d804      	bhi.n	800174c <LL_TIM_OC_Init+0x28>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d00c      	beq.n	8001760 <LL_TIM_OC_Init+0x3c>
 8001746:	2b10      	cmp	r3, #16
 8001748:	d011      	beq.n	800176e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800174a:	e033      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d022      	beq.n	8001798 <LL_TIM_OC_Init+0x74>
 8001752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001756:	d026      	beq.n	80017a6 <LL_TIM_OC_Init+0x82>
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175c:	d015      	beq.n	800178a <LL_TIM_OC_Init+0x66>
      break;
 800175e:	e029      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f82c 	bl	80017c0 <OC1Config>
 8001768:	4603      	mov	r3, r0
 800176a:	75fb      	strb	r3, [r7, #23]
      break;
 800176c:	e022      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f8a5 	bl	80018c0 <OC2Config>
 8001776:	4603      	mov	r3, r0
 8001778:	75fb      	strb	r3, [r7, #23]
      break;
 800177a:	e01b      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f922 	bl	80019c8 <OC3Config>
 8001784:	4603      	mov	r3, r0
 8001786:	75fb      	strb	r3, [r7, #23]
      break;
 8001788:	e014      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f99f 	bl	8001ad0 <OC4Config>
 8001792:	4603      	mov	r3, r0
 8001794:	75fb      	strb	r3, [r7, #23]
      break;
 8001796:	e00d      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fa04 	bl	8001ba8 <OC5Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
      break;
 80017a4:	e006      	b.n	80017b4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fa5f 	bl	8001c6c <OC6Config>
 80017ae:	4603      	mov	r3, r0
 80017b0:	75fb      	strb	r3, [r7, #23]
      break;
 80017b2:	bf00      	nop
  }

  return result;
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f023 0201 	bic.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f023 0202 	bic.w	r2, r3, #2
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0201 	bic.w	r2, r3, #1
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <OC1Config+0xf0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00b      	beq.n	800184a <OC1Config+0x8a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <OC1Config+0xf4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <OC1Config+0x8a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <OC1Config+0xf8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d003      	beq.n	800184a <OC1Config+0x8a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <OC1Config+0xfc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11e      	bne.n	8001888 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f023 0208 	bic.w	r2, r3, #8
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f023 0204 	bic.w	r2, r3, #4
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fe6a 	bl	8001574 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40014000 	.word	0x40014000
 80018b8:	40014400 	.word	0x40014400
 80018bc:	40014800 	.word	0x40014800

080018c0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f023 0210 	bic.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f023 0220 	bic.w	r2, r3, #32
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f023 0210 	bic.w	r2, r3, #16
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <OC2Config+0xf8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00b      	beq.n	8001950 <OC2Config+0x90>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a20      	ldr	r2, [pc, #128]	; (80019bc <OC2Config+0xfc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <OC2Config+0x90>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <OC2Config+0x100>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d003      	beq.n	8001950 <OC2Config+0x90>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <OC2Config+0x104>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d11f      	bne.n	8001990 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	019b      	lsls	r3, r3, #6
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	019b      	lsls	r3, r3, #6
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fdf4 	bl	8001590 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40014000 	.word	0x40014000
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800

080019c8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <OC3Config+0xf8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00b      	beq.n	8001a56 <OC3Config+0x8e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <OC3Config+0xfc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <OC3Config+0x8e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <OC3Config+0x100>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <OC3Config+0x8e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <OC3Config+0x104>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d11f      	bne.n	8001a96 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fd7f 	bl	80015ac <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40014000 	.word	0x40014000
 8001ac8:	40014400 	.word	0x40014400
 8001acc:	40014800 	.word	0x40014800

08001ad0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	0212      	lsls	r2, r2, #8
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	031b      	lsls	r3, r3, #12
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	031b      	lsls	r3, r3, #12
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <OC4Config+0xc8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00b      	beq.n	8001b60 <OC4Config+0x90>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <OC4Config+0xcc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <OC4Config+0x90>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <OC4Config+0xd0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <OC4Config+0x90>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <OC4Config+0xd4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d107      	bne.n	8001b70 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	019b      	lsls	r3, r3, #6
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fd20 	bl	80015c8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40014000 	.word	0x40014000
 8001ba0:	40014400 	.word	0x40014400
 8001ba4:	40014800 	.word	0x40014800

08001ba8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <OC5Config+0xb4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00b      	beq.n	8001c24 <OC5Config+0x7c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <OC5Config+0xb8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <OC5Config+0x7c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <OC5Config+0xbc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <OC5Config+0x7c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <OC5Config+0xc0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d109      	bne.n	8001c38 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fccd 	bl	80015e4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40014000 	.word	0x40014000
 8001c64:	40014400 	.word	0x40014400
 8001c68:	40014800 	.word	0x40014800

08001c6c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	0212      	lsls	r2, r2, #8
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	051b      	lsls	r3, r3, #20
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	051b      	lsls	r3, r3, #20
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <OC6Config+0xb4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00b      	beq.n	8001cea <OC6Config+0x7e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <OC6Config+0xb8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <OC6Config+0x7e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <OC6Config+0xbc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d003      	beq.n	8001cea <OC6Config+0x7e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <OC6Config+0xc0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d109      	bne.n	8001cfe <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc78 	bl	8001600 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40014400 	.word	0x40014400
 8001d2c:	40014800 	.word	0x40014800

08001d30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <LL_InitTick+0x30>)
 8001d44:	3b01      	subs	r3, #1
 8001d46:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <LL_InitTick+0x30>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <LL_InitTick+0x30>)
 8001d50:	2205      	movs	r2, #5
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffdd 	bl	8001d30 <LL_InitTick>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <LL_mDelay+0x44>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001d8e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d96:	d00c      	beq.n	8001db2 <LL_mDelay+0x32>
  {
    Delay++;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001d9e:	e008      	b.n	8001db2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <LL_mDelay+0x44>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <LL_mDelay+0x32>
    {
      Delay--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f3      	bne.n	8001da0 <LL_mDelay+0x20>
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <LL_SetSystemCoreClock+0x1c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	619a      	str	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f06f 0201 	mvn.w	r2, #1
 8001e2e:	611a      	str	r2, [r3, #16]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f7ff ffba 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f7ff ffb4 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001e80:	2102      	movs	r1, #2
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <resetSegments+0x58>)
 8001e84:	f7ff ffb0 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001e88:	2120      	movs	r1, #32
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <resetSegments+0x58>)
 8001e8c:	f7ff ffac 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001e90:	2110      	movs	r1, #16
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <resetSegments+0x58>)
 8001e94:	f7ff ffa8 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f7ff ffa3 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f7ff ff9e 	bl	8001de8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001eac:	2108      	movs	r1, #8
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb2:	f7ff ff99 	bl	8001de8 <LL_GPIO_SetOutputPin>
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f7ff ff9a 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f7ff ff94 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001edc:	2102      	movs	r1, #2
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <setSegments+0x58>)
 8001ee0:	f7ff ff90 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <setSegments+0x58>)
 8001ee8:	f7ff ff8c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001eec:	2110      	movs	r1, #16
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <setSegments+0x58>)
 8001ef0:	f7ff ff88 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efa:	f7ff ff83 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001efe:	2102      	movs	r1, #2
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f7ff ff7e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f08:	2108      	movs	r1, #8
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f7ff ff79 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	48000400 	.word	0x48000400

08001f1c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001f20:	2104      	movs	r1, #4
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f7ff ff6d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <resetDigits+0x3c>)
 8001f2e:	f7ff ff69 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001f32:	2110      	movs	r1, #16
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f7ff ff64 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f7ff ff5e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f7ff ff59 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	48000400 	.word	0x48000400

08001f5c <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001f60:	2101      	movs	r1, #1
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <setDigits+0x3c>)
 8001f64:	f7ff ff40 	bl	8001de8 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001f68:	2110      	movs	r1, #16
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f7ff ff3b 	bl	8001de8 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff ff35 	bl	8001de8 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001f7e:	2104      	movs	r1, #4
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f7ff ff30 	bl	8001de8 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f7ff ff2b 	bl	8001de8 <LL_GPIO_SetOutputPin>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	48000400 	.word	0x48000400

08001f9c <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4802      	ldr	r0, [pc, #8]	; (8001fac <setDecimalPoint+0x10>)
 8001fa4:	f7ff ff2e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	48000400 	.word	0x48000400

08001fb0 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f7ff ff23 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f7ff ff1d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <setTwo>:

void setTwo(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f7ff ff13 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fde:	2102      	movs	r1, #2
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe4:	f7ff ff0e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001fe8:	2110      	movs	r1, #16
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <setTwo+0x38>)
 8001fec:	f7ff ff0a 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f7ff ff04 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <setTwo+0x38>)
 8002000:	f7ff ff00 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	48000400 	.word	0x48000400

0800200c <setThree>:

void setThree(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002010:	2101      	movs	r1, #1
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f7ff fef5 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800201a:	2102      	movs	r1, #2
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f7ff fef0 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002024:	2110      	movs	r1, #16
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <setThree+0x38>)
 8002028:	f7ff feec 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800202c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7ff fee6 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002038:	2120      	movs	r1, #32
 800203a:	4802      	ldr	r0, [pc, #8]	; (8002044 <setThree+0x38>)
 800203c:	f7ff fee2 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	48000400 	.word	0x48000400

08002048 <setFour>:

void setFour(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800204c:	2108      	movs	r1, #8
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f7ff fed7 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002056:	2101      	movs	r1, #1
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f7ff fed2 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002060:	2110      	movs	r1, #16
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <setFour+0x30>)
 8002064:	f7ff fece 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f7ff fec8 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	48000400 	.word	0x48000400

0800207c <setFive>:

void setFive(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002080:	2108      	movs	r1, #8
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f7ff febd 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800208a:	2120      	movs	r1, #32
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <setFive+0x38>)
 800208e:	f7ff feb9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002092:	2110      	movs	r1, #16
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <setFive+0x38>)
 8002096:	f7ff feb5 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800209a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a2:	f7ff feaf 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020a6:	2102      	movs	r1, #2
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f7ff feaa 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	48000400 	.word	0x48000400

080020b8 <setSix>:

void setSix(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020bc:	2108      	movs	r1, #8
 80020be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c2:	f7ff fe9f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020c6:	2120      	movs	r1, #32
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <setSix+0x44>)
 80020ca:	f7ff fe9b 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020ce:	2110      	movs	r1, #16
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <setSix+0x44>)
 80020d2:	f7ff fe97 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f7ff fe91 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020e2:	2102      	movs	r1, #2
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f7ff fe8c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80020ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f7ff fe86 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	48000400 	.word	0x48000400

08002100 <setSeven>:

void setSeven(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002104:	2101      	movs	r1, #1
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f7ff fe7b 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800210e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f7ff fe75 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800211a:	2102      	movs	r1, #2
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fe70 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <setEight>:

void setEight(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800212c:	2108      	movs	r1, #8
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002132:	f7ff fe67 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002136:	2120      	movs	r1, #32
 8002138:	480f      	ldr	r0, [pc, #60]	; (8002178 <setEight+0x50>)
 800213a:	f7ff fe63 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800213e:	2110      	movs	r1, #16
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <setEight+0x50>)
 8002142:	f7ff fe5f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214e:	f7ff fe59 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002152:	2102      	movs	r1, #2
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f7ff fe54 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800215c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002164:	f7ff fe4e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002168:	2101      	movs	r1, #1
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f7ff fe49 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	48000400 	.word	0x48000400

0800217c <setNine>:

void setNine(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002180:	2101      	movs	r1, #1
 8002182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002186:	f7ff fe3d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800218a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002192:	f7ff fe37 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002196:	2102      	movs	r1, #2
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	f7ff fe32 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021a0:	2110      	movs	r1, #16
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <setNine+0x3c>)
 80021a4:	f7ff fe2e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021a8:	2108      	movs	r1, #8
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f7ff fe29 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	48000400 	.word	0x48000400

080021bc <setZero>:

void setZero(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021c0:	2108      	movs	r1, #8
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f7ff fe1d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021ca:	2120      	movs	r1, #32
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <setZero+0x48>)
 80021ce:	f7ff fe19 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021da:	f7ff fe13 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021de:	2102      	movs	r1, #2
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f7ff fe0e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f0:	f7ff fe08 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021f4:	2101      	movs	r1, #1
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f7ff fe03 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	48000400 	.word	0x48000400

08002208 <setA>:

void setA(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800220c:	2108      	movs	r1, #8
 800220e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002212:	f7ff fdf7 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f7ff fdf1 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002222:	2102      	movs	r1, #2
 8002224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002228:	f7ff fdec 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800222c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002234:	f7ff fde6 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002238:	2101      	movs	r1, #1
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f7ff fde1 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002242:	2110      	movs	r1, #16
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <setA+0x48>)
 8002246:	f7ff fddd 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	48000400 	.word	0x48000400

08002254 <setB>:

void setB(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f7ff fdd0 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002264:	2120      	movs	r1, #32
 8002266:	480a      	ldr	r0, [pc, #40]	; (8002290 <setB+0x3c>)
 8002268:	f7ff fdcc 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800226c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f7ff fdc6 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002278:	2108      	movs	r1, #8
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f7ff fdc1 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002282:	2110      	movs	r1, #16
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <setB+0x3c>)
 8002286:	f7ff fdbd 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	48000400 	.word	0x48000400

08002294 <setC>:

void setC(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002298:	2102      	movs	r1, #2
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f7ff fdb1 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022a2:	2120      	movs	r1, #32
 80022a4:	4807      	ldr	r0, [pc, #28]	; (80022c4 <setC+0x30>)
 80022a6:	f7ff fdad 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f7ff fda7 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022b6:	2108      	movs	r1, #8
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f7ff fda2 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	48000400 	.word	0x48000400

080022c8 <setD>:

void setD(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80022cc:	2101      	movs	r1, #1
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f7ff fd97 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022de:	f7ff fd91 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022e2:	2120      	movs	r1, #32
 80022e4:	4807      	ldr	r0, [pc, #28]	; (8002304 <setD+0x3c>)
 80022e6:	f7ff fd8d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f2:	f7ff fd87 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022f6:	2110      	movs	r1, #16
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <setD+0x3c>)
 80022fa:	f7ff fd83 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	48000400 	.word	0x48000400

08002308 <setE>:

void setE(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800230c:	2102      	movs	r1, #2
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f7ff fd77 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002316:	2120      	movs	r1, #32
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <setE+0x38>)
 800231a:	f7ff fd73 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800231e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f7ff fd6d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800232a:	2108      	movs	r1, #8
 800232c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002330:	f7ff fd68 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002334:	2110      	movs	r1, #16
 8002336:	4802      	ldr	r0, [pc, #8]	; (8002340 <setE+0x38>)
 8002338:	f7ff fd64 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	48000400 	.word	0x48000400

08002344 <setF>:

void setF(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002348:	2102      	movs	r1, #2
 800234a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234e:	f7ff fd59 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235a:	f7ff fd53 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800235e:	2108      	movs	r1, #8
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f7ff fd4e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002368:	2110      	movs	r1, #16
 800236a:	4802      	ldr	r0, [pc, #8]	; (8002374 <setF+0x30>)
 800236c:	f7ff fd4a 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	48000400 	.word	0x48000400

08002378 <setG>:

void setG(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800237c:	2102      	movs	r1, #2
 800237e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002382:	f7ff fd3f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238e:	f7ff fd39 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002392:	2120      	movs	r1, #32
 8002394:	4807      	ldr	r0, [pc, #28]	; (80023b4 <setG+0x3c>)
 8002396:	f7ff fd35 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800239a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f7ff fd2f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023a6:	2108      	movs	r1, #8
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ac:	f7ff fd2a 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	48000400 	.word	0x48000400

080023b8 <setH>:

void setH(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023bc:	2101      	movs	r1, #1
 80023be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c2:	f7ff fd1f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f7ff fd19 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f7ff fd13 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023de:	2108      	movs	r1, #8
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e4:	f7ff fd0e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023e8:	2110      	movs	r1, #16
 80023ea:	4802      	ldr	r0, [pc, #8]	; (80023f4 <setH+0x3c>)
 80023ec:	f7ff fd0a 	bl	8001e04 <LL_GPIO_ResetOutputPin>

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	48000400 	.word	0x48000400

080023f8 <setI>:

void setI(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002404:	f7ff fcfe 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002408:	2108      	movs	r1, #8
 800240a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240e:	f7ff fcf9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <setJ>:

void setJ(void){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800241c:	2101      	movs	r1, #1
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002422:	f7ff fcef 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f7ff fce9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002432:	2120      	movs	r1, #32
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <setJ+0x34>)
 8002436:	f7ff fce5 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800243a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f7ff fcdf 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	48000400 	.word	0x48000400

08002450 <setL>:

void setL(void){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002454:	2120      	movs	r1, #32
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <setL+0x28>)
 8002458:	f7ff fcd4 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800245c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f7ff fcce 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002468:	2108      	movs	r1, #8
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f7ff fcc9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	48000400 	.word	0x48000400

0800247c <setN>:

void setN(void){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002488:	f7ff fcbc 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800248c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f7ff fcb6 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002498:	2110      	movs	r1, #16
 800249a:	4802      	ldr	r0, [pc, #8]	; (80024a4 <setN+0x28>)
 800249c:	f7ff fcb2 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	48000400 	.word	0x48000400

080024a8 <setO>:

void setO(void){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80024ac:	2102      	movs	r1, #2
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b2:	f7ff fca7 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80024b6:	2101      	movs	r1, #1
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f7ff fca2 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c8:	f7ff fc9c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024cc:	2120      	movs	r1, #32
 80024ce:	4808      	ldr	r0, [pc, #32]	; (80024f0 <setO+0x48>)
 80024d0:	f7ff fc98 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f7ff fc92 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024e0:	2108      	movs	r1, #8
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f7ff fc8d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	48000400 	.word	0x48000400

080024f4 <setP>:

void setP(void){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80024f8:	2102      	movs	r1, #2
 80024fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fe:	f7ff fc81 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002502:	2101      	movs	r1, #1
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f7ff fc7c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800250c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f7ff fc76 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002518:	2108      	movs	r1, #8
 800251a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251e:	f7ff fc71 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002522:	2110      	movs	r1, #16
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <setP+0x3c>)
 8002526:	f7ff fc6d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	48000400 	.word	0x48000400

08002534 <setQ>:

void setQ(void){
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002538:	2102      	movs	r1, #2
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f7ff fc61 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002542:	2101      	movs	r1, #1
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f7ff fc5c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800254c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002554:	f7ff fc56 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002558:	2108      	movs	r1, #8
 800255a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255e:	f7ff fc51 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002562:	2110      	movs	r1, #16
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <setQ+0x3c>)
 8002566:	f7ff fc4d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	48000400 	.word	0x48000400

08002574 <setR>:

void setR(void){
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f7ff fc40 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002584:	2110      	movs	r1, #16
 8002586:	4802      	ldr	r0, [pc, #8]	; (8002590 <setR+0x1c>)
 8002588:	f7ff fc3c 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	48000400 	.word	0x48000400

08002594 <setS>:

void setS(void){
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002598:	2102      	movs	r1, #2
 800259a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259e:	f7ff fc31 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f7ff fc2b 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025ae:	2120      	movs	r1, #32
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <setS+0x38>)
 80025b2:	f7ff fc27 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025b6:	2108      	movs	r1, #8
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f7ff fc22 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025c0:	2110      	movs	r1, #16
 80025c2:	4802      	ldr	r0, [pc, #8]	; (80025cc <setS+0x38>)
 80025c4:	f7ff fc1e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	48000400 	.word	0x48000400

080025d0 <setT>:

void setT(void){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025d4:	2120      	movs	r1, #32
 80025d6:	480a      	ldr	r0, [pc, #40]	; (8002600 <setT+0x30>)
 80025d8:	f7ff fc14 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e4:	f7ff fc0e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025e8:	2108      	movs	r1, #8
 80025ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ee:	f7ff fc09 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025f2:	2110      	movs	r1, #16
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <setT+0x30>)
 80025f6:	f7ff fc05 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	48000400 	.word	0x48000400

08002604 <setU>:

void setU(void){
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002608:	2101      	movs	r1, #1
 800260a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260e:	f7ff fbf9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261a:	f7ff fbf3 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800261e:	2120      	movs	r1, #32
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <setU+0x3c>)
 8002622:	f7ff fbef 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800262a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262e:	f7ff fbe9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002632:	2108      	movs	r1, #8
 8002634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002638:	f7ff fbe4 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	48000400 	.word	0x48000400

08002644 <setY>:

void setY(void){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002648:	2101      	movs	r1, #1
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264e:	f7ff fbd9 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265a:	f7ff fbd3 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800265e:	2120      	movs	r1, #32
 8002660:	4806      	ldr	r0, [pc, #24]	; (800267c <setY+0x38>)
 8002662:	f7ff fbcf 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002666:	2108      	movs	r1, #8
 8002668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266c:	f7ff fbca 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002670:	2110      	movs	r1, #16
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <setY+0x38>)
 8002674:	f7ff fbc6 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	48000400 	.word	0x48000400

08002680 <setK>:

void setK(void){
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	// B,C,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002684:	2101      	movs	r1, #1
 8002686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268a:	f7ff fbbb 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800268e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f7ff fbb5 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800269a:	2110      	movs	r1, #16
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <setK+0x28>)
 800269e:	f7ff fbb1 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	48000400 	.word	0x48000400

080026ac <setM>:

void setM(void){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	// A,C,E
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80026b0:	2102      	movs	r1, #2
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f7ff fba5 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c2:	f7ff fb9f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80026c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ce:	f7ff fb99 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <setV>:

void setV(void){
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80026dc:	2101      	movs	r1, #1
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e2:	f7ff fb8f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80026e6:	2120      	movs	r1, #32
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <setV+0x24>)
 80026ea:	f7ff fb8b 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80026ee:	2108      	movs	r1, #8
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f4:	f7ff fb86 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	48000400 	.word	0x48000400

08002700 <setW>:

void setW(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002704:	2108      	movs	r1, #8
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7ff fb7b 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800270e:	2120      	movs	r1, #32
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <setW+0x44>)
 8002712:	f7ff fb77 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002716:	2110      	movs	r1, #16
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <setW+0x44>)
 800271a:	f7ff fb73 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800271e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002726:	f7ff fb6d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800272a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f7ff fb67 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002736:	2101      	movs	r1, #1
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f7ff fb62 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	48000400 	.word	0x48000400

08002748 <setX>:

void setX(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	// A,D,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800274c:	2102      	movs	r1, #2
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f7ff fb57 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002756:	2120      	movs	r1, #32
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <setX+0x24>)
 800275a:	f7ff fb53 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800275e:	2110      	movs	r1, #16
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <setX+0x24>)
 8002762:	f7ff fb4f 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	48000400 	.word	0x48000400

08002770 <setZ>:

void setZ(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	// B,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f7ff fb42 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002780:	2101      	movs	r1, #1
 8002782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002786:	f7ff fb3d 	bl	8001e04 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800278a:	2110      	movs	r1, #16
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <setZ+0x28>)
 800278e:	f7ff fb39 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	48000400 	.word	0x48000400

0800279c <set_>:

void set_(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80027a0:	2120      	movs	r1, #32
 80027a2:	4802      	ldr	r0, [pc, #8]	; (80027ac <set_+0x10>)
 80027a4:	f7ff fb2e 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	48000400 	.word	0x48000400

080027b0 <set_minus>:

void set_minus(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	// G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027b4:	2110      	movs	r1, #16
 80027b6:	4802      	ldr	r0, [pc, #8]	; (80027c0 <set_minus+0x10>)
 80027b8:	f7ff fb24 	bl	8001e04 <LL_GPIO_ResetOutputPin>
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	48000400 	.word	0x48000400

080027c4 <displayString>:
	        i++;
	    }
	}
}

void displayString(uint8_t str[4], uint8_t resolution){
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
    dDisplayData.digit_num = 4;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <displayString+0x58>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	711a      	strb	r2, [r3, #4]
    dDisplayData.negative = 0;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <displayString+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	715a      	strb	r2, [r3, #5]
    dDisplayData.resolution = resolution;
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <displayString+0x58>)
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	7193      	strb	r3, [r2, #6]

    int j = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 80027e6:	2303      	movs	r3, #3
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	e00e      	b.n	800280a <displayString+0x46>
        dDisplayData.digit[i] = str[j];
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	7819      	ldrb	r1, [r3, #0]
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <displayString+0x58>)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4413      	add	r3, r2
 80027fa:	460a      	mov	r2, r1
 80027fc:	701a      	strb	r2, [r3, #0]
        j++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3301      	adds	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3b01      	subs	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	daed      	bge.n	80027ec <displayString+0x28>
    }
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	200001fc 	.word	0x200001fc

08002820 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d823      	bhi.n	8002878 <setDigit+0x58>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <setDigit+0x18>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	08002855 	.word	0x08002855
 8002840:	08002863 	.word	0x08002863
 8002844:	0800286f 	.word	0x0800286f
	{
		case 0:
			DIGIT_4_ON;
 8002848:	2104      	movs	r1, #4
 800284a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284e:	f7ff facb 	bl	8001de8 <LL_GPIO_SetOutputPin>
			break;
 8002852:	e011      	b.n	8002878 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8002854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f7ff fac4 	bl	8001de8 <LL_GPIO_SetOutputPin>
			break;
 8002860:	e00a      	b.n	8002878 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 8002862:	2110      	movs	r1, #16
 8002864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002868:	f7ff fabe 	bl	8001de8 <LL_GPIO_SetOutputPin>
			break;
 800286c:	e004      	b.n	8002878 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 800286e:	2101      	movs	r1, #1
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <setDigit+0x60>)
 8002872:	f7ff fab9 	bl	8001de8 <LL_GPIO_SetOutputPin>
			break;
 8002876:	bf00      	nop
	}
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	48000400 	.word	0x48000400

08002884 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	e1d4      	b.n	8002c3a <updateDisplay+0x3b6>
	{
		switch(dDisplayData.digit[i])
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4ad4      	ldr	r2, [pc, #848]	; (8002be4 <updateDisplay+0x360>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	3b2d      	subs	r3, #45	; 0x2d
 8002898:	2b4d      	cmp	r3, #77	; 0x4d
 800289a:	f200 81ac 	bhi.w	8002bf6 <updateDisplay+0x372>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <updateDisplay+0x20>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	08002be9 	.word	0x08002be9
 80028a8:	08002bf7 	.word	0x08002bf7
 80028ac:	08002bf7 	.word	0x08002bf7
 80028b0:	080029dd 	.word	0x080029dd
 80028b4:	080029eb 	.word	0x080029eb
 80028b8:	080029f9 	.word	0x080029f9
 80028bc:	08002a07 	.word	0x08002a07
 80028c0:	08002a15 	.word	0x08002a15
 80028c4:	08002a23 	.word	0x08002a23
 80028c8:	08002a31 	.word	0x08002a31
 80028cc:	08002a3f 	.word	0x08002a3f
 80028d0:	08002a4d 	.word	0x08002a4d
 80028d4:	08002a5b 	.word	0x08002a5b
 80028d8:	08002bf7 	.word	0x08002bf7
 80028dc:	08002bf7 	.word	0x08002bf7
 80028e0:	08002bf7 	.word	0x08002bf7
 80028e4:	08002bf7 	.word	0x08002bf7
 80028e8:	08002bf7 	.word	0x08002bf7
 80028ec:	08002bf7 	.word	0x08002bf7
 80028f0:	08002bf7 	.word	0x08002bf7
 80028f4:	08002bf7 	.word	0x08002bf7
 80028f8:	08002bf7 	.word	0x08002bf7
 80028fc:	08002bf7 	.word	0x08002bf7
 8002900:	08002bf7 	.word	0x08002bf7
 8002904:	08002bf7 	.word	0x08002bf7
 8002908:	08002bf7 	.word	0x08002bf7
 800290c:	08002bf7 	.word	0x08002bf7
 8002910:	08002bf7 	.word	0x08002bf7
 8002914:	08002bf7 	.word	0x08002bf7
 8002918:	08002bf7 	.word	0x08002bf7
 800291c:	08002bf7 	.word	0x08002bf7
 8002920:	08002bf7 	.word	0x08002bf7
 8002924:	08002bf7 	.word	0x08002bf7
 8002928:	08002bf7 	.word	0x08002bf7
 800292c:	08002bf7 	.word	0x08002bf7
 8002930:	08002bf7 	.word	0x08002bf7
 8002934:	08002bf7 	.word	0x08002bf7
 8002938:	08002bf7 	.word	0x08002bf7
 800293c:	08002bf7 	.word	0x08002bf7
 8002940:	08002bf7 	.word	0x08002bf7
 8002944:	08002bf7 	.word	0x08002bf7
 8002948:	08002bf7 	.word	0x08002bf7
 800294c:	08002bf7 	.word	0x08002bf7
 8002950:	08002bf7 	.word	0x08002bf7
 8002954:	08002bf7 	.word	0x08002bf7
 8002958:	08002bf7 	.word	0x08002bf7
 800295c:	08002bf7 	.word	0x08002bf7
 8002960:	08002bf7 	.word	0x08002bf7
 8002964:	08002bf7 	.word	0x08002bf7
 8002968:	08002bf7 	.word	0x08002bf7
 800296c:	08002bd5 	.word	0x08002bd5
 8002970:	08002bf7 	.word	0x08002bf7
 8002974:	08002a69 	.word	0x08002a69
 8002978:	08002a77 	.word	0x08002a77
 800297c:	08002a85 	.word	0x08002a85
 8002980:	08002a93 	.word	0x08002a93
 8002984:	08002aa1 	.word	0x08002aa1
 8002988:	08002aaf 	.word	0x08002aaf
 800298c:	08002abd 	.word	0x08002abd
 8002990:	08002acb 	.word	0x08002acb
 8002994:	08002ad9 	.word	0x08002ad9
 8002998:	08002ae7 	.word	0x08002ae7
 800299c:	08002af5 	.word	0x08002af5
 80029a0:	08002b03 	.word	0x08002b03
 80029a4:	08002b11 	.word	0x08002b11
 80029a8:	08002b1f 	.word	0x08002b1f
 80029ac:	08002b2d 	.word	0x08002b2d
 80029b0:	08002b3b 	.word	0x08002b3b
 80029b4:	08002b49 	.word	0x08002b49
 80029b8:	08002b57 	.word	0x08002b57
 80029bc:	08002b65 	.word	0x08002b65
 80029c0:	08002b73 	.word	0x08002b73
 80029c4:	08002b81 	.word	0x08002b81
 80029c8:	08002b8f 	.word	0x08002b8f
 80029cc:	08002b9d 	.word	0x08002b9d
 80029d0:	08002bab 	.word	0x08002bab
 80029d4:	08002bb9 	.word	0x08002bb9
 80029d8:	08002bc7 	.word	0x08002bc7
		{
			case 48:
			  setDigit(i);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff1e 	bl	8002820 <setDigit>
			  setZero();
 80029e4:	f7ff fbea 	bl	80021bc <setZero>
			  break;
 80029e8:	e105      	b.n	8002bf6 <updateDisplay+0x372>
			case 49:
			  setDigit(i);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff17 	bl	8002820 <setDigit>
			  setOne();
 80029f2:	f7ff fadd 	bl	8001fb0 <setOne>
			  break;
 80029f6:	e0fe      	b.n	8002bf6 <updateDisplay+0x372>
			case 50:
			  setDigit(i);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff10 	bl	8002820 <setDigit>
			  setTwo();
 8002a00:	f7ff fae6 	bl	8001fd0 <setTwo>
			  break;
 8002a04:	e0f7      	b.n	8002bf6 <updateDisplay+0x372>
			case 51:
			  setDigit(i);
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff09 	bl	8002820 <setDigit>
			  setThree();
 8002a0e:	f7ff fafd 	bl	800200c <setThree>
			  break;
 8002a12:	e0f0      	b.n	8002bf6 <updateDisplay+0x372>
			case 52:
			  setDigit(i);
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff02 	bl	8002820 <setDigit>
			  setFour();
 8002a1c:	f7ff fb14 	bl	8002048 <setFour>
			  break;
 8002a20:	e0e9      	b.n	8002bf6 <updateDisplay+0x372>
			case 53:
			  setDigit(i);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fefb 	bl	8002820 <setDigit>
			  setFive();
 8002a2a:	f7ff fb27 	bl	800207c <setFive>
			  break;
 8002a2e:	e0e2      	b.n	8002bf6 <updateDisplay+0x372>
			case 54:
			  setDigit(i);
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fef4 	bl	8002820 <setDigit>
			  setSix();
 8002a38:	f7ff fb3e 	bl	80020b8 <setSix>
			  break;
 8002a3c:	e0db      	b.n	8002bf6 <updateDisplay+0x372>
			case 55:
			  setDigit(i);
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff feed 	bl	8002820 <setDigit>
			  setSeven();
 8002a46:	f7ff fb5b 	bl	8002100 <setSeven>
			  break;
 8002a4a:	e0d4      	b.n	8002bf6 <updateDisplay+0x372>
			case 56:
			  setDigit(i);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fee6 	bl	8002820 <setDigit>
			  setEight();
 8002a54:	f7ff fb68 	bl	8002128 <setEight>
			  break;
 8002a58:	e0cd      	b.n	8002bf6 <updateDisplay+0x372>
			case 57:
			  setDigit(i);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fedf 	bl	8002820 <setDigit>
			  setNine();
 8002a62:	f7ff fb8b 	bl	800217c <setNine>
			  break;
 8002a66:	e0c6      	b.n	8002bf6 <updateDisplay+0x372>

			// Letters - ASCII code of small letter

			case 97:
			  setDigit(i);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fed8 	bl	8002820 <setDigit>
			  setA();
 8002a70:	f7ff fbca 	bl	8002208 <setA>
			  break;
 8002a74:	e0bf      	b.n	8002bf6 <updateDisplay+0x372>
			case 98:
			  setDigit(i);
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fed1 	bl	8002820 <setDigit>
		      setB();
 8002a7e:	f7ff fbe9 	bl	8002254 <setB>
		      break;
 8002a82:	e0b8      	b.n	8002bf6 <updateDisplay+0x372>
			case 99:
			  setDigit(i);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff feca 	bl	8002820 <setDigit>
			  setC();
 8002a8c:	f7ff fc02 	bl	8002294 <setC>
			  break;
 8002a90:	e0b1      	b.n	8002bf6 <updateDisplay+0x372>
			case 100:
			  setDigit(i);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fec3 	bl	8002820 <setDigit>
			  setD();
 8002a9a:	f7ff fc15 	bl	80022c8 <setD>
		      break;
 8002a9e:	e0aa      	b.n	8002bf6 <updateDisplay+0x372>
			case 101:
			  setDigit(i);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff febc 	bl	8002820 <setDigit>
		      setE();
 8002aa8:	f7ff fc2e 	bl	8002308 <setE>
		      break;
 8002aac:	e0a3      	b.n	8002bf6 <updateDisplay+0x372>
			case 102:
			  setDigit(i);
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff feb5 	bl	8002820 <setDigit>
			  setF();
 8002ab6:	f7ff fc45 	bl	8002344 <setF>
			  break;
 8002aba:	e09c      	b.n	8002bf6 <updateDisplay+0x372>
			case 103:
			  setDigit(i);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff feae 	bl	8002820 <setDigit>
			  setG();
 8002ac4:	f7ff fc58 	bl	8002378 <setG>
			  break;
 8002ac8:	e095      	b.n	8002bf6 <updateDisplay+0x372>
			case 104:
			  setDigit(i);
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fea7 	bl	8002820 <setDigit>
			  setH();
 8002ad2:	f7ff fc71 	bl	80023b8 <setH>
			  break;
 8002ad6:	e08e      	b.n	8002bf6 <updateDisplay+0x372>
			case 105:
			  setDigit(i);
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fea0 	bl	8002820 <setDigit>
			  setI();
 8002ae0:	f7ff fc8a 	bl	80023f8 <setI>
			  break;
 8002ae4:	e087      	b.n	8002bf6 <updateDisplay+0x372>
			case 106:
			  setDigit(i);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe99 	bl	8002820 <setDigit>
			  setJ();
 8002aee:	f7ff fc93 	bl	8002418 <setJ>
			  break;
 8002af2:	e080      	b.n	8002bf6 <updateDisplay+0x372>
			case 107:
			  setDigit(i);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fe92 	bl	8002820 <setDigit>
			  setK();
 8002afc:	f7ff fdc0 	bl	8002680 <setK>
			  break;
 8002b00:	e079      	b.n	8002bf6 <updateDisplay+0x372>
			case 108:
			  setDigit(i);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fe8b 	bl	8002820 <setDigit>
			  setL();
 8002b0a:	f7ff fca1 	bl	8002450 <setL>
			  break;
 8002b0e:	e072      	b.n	8002bf6 <updateDisplay+0x372>
			case 109:
			  setDigit(i);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fe84 	bl	8002820 <setDigit>
			  setM();
 8002b18:	f7ff fdc8 	bl	80026ac <setM>
			  break;
 8002b1c:	e06b      	b.n	8002bf6 <updateDisplay+0x372>
			case 110:
			  setDigit(i);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe7d 	bl	8002820 <setDigit>
			  setN();
 8002b26:	f7ff fca9 	bl	800247c <setN>
			  break;
 8002b2a:	e064      	b.n	8002bf6 <updateDisplay+0x372>
			case 111:
			  setDigit(i);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fe76 	bl	8002820 <setDigit>
			  setO();
 8002b34:	f7ff fcb8 	bl	80024a8 <setO>
			  break;
 8002b38:	e05d      	b.n	8002bf6 <updateDisplay+0x372>
			case 112:
			  setDigit(i);
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe6f 	bl	8002820 <setDigit>
			  setP();
 8002b42:	f7ff fcd7 	bl	80024f4 <setP>
			  break;
 8002b46:	e056      	b.n	8002bf6 <updateDisplay+0x372>
			case 113:
    		  setDigit(i);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe68 	bl	8002820 <setDigit>
    		  setQ();
 8002b50:	f7ff fcf0 	bl	8002534 <setQ>
    		  break;
 8002b54:	e04f      	b.n	8002bf6 <updateDisplay+0x372>
			case 114:
			  setDigit(i);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe61 	bl	8002820 <setDigit>
			  setR();
 8002b5e:	f7ff fd09 	bl	8002574 <setR>
			  break;
 8002b62:	e048      	b.n	8002bf6 <updateDisplay+0x372>
			case 115:
			  setDigit(i);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe5a 	bl	8002820 <setDigit>
			  setS();
 8002b6c:	f7ff fd12 	bl	8002594 <setS>
			  break;
 8002b70:	e041      	b.n	8002bf6 <updateDisplay+0x372>
			case 116:
			  setDigit(i);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe53 	bl	8002820 <setDigit>
			  setT();
 8002b7a:	f7ff fd29 	bl	80025d0 <setT>
			  break;
 8002b7e:	e03a      	b.n	8002bf6 <updateDisplay+0x372>
			case 117:
     		  setDigit(i);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fe4c 	bl	8002820 <setDigit>
     		  setU();
 8002b88:	f7ff fd3c 	bl	8002604 <setU>
     		  break;
 8002b8c:	e033      	b.n	8002bf6 <updateDisplay+0x372>
			case 118:
			  setDigit(i);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fe45 	bl	8002820 <setDigit>
			  setV();
 8002b96:	f7ff fd9f 	bl	80026d8 <setV>
			  break;
 8002b9a:	e02c      	b.n	8002bf6 <updateDisplay+0x372>
			case 119:
			  setDigit(i);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe3e 	bl	8002820 <setDigit>
			  setW();
 8002ba4:	f7ff fdac 	bl	8002700 <setW>
			  break;
 8002ba8:	e025      	b.n	8002bf6 <updateDisplay+0x372>
			case 120:
			  setDigit(i);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe37 	bl	8002820 <setDigit>
			  setX();
 8002bb2:	f7ff fdc9 	bl	8002748 <setX>
			  break;
 8002bb6:	e01e      	b.n	8002bf6 <updateDisplay+0x372>
			case 121:
			  setDigit(i);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe30 	bl	8002820 <setDigit>
			  setY();
 8002bc0:	f7ff fd40 	bl	8002644 <setY>
			  break;
 8002bc4:	e017      	b.n	8002bf6 <updateDisplay+0x372>
			case 122:
			  setDigit(i);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe29 	bl	8002820 <setDigit>
			  setZ();
 8002bce:	f7ff fdcf 	bl	8002770 <setZ>
			  break;
 8002bd2:	e010      	b.n	8002bf6 <updateDisplay+0x372>
			case 95:
    		  setDigit(i);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe22 	bl	8002820 <setDigit>
    		  set_();
 8002bdc:	f7ff fdde 	bl	800279c <set_>
    		  break;
 8002be0:	e009      	b.n	8002bf6 <updateDisplay+0x372>
 8002be2:	bf00      	nop
 8002be4:	200001fc 	.word	0x200001fc
			case 45:
			  setDigit(i);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fe18 	bl	8002820 <setDigit>
			  set_minus();
 8002bf0:	f7ff fdde 	bl	80027b0 <set_minus>
			  break;
 8002bf4:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <updateDisplay+0x3c8>)
 8002bf8:	799b      	ldrb	r3, [r3, #6]
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d101      	bne.n	8002c04 <updateDisplay+0x380>
		{
			setDecimalPoint();
 8002c00:	f7ff f9cc 	bl	8001f9c <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <updateDisplay+0x3cc>)
 8002c06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <updateDisplay+0x3d0>)
 8002c0c:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8002c10:	bf00      	nop
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <updateDisplay+0x3d0>)
 8002c14:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002c18:	1c8b      	adds	r3, r1, #2
 8002c1a:	f142 0400 	adc.w	r4, r2, #0
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <updateDisplay+0x3cc>)
 8002c20:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002c24:	42a2      	cmp	r2, r4
 8002c26:	bf08      	it	eq
 8002c28:	4299      	cmpeq	r1, r3
 8002c2a:	d3f2      	bcc.n	8002c12 <updateDisplay+0x38e>

		resetDigits();
 8002c2c:	f7ff f976 	bl	8001f1c <resetDigits>
		resetSegments();
 8002c30:	f7ff f918 	bl	8001e64 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	3301      	adds	r3, #1
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	f67f ae27 	bls.w	8002890 <updateDisplay+0xc>
	}
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200001fc 	.word	0x200001fc
 8002c50:	20000208 	.word	0x20000208
 8002c54:	20000210 	.word	0x20000210

08002c58 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002c5c:	4806      	ldr	r0, [pc, #24]	; (8002c78 <TIM3_IRQHandler+0x20>)
 8002c5e:	f7ff f8ed 	bl	8001e3c <LL_TIM_IsActiveFlag_UPDATE>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002c68:	f7ff fe0c 	bl	8002884 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <TIM3_IRQHandler+0x20>)
 8002c6e:	f7ff f8d7 	bl	8001e20 <LL_TIM_ClearFlag_UPDATE>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40000400 	.word	0x40000400

08002c7c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <NVIC_EnableIRQ+0x30>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0b      	bge.n	8002cf8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <NVIC_SetPriority+0x4c>)
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	3b04      	subs	r3, #4
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf6:	e009      	b.n	8002d0c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <NVIC_SetPriority+0x50>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000

08002db8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <LL_SYSCFG_SetEXTISource+0x54>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	ea02 0103 	and.w	r1, r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	409a      	lsls	r2, r3
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <LL_SYSCFG_SetEXTISource+0x54>)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000

08002e10 <LL_GPIO_SetPinMode>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2103      	movs	r1, #3
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_GPIO_SetPinPull>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b089      	sub	sp, #36	; 0x24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	613b      	str	r3, [r7, #16]
  return(result);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2103      	movs	r1, #3
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3724      	adds	r7, #36	; 0x24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_GPIO_ResetOutputPin>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
 8002f00:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f06:	f7ff ff3f 	bl	8002d88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002f0e:	f7ff ff3b 	bl	8002d88 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002f12:	f640 111b 	movw	r1, #2331	; 0x91b
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1a:	f7ff ffd3 	bl	8002ec4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8002f1e:	2132      	movs	r1, #50	; 0x32
 8002f20:	482b      	ldr	r0, [pc, #172]	; (8002fd0 <MX_GPIO_Init+0xf0>)
 8002f22:	f7ff ffcf 	bl	8002ec4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002f26:	f641 139f 	movw	r3, #6559	; 0x199f
 8002f2a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f44:	f7fe f993 	bl	800126e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 8002f48:	2333      	movs	r3, #51	; 0x33
 8002f4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481b      	ldr	r0, [pc, #108]	; (8002fd0 <MX_GPIO_Init+0xf0>)
 8002f62:	f7fe f984 	bl	800126e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8002f66:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7ff ff24 	bl	8002db8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8002f70:	2201      	movs	r2, #1
 8002f72:	2108      	movs	r1, #8
 8002f74:	4816      	ldr	r0, [pc, #88]	; (8002fd0 <MX_GPIO_Init+0xf0>)
 8002f76:	f7ff ff78 	bl	8002e6a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <MX_GPIO_Init+0xf0>)
 8002f80:	f7ff ff46 	bl	8002e10 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002f84:	2308      	movs	r3, #8
 8002f86:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd ff80 	bl	8000ea8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 3));
 8002fa8:	f7ff fe68 	bl	8002c7c <NVIC_GetPriorityGrouping>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2203      	movs	r2, #3
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff feb4 	bl	8002d20 <NVIC_EncodePriority>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	2009      	movs	r0, #9
 8002fbe:	f7ff fe85 	bl	8002ccc <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002fc2:	2009      	movs	r0, #9
 8002fc4:	f7ff fe68 	bl	8002c98 <NVIC_EnableIRQ>

}
 8002fc8:	bf00      	nop
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	48000400 	.word	0x48000400

08002fd4 <NVIC_GetPriorityGrouping>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EnableIRQ>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <NVIC_EnableIRQ+0x30>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <NVIC_SetPriority>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	da0b      	bge.n	8003050 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <NVIC_SetPriority+0x4c>)
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	3b04      	subs	r3, #4
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	761a      	strb	r2, [r3, #24]
}
 800304e:	e009      	b.n	8003064 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <NVIC_SetPriority+0x50>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00
 8003074:	e000e100 	.word	0xe000e100

08003078 <NVIC_EncodePriority>:
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_I2C_Enable>:
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_I2C_EnableClockStretching>:
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_I2C_DisableGeneralCall>:
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_I2C_SetOwnAddress2>:
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003152:	f023 0306 	bic.w	r3, r3, #6
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	430a      	orrs	r2, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	60da      	str	r2, [r3, #12]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_I2C_DisableOwnAddress2>:
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_I2C_EnableIT_RX>:
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_I2C_DisableIT_RX>:
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 0204 	bic.w	r2, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_I2C_IsActiveFlag_TXIS>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_I2C_IsActiveFlag_RXNE>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_I2C_IsActiveFlag_STOP>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_I2C_ClearFlag_STOP>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	61da      	str	r2, [r3, #28]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_I2C_EnableAutoEndMode>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	0d5b      	lsrs	r3, r3, #21
 8003296:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <LL_I2C_HandleTransfer+0x48>)
 800329c:	430b      	orrs	r3, r1
 800329e:	43db      	mvns	r3, r3
 80032a0:	401a      	ands	r2, r3
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4319      	orrs	r1, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	4319      	orrs	r1, r3
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4319      	orrs	r1, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	03ff7bff 	.word	0x03ff7bff

080032cc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_AHB1_GRP1_EnableClock>:
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4013      	ands	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40021000 	.word	0x40021000

08003334 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <LL_APB1_GRP1_EnableClock+0x2c>)
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <LL_APB1_GRP1_EnableClock+0x2c>)
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40021000 	.word	0x40021000

08003364 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]
 800337a:	615a      	str	r2, [r3, #20]
 800337c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
 800338c:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800338e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003392:	f7ff ffb7 	bl	8003304 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003396:	23c0      	movs	r3, #192	; 0xc0
 8003398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800339a:	2302      	movs	r3, #2
 800339c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80033a2:	2301      	movs	r3, #1
 80033a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80033aa:	2304      	movs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4821      	ldr	r0, [pc, #132]	; (8003438 <MX_I2C1_Init+0xd4>)
 80033b4:	f7fd ff5b 	bl	800126e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80033b8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80033bc:	f7ff ffba 	bl	8003334 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033c0:	f7ff fe08 	bl	8002fd4 <NVIC_GetPriorityGrouping>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe54 	bl	8003078 <NVIC_EncodePriority>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4619      	mov	r1, r3
 80033d4:	201f      	movs	r0, #31
 80033d6:	f7ff fe25 	bl	8003024 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033da:	201f      	movs	r0, #31
 80033dc:	f7ff fe08 	bl	8002ff0 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80033e0:	4816      	ldr	r0, [pc, #88]	; (800343c <MX_I2C1_Init+0xd8>)
 80033e2:	f7ff ff3d 	bl	8003260 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80033e6:	4815      	ldr	r0, [pc, #84]	; (800343c <MX_I2C1_Init+0xd8>)
 80033e8:	f7ff fec1 	bl	800316e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80033ec:	4813      	ldr	r0, [pc, #76]	; (800343c <MX_I2C1_Init+0xd8>)
 80033ee:	f7ff fe96 	bl	800311e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80033f2:	4812      	ldr	r0, [pc, #72]	; (800343c <MX_I2C1_Init+0xd8>)
 80033f4:	f7ff fe83 	bl	80030fe <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <MX_I2C1_Init+0xdc>)
 80033fe:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8003408:	2302      	movs	r3, #2
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003410:	2300      	movs	r3, #0
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4619      	mov	r1, r3
 800341a:	4808      	ldr	r0, [pc, #32]	; (800343c <MX_I2C1_Init+0xd8>)
 800341c:	f7fe f844 	bl	80014a8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	4805      	ldr	r0, [pc, #20]	; (800343c <MX_I2C1_Init+0xd8>)
 8003426:	f7ff fe8a 	bl	800313e <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <MX_I2C1_Init+0xd8>)
 800342c:	f7ff fe57 	bl	80030de <LL_I2C_Enable>
}
 8003430:	bf00      	nop
 8003432:	3738      	adds	r7, #56	; 0x38
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	48000400 	.word	0x48000400
 800343c:	40005400 	.word	0x40005400
 8003440:	2000090e 	.word	0x2000090e

08003444 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b085      	sub	sp, #20
 8003448:	af02      	add	r7, sp, #8
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4623      	mov	r3, r4
 8003454:	71fb      	strb	r3, [r7, #7]
 8003456:	4603      	mov	r3, r0
 8003458:	71bb      	strb	r3, [r7, #6]
 800345a:	460b      	mov	r3, r1
 800345c:	717b      	strb	r3, [r7, #5]
 800345e:	4613      	mov	r3, r2
 8003460:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8003462:	793b      	ldrb	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800346e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003470:	7979      	ldrb	r1, [r7, #5]
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <i2c_master_write+0x80>)
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2302      	movs	r3, #2
 800347e:	2200      	movs	r2, #0
 8003480:	4811      	ldr	r0, [pc, #68]	; (80034c8 <i2c_master_write+0x84>)
 8003482:	f7ff fefd 	bl	8003280 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	4619      	mov	r1, r3
 800348a:	480f      	ldr	r0, [pc, #60]	; (80034c8 <i2c_master_write+0x84>)
 800348c:	f7ff ff2b 	bl	80032e6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003490:	e00a      	b.n	80034a8 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003492:	480d      	ldr	r0, [pc, #52]	; (80034c8 <i2c_master_write+0x84>)
 8003494:	f7ff fe9b 	bl	80031ce <LL_I2C_IsActiveFlag_TXIS>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4619      	mov	r1, r3
 80034a2:	4809      	ldr	r0, [pc, #36]	; (80034c8 <i2c_master_write+0x84>)
 80034a4:	f7ff ff1f 	bl	80032e6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <i2c_master_write+0x84>)
 80034aa:	f7ff feb6 	bl	800321a <LL_I2C_IsActiveFlag_STOP>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80034b4:	4804      	ldr	r0, [pc, #16]	; (80034c8 <i2c_master_write+0x84>)
 80034b6:	f7ff fec3 	bl	8003240 <LL_I2C_ClearFlag_STOP>
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	bf00      	nop
 80034c4:	80002000 	.word	0x80002000
 80034c8:	40005400 	.word	0x40005400

080034cc <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	70fb      	strb	r3, [r7, #3]
 80034de:	460b      	mov	r3, r1
 80034e0:	70bb      	strb	r3, [r7, #2]
 80034e2:	4613      	mov	r3, r2
 80034e4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80034e6:	4a31      	ldr	r2, [pc, #196]	; (80035ac <i2c_master_read+0xe0>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80034ec:	7c3b      	ldrb	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80034f2:	78bb      	ldrb	r3, [r7, #2]
 80034f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034f8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <i2c_master_read+0xe4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8003500:	482c      	ldr	r0, [pc, #176]	; (80035b4 <i2c_master_read+0xe8>)
 8003502:	f7ff fe44 	bl	800318e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003506:	7879      	ldrb	r1, [r7, #1]
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <i2c_master_read+0xec>)
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2301      	movs	r3, #1
 8003514:	2200      	movs	r2, #0
 8003516:	4827      	ldr	r0, [pc, #156]	; (80035b4 <i2c_master_read+0xe8>)
 8003518:	f7ff feb2 	bl	8003280 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800351c:	e00a      	b.n	8003534 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800351e:	4825      	ldr	r0, [pc, #148]	; (80035b4 <i2c_master_read+0xe8>)
 8003520:	f7ff fe55 	bl	80031ce <LL_I2C_IsActiveFlag_TXIS>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	4619      	mov	r1, r3
 800352e:	4821      	ldr	r0, [pc, #132]	; (80035b4 <i2c_master_read+0xe8>)
 8003530:	f7ff fed9 	bl	80032e6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003534:	481f      	ldr	r0, [pc, #124]	; (80035b4 <i2c_master_read+0xe8>)
 8003536:	f7ff fe70 	bl	800321a <LL_I2C_IsActiveFlag_STOP>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003540:	481c      	ldr	r0, [pc, #112]	; (80035b4 <i2c_master_read+0xe8>)
 8003542:	f7ff fe7d 	bl	8003240 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8003546:	bf00      	nop
 8003548:	481a      	ldr	r0, [pc, #104]	; (80035b4 <i2c_master_read+0xe8>)
 800354a:	f7ff fe66 	bl	800321a <LL_I2C_IsActiveFlag_STOP>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8003554:	7879      	ldrb	r1, [r7, #1]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <i2c_master_read+0xf0>)
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	2200      	movs	r2, #0
 8003566:	4813      	ldr	r0, [pc, #76]	; (80035b4 <i2c_master_read+0xe8>)
 8003568:	f7ff fe8a 	bl	8003280 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800356c:	bf00      	nop
 800356e:	4811      	ldr	r0, [pc, #68]	; (80035b4 <i2c_master_read+0xe8>)
 8003570:	f7ff fe53 	bl	800321a <LL_I2C_IsActiveFlag_STOP>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f9      	beq.n	800356e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800357a:	480e      	ldr	r0, [pc, #56]	; (80035b4 <i2c_master_read+0xe8>)
 800357c:	f7ff fe60 	bl	8003240 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <i2c_master_read+0xe8>)
 8003582:	f7ff fe14 	bl	80031ae <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <i2c_master_read+0xe8>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <i2c_master_read+0xe8>)
 800358c:	f043 0310 	orr.w	r3, r3, #16
 8003590:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <i2c_master_read+0xf4>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <i2c_master_read+0xe4>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 800359e:	4b03      	ldr	r3, [pc, #12]	; (80035ac <i2c_master_read+0xe0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000228 	.word	0x20000228
 80035b0:	20000218 	.word	0x20000218
 80035b4:	40005400 	.word	0x40005400
 80035b8:	80002000 	.word	0x80002000
 80035bc:	80002400 	.word	0x80002400
 80035c0:	20000219 	.word	0x20000219

080035c4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80035c4:	b598      	push	{r3, r4, r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80035c8:	4812      	ldr	r0, [pc, #72]	; (8003614 <I2C1_EV_IRQHandler+0x50>)
 80035ca:	f7ff fe13 	bl	80031f4 <LL_I2C_IsActiveFlag_RXNE>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <I2C1_EV_IRQHandler+0x54>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <I2C1_EV_IRQHandler+0x58>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	b2c8      	uxtb	r0, r1
 80035e2:	490e      	ldr	r1, [pc, #56]	; (800361c <I2C1_EV_IRQHandler+0x58>)
 80035e4:	7008      	strb	r0, [r1, #0]
 80035e6:	18d4      	adds	r4, r2, r3
 80035e8:	480a      	ldr	r0, [pc, #40]	; (8003614 <I2C1_EV_IRQHandler+0x50>)
 80035ea:	f7ff fe6f 	bl	80032cc <LL_I2C_ReceiveData8>
 80035ee:	4603      	mov	r3, r0
 80035f0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <I2C1_EV_IRQHandler+0x58>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b13      	cmp	r3, #19
 80035fa:	d903      	bls.n	8003604 <I2C1_EV_IRQHandler+0x40>
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <I2C1_EV_IRQHandler+0x58>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e001      	b.n	8003608 <I2C1_EV_IRQHandler+0x44>
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <I2C1_EV_IRQHandler+0x58>)
 8003606:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <I2C1_EV_IRQHandler+0x5c>)
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
	}
}
 800360e:	bf00      	nop
 8003610:	bd98      	pop	{r3, r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	40005400 	.word	0x40005400
 8003618:	20000228 	.word	0x20000228
 800361c:	20000219 	.word	0x20000219
 8003620:	20000218 	.word	0x20000218

08003624 <NVIC_SetPriorityGrouping>:
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <NVIC_SetPriorityGrouping+0x44>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800364c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <NVIC_SetPriorityGrouping+0x44>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <LL_RCC_HSI_Enable+0x1c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <LL_RCC_HSI_Enable+0x1c>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <LL_RCC_HSI_IsReady+0x20>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40021000 	.word	0x40021000

080036b0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <LL_RCC_SetSysClkSource+0x24>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 0203 	bic.w	r2, r3, #3
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <LL_RCC_SetSysClkSource+0x24>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40021000 	.word	0x40021000

08003704 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <LL_RCC_GetSysClkSource+0x18>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000

08003720 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <LL_RCC_SetAHBPrescaler+0x24>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	4904      	ldr	r1, [pc, #16]	; (8003744 <LL_RCC_SetAHBPrescaler+0x24>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40021000 	.word	0x40021000

08003748 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003758:	4904      	ldr	r1, [pc, #16]	; (800376c <LL_RCC_SetAPB1Prescaler+0x24>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40021000 	.word	0x40021000

08003770 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <LL_RCC_SetAPB2Prescaler+0x24>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40021000 	.word	0x40021000

08003798 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <LL_RCC_SetI2CClockSource+0x2c>)
 80037a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0e1b      	lsrs	r3, r3, #24
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	4904      	ldr	r1, [pc, #16]	; (80037c4 <LL_RCC_SetI2CClockSource+0x2c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40021000 	.word	0x40021000

080037c8 <LL_APB1_GRP1_EnableClock>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40021000 	.word	0x40021000

080037f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	4907      	ldr	r1, [pc, #28]	; (8003824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4313      	orrs	r3, r2
 800380a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <LL_APB2_GRP1_EnableClock+0x2c>)
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4013      	ands	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000

08003828 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <LL_FLASH_SetLatency+0x24>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	4904      	ldr	r1, [pc, #16]	; (800384c <LL_FLASH_SetLatency+0x24>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40022000 	.word	0x40022000

08003850 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <LL_FLASH_GetLatency+0x18>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000

0800386c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40010400 	.word	0x40010400

08003898 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6153      	str	r3, [r2, #20]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40010400 	.word	0x40010400

080038b8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d106      	bne.n	80038d4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <LL_SYSTICK_SetClkSource+0x34>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <LL_SYSTICK_SetClkSource+0x34>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80038d2:	e005      	b.n	80038e0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <LL_SYSTICK_SetClkSource+0x34>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a04      	ldr	r2, [pc, #16]	; (80038ec <LL_SYSTICK_SetClkSource+0x34>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <LL_SYSTICK_EnableIT+0x1c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <LL_SYSTICK_EnableIT+0x1c>)
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <LL_GPIO_IsInputPinSet>:
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4013      	ands	r3, r2
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	0000      	movs	r0, r0
 800393c:	0000      	movs	r0, r0
	...

08003940 <get_altitude>:

extern uint64_t disp_time;
uint64_t saved_time;
uint8_t txtIndex = 0;

float get_altitude(float temp, float press){
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	ed87 0a01 	vstr	s0, [r7, #4]
 800394a:	edc7 0a00 	vstr	s1, [r7]
    double tmp1 = 1013/(double)press;
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f7fc fdfa 	bl	8000548 <__aeabi_f2d>
 8003954:	4603      	mov	r3, r0
 8003956:	460c      	mov	r4, r1
 8003958:	461a      	mov	r2, r3
 800395a:	4623      	mov	r3, r4
 800395c:	a128      	add	r1, pc, #160	; (adr r1, 8003a00 <get_altitude+0xc0>)
 800395e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003962:	f7fc ff73 	bl	800084c <__aeabi_ddiv>
 8003966:	4603      	mov	r3, r0
 8003968:	460c      	mov	r4, r1
 800396a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    double tmp2 = pow(tmp1, (1/5.257));
 800396e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80039e8 <get_altitude+0xa8>
 8003972:	ed97 0b06 	vldr	d0, [r7, #24]
 8003976:	f002 febb 	bl	80066f0 <pow>
 800397a:	ed87 0b04 	vstr	d0, [r7, #16]
    float alti = ((tmp2 - 1)*(temp + 273))/0.0065; // Vypocet nadmorskej vysky
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <get_altitude+0xb8>)
 8003984:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003988:	f7fc fc7e 	bl	8000288 <__aeabi_dsub>
 800398c:	4603      	mov	r3, r0
 800398e:	460c      	mov	r4, r1
 8003990:	4625      	mov	r5, r4
 8003992:	461c      	mov	r4, r3
 8003994:	edd7 7a01 	vldr	s15, [r7, #4]
 8003998:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80039fc <get_altitude+0xbc>
 800399c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039a0:	ee17 0a90 	vmov	r0, s15
 80039a4:	f7fc fdd0 	bl	8000548 <__aeabi_f2d>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4620      	mov	r0, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	f7fc fe22 	bl	80005f8 <__aeabi_dmul>
 80039b4:	4603      	mov	r3, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	4618      	mov	r0, r3
 80039ba:	4621      	mov	r1, r4
 80039bc:	a30c      	add	r3, pc, #48	; (adr r3, 80039f0 <get_altitude+0xb0>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc ff43 	bl	800084c <__aeabi_ddiv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	4618      	mov	r0, r3
 80039cc:	4621      	mov	r1, r4
 80039ce:	f7fd f8eb 	bl	8000ba8 <__aeabi_d2f>
 80039d2:	4603      	mov	r3, r0
 80039d4:	60fb      	str	r3, [r7, #12]
    return alti;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	ee07 3a90 	vmov	s15, r3
}
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bdb0      	pop	{r4, r5, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	7dee2d4a 	.word	0x7dee2d4a
 80039ec:	3fc85936 	.word	0x3fc85936
 80039f0:	76c8b439 	.word	0x76c8b439
 80039f4:	3f7a9fbe 	.word	0x3f7a9fbe
 80039f8:	3ff00000 	.word	0x3ff00000
 80039fc:	43888000 	.word	0x43888000
 8003a00:	00000000 	.word	0x00000000
 8003a04:	408fa800 	.word	0x408fa800

08003a08 <main>:

int main(void)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b099      	sub	sp, #100	; 0x64
 8003a0c:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f7ff fef2 	bl	80037f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003a14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003a18:	f7ff fed6 	bl	80037c8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	f7ff fe01 	bl	8003624 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8003a22:	f000 f957 	bl	8003cd4 <SystemClock_Config>

  MX_GPIO_Init();
 8003a26:	f7ff fa5b 	bl	8002ee0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003a2a:	f7ff fc9b 	bl	8003364 <MX_I2C1_Init>

  setSegments();
 8003a2e:	f7fe fa47 	bl	8001ec0 <setSegments>
  setDigits();
 8003a32:	f7fe fa93 	bl	8001f5c <setDigits>

  LL_mDelay(2000);
 8003a36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a3a:	f7fe f9a1 	bl	8001d80 <LL_mDelay>

  resetDigits();
 8003a3e:	f7fe fa6d 	bl	8001f1c <resetDigits>
  resetSegments();
 8003a42:	f7fe fa0f 	bl	8001e64 <resetSegments>

  MX_TIM3_Init();
 8003a46:	f000 fbf7 	bl	8004238 <MX_TIM3_Init>
  uint8_t lps = lps25hb_init();
 8003a4a:	f000 fdad 	bl	80045a8 <lps25hb_init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t hts = hts221_init();
 8003a54:	f000 fcee 	bl	8004434 <hts221_init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  uint8_t text[12];
  uint8_t cycleRight = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  uint8_t temp_text[12] = "temp_%.1f";
 8003a64:	4a93      	ldr	r2, [pc, #588]	; (8003cb4 <main+0x2ac>)
 8003a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6c:	c303      	stmia	r3!, {r0, r1}
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	867b      	strh	r3, [r7, #50]	; 0x32
  uint8_t hum_text[12] = "hum_%2d";
 8003a74:	4a90      	ldr	r2, [pc, #576]	; (8003cb8 <main+0x2b0>)
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t bar_text[12] = "bar_%.2f";
 8003a86:	4a8d      	ldr	r2, [pc, #564]	; (8003cbc <main+0x2b4>)
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a8e:	c303      	stmia	r3!, {r0, r1}
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	f107 0319 	add.w	r3, r7, #25
 8003a96:	2200      	movs	r2, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	709a      	strb	r2, [r3, #2]
  uint8_t alt_text[12] = "alt_%.1f";
 8003a9c:	4a88      	ldr	r2, [pc, #544]	; (8003cc0 <main+0x2b8>)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	c303      	stmia	r3!, {r0, r1}
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	f107 030d 	add.w	r3, r7, #13
 8003aaa:	2200      	movs	r2, #0
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	709a      	strb	r2, [r3, #2]

  float lps_temp = lps25hb_get_temp();
 8003ab0:	f000 fd2a 	bl	8004508 <lps25hb_get_temp>
 8003ab4:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
  int8_t hts_humi = hts221_get_humi();
 8003ab8:	f000 fc92 	bl	80043e0 <hts221_get_humi>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  float lps_press = lps25hb_get_press();
 8003ac2:	f000 fd55 	bl	8004570 <lps25hb_get_press>
 8003ac6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
  float alt = get_altitude(lps_temp, lps_press);
 8003aca:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8003ace:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003ad2:	f7ff ff35 	bl	8003940 <get_altitude>
 8003ad6:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

  while (1)
    {
        if(disp_time > (saved_time + 500))
 8003ada:	4b7a      	ldr	r3, [pc, #488]	; (8003cc4 <main+0x2bc>)
 8003adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ae0:	f513 71fa 	adds.w	r1, r3, #500	; 0x1f4
 8003ae4:	f144 0200 	adc.w	r2, r4, #0
 8003ae8:	4b77      	ldr	r3, [pc, #476]	; (8003cc8 <main+0x2c0>)
 8003aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	bf08      	it	eq
 8003af2:	4299      	cmpeq	r1, r3
 8003af4:	d2f1      	bcs.n	8003ada <main+0xd2>
        {
            memset(text, 0, 12);
 8003af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003afa:	220c      	movs	r2, #12
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fdb0 	bl	8004664 <memset>
            switch (switch_state){
 8003b04:	4b71      	ldr	r3, [pc, #452]	; (8003ccc <main+0x2c4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d85b      	bhi.n	8003bc4 <main+0x1bc>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <main+0x10c>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b67 	.word	0x08003b67
 8003b20:	08003b8b 	.word	0x08003b8b
            case 0:
                lps_temp = lps25hb_get_temp();
 8003b24:	f000 fcf0 	bl	8004508 <lps25hb_get_temp>
 8003b28:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
                sprintf(text, temp_text, lps_temp);
 8003b2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b2e:	f7fc fd0b 	bl	8000548 <__aeabi_f2d>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b3a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4623      	mov	r3, r4
 8003b42:	f001 f9f3 	bl	8004f2c <siprintf>
                break;
 8003b46:	e03e      	b.n	8003bc6 <main+0x1be>
            case 1:
                hts_humi = hts221_get_humi();
 8003b48:	f000 fc4a 	bl	80043e0 <hts221_get_humi>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                sprintf(text, hum_text, hts_humi);
 8003b52:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8003b56:	f107 011c 	add.w	r1, r7, #28
 8003b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 f9e4 	bl	8004f2c <siprintf>
                break;
 8003b64:	e02f      	b.n	8003bc6 <main+0x1be>
            case 2:
                lps_press = lps25hb_get_press();
 8003b66:	f000 fd03 	bl	8004570 <lps25hb_get_press>
 8003b6a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
                sprintf(text, bar_text, lps_press);
 8003b6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b70:	f7fc fcea 	bl	8000548 <__aeabi_f2d>
 8003b74:	4603      	mov	r3, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	f107 0110 	add.w	r1, r7, #16
 8003b7c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003b80:	461a      	mov	r2, r3
 8003b82:	4623      	mov	r3, r4
 8003b84:	f001 f9d2 	bl	8004f2c <siprintf>
                break;
 8003b88:	e01d      	b.n	8003bc6 <main+0x1be>
            case 3:
                lps_temp = lps25hb_get_temp();
 8003b8a:	f000 fcbd 	bl	8004508 <lps25hb_get_temp>
 8003b8e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
                lps_press = lps25hb_get_press();
 8003b92:	f000 fced 	bl	8004570 <lps25hb_get_press>
 8003b96:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
                alt = get_altitude(lps_temp, lps_press);
 8003b9a:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8003b9e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003ba2:	f7ff fecd 	bl	8003940 <get_altitude>
 8003ba6:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
                sprintf(text, alt_text, alt);
 8003baa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003bac:	f7fc fccc 	bl	8000548 <__aeabi_f2d>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	1d39      	adds	r1, r7, #4
 8003bb6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	f001 f9b5 	bl	8004f2c <siprintf>
                break;
 8003bc2:	e000      	b.n	8003bc6 <main+0x1be>
            default:
                break;
 8003bc4:	bf00      	nop
            }

            auto txt_length = strlen(text);
 8003bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fb00 	bl	80001d0 <strlen>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40

            uint8_t toDisplay[4] = "";
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	603b      	str	r3, [r7, #0]

            if (txtIndex >= (txt_length - 4)){
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <main+0x2c8>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be0:	3b04      	subs	r3, #4
 8003be2:	429a      	cmp	r2, r3
 8003be4:	db03      	blt.n	8003bee <main+0x1e6>
                cycleRight = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003bec:	e006      	b.n	8003bfc <main+0x1f4>
            }
            else if (txtIndex <= 0){
 8003bee:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <main+0x2c8>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <main+0x1f4>
                cycleRight = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            }

            uint8_t resolution = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            uint8_t skipped = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            for (int i = 0; i<4; i++){
 8003c08:	2300      	movs	r3, #0
 8003c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0c:	e02f      	b.n	8003c6e <main+0x266>
                if (text[i + txtIndex + resolution] == '.' || resolution > 0){
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <main+0x2c8>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c16:	441a      	add	r2, r3
 8003c18:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c22:	4413      	add	r3, r2
 8003c24:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003c28:	2b2e      	cmp	r3, #46	; 0x2e
 8003c2a:	d003      	beq.n	8003c34 <main+0x22c>
 8003c2c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <main+0x23c>
                    resolution++;
 8003c34:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                    skipped = 1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                }
                toDisplay[i] = text[i + txtIndex + skipped];
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <main+0x2c8>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4c:	441a      	add	r2, r3
 8003c4e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003c52:	4413      	add	r3, r2
 8003c54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c58:	4413      	add	r3, r2
 8003c5a:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 8003c5e:	463a      	mov	r2, r7
 8003c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c62:	4413      	add	r3, r2
 8003c64:	460a      	mov	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<4; i++){
 8003c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	ddcc      	ble.n	8003c0e <main+0x206>
            }

            if (cycleRight){
 8003c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <main+0x282>
                txtIndex++;
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <main+0x2c8>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <main+0x2c8>)
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e005      	b.n	8003c96 <main+0x28e>
            }
            else {
                txtIndex--;
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <main+0x2c8>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <main+0x2c8>)
 8003c94:	701a      	strb	r2, [r3, #0]
            }

            displayString(toDisplay, resolution);
 8003c96:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fd90 	bl	80027c4 <displayString>

            saved_time = disp_time;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <main+0x2c0>)
 8003ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <main+0x2bc>)
 8003cac:	e9c2 3400 	strd	r3, r4, [r2]
        if(disp_time > (saved_time + 500))
 8003cb0:	e713      	b.n	8003ada <main+0xd2>
 8003cb2:	bf00      	nop
 8003cb4:	080077b8 	.word	0x080077b8
 8003cb8:	080077c4 	.word	0x080077c4
 8003cbc:	080077d0 	.word	0x080077d0
 8003cc0:	080077dc 	.word	0x080077dc
 8003cc4:	20000230 	.word	0x20000230
 8003cc8:	20000208 	.word	0x20000208
 8003ccc:	2000021a 	.word	0x2000021a
 8003cd0:	2000021b 	.word	0x2000021b

08003cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7ff fda5 	bl	8003828 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003cde:	f7ff fdb7 	bl	8003850 <LL_FLASH_GetLatency>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003ce8:	f000 f89e 	bl	8003e28 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003cec:	f7ff fcbe 	bl	800366c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003cf0:	bf00      	nop
 8003cf2:	f7ff fccb 	bl	800368c <LL_RCC_HSI_IsReady>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d1fa      	bne.n	8003cf2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003cfc:	2010      	movs	r0, #16
 8003cfe:	f7ff fcd7 	bl	80036b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7ff fd0c 	bl	8003720 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7ff fd1d 	bl	8003748 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f7ff fd2e 	bl	8003770 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff fce1 	bl	80036dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003d1a:	bf00      	nop
 8003d1c:	f7ff fcf2 	bl	8003704 <LL_RCC_GetSysClkSource>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1fa      	bne.n	8003d1c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8003d26:	4808      	ldr	r0, [pc, #32]	; (8003d48 <SystemClock_Config+0x74>)
 8003d28:	f7fe f81c 	bl	8001d64 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003d2c:	2004      	movs	r0, #4
 8003d2e:	f7ff fdc3 	bl	80038b8 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <SystemClock_Config+0x74>)
 8003d34:	f7fe f848 	bl	8001dc8 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003d38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003d3c:	f7ff fd2c 	bl	8003798 <LL_RCC_SetI2CClockSource>
  LL_SYSTICK_EnableIT();
 8003d40:	f7ff fdd6 	bl	80038f0 <LL_SYSTICK_EnableIT>
}
 8003d44:	bf00      	nop
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	007a1200 	.word	0x007a1200

08003d4c <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	70fb      	strb	r3, [r7, #3]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70bb      	strb	r3, [r7, #2]
 8003d62:	4613      	mov	r3, r2
 8003d64:	707b      	strb	r3, [r7, #1]
		uint8_t button_state = 0, timeout = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 8003d6e:	e013      	b.n	8003d98 <checkButtonState+0x4c>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN)))
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fdcb 	bl	8003910 <LL_GPIO_IsInputPinSet>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <checkButtonState+0x3c>
			{
				button_state += 1;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	3301      	adds	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	e001      	b.n	8003d8c <checkButtonState+0x40>
			}
			else
			{
				button_state = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7fd fff4 	bl	8001d80 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	7e3b      	ldrb	r3, [r7, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d203      	bcs.n	8003da8 <checkButtonState+0x5c>
 8003da0:	7bba      	ldrb	r2, [r7, #14]
 8003da2:	787b      	ldrb	r3, [r7, #1]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d3e3      	bcc.n	8003d70 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	7e3b      	ldrb	r3, [r7, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d305      	bcc.n	8003dbc <checkButtonState+0x70>
 8003db0:	7bba      	ldrb	r2, [r7, #14]
 8003db2:	787b      	ldrb	r3, [r7, #1]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d801      	bhi.n	8003dbc <checkButtonState+0x70>
		{
			return 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <checkButtonState+0x72>
		}
		else
		{
			return 0;
 8003dbc:	2300      	movs	r3, #0
		}
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003dce:	230f      	movs	r3, #15
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	2328      	movs	r3, #40	; 0x28
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	4810      	ldr	r0, [pc, #64]	; (8003e1c <EXTI3_IRQHandler+0x54>)
 8003dda:	f7ff ffb7 	bl	8003d4c <checkButtonState>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00f      	beq.n	8003e04 <EXTI3_IRQHandler+0x3c>
						GPIO_PIN_BUTTON,
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		switch_state += 1;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <EXTI3_IRQHandler+0x58>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <EXTI3_IRQHandler+0x58>)
 8003dee:	701a      	strb	r2, [r3, #0]
		txtIndex = 0;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <EXTI3_IRQHandler+0x5c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]

		if(switch_state >=4){
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <EXTI3_IRQHandler+0x58>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d902      	bls.n	8003e04 <EXTI3_IRQHandler+0x3c>
			switch_state = 0;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <EXTI3_IRQHandler+0x58>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]

	/* Clear EXTI4 pending register flag */
	//EXTI->PR |= (EXTI_PR_PIF4);
	//LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003e04:	2008      	movs	r0, #8
 8003e06:	f7ff fd31 	bl	800386c <LL_EXTI_IsActiveFlag_0_31>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <EXTI3_IRQHandler+0x4e>
	{
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003e10:	2008      	movs	r0, #8
 8003e12:	f7ff fd41 	bl	8003898 <LL_EXTI_ClearFlag_0_31>
	}
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	48000400 	.word	0x48000400
 8003e20:	2000021a 	.word	0x2000021a
 8003e24:	2000021b 	.word	0x2000021b

08003e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <Error_Handler+0x6>

08003e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <HardFault_Handler+0x4>

08003e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <MemManage_Handler+0x4>

08003e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e4e:	e7fe      	b.n	8003e4e <BusFault_Handler+0x4>

08003e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <UsageFault_Handler+0x4>

08003e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e80:	b490      	push	{r4, r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <SysTick_Handler+0x20>)
 8003e86:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003e8a:	1c4b      	adds	r3, r1, #1
 8003e8c:	f142 0400 	adc.w	r4, r2, #0
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <SysTick_Handler+0x20>)
 8003e92:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc90      	pop	{r4, r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000208 	.word	0x20000208

08003ea4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <_sbrk+0x50>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <_sbrk+0x16>
		heap_end = &end;
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <_sbrk+0x50>)
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <_sbrk+0x54>)
 8003eb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <_sbrk+0x50>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <_sbrk+0x50>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	466a      	mov	r2, sp
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d907      	bls.n	8003ede <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ece:	f000 fb9f 	bl	8004610 <__errno>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	230c      	movs	r3, #12
 8003ed6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	e006      	b.n	8003eec <_sbrk+0x48>
	}

	heap_end += incr;
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <_sbrk+0x50>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a03      	ldr	r2, [pc, #12]	; (8003ef4 <_sbrk+0x50>)
 8003ee8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000021c 	.word	0x2000021c
 8003ef8:	20000240 	.word	0x20000240

08003efc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f00:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <SystemInit+0x84>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <SystemInit+0x84>)
 8003f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f10:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <SystemInit+0x88>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <SystemInit+0x88>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <SystemInit+0x88>)
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	4918      	ldr	r1, [pc, #96]	; (8003f84 <SystemInit+0x88>)
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <SystemInit+0x8c>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <SystemInit+0x88>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <SystemInit+0x88>)
 8003f2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <SystemInit+0x88>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <SystemInit+0x88>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <SystemInit+0x88>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <SystemInit+0x88>)
 8003f4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f4e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <SystemInit+0x88>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <SystemInit+0x88>)
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <SystemInit+0x88>)
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f60:	4908      	ldr	r1, [pc, #32]	; (8003f84 <SystemInit+0x88>)
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <SystemInit+0x90>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <SystemInit+0x88>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <SystemInit+0x84>)
 8003f70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f74:	609a      	str	r2, [r3, #8]
#endif
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	40021000 	.word	0x40021000
 8003f88:	f87fc00c 	.word	0xf87fc00c
 8003f8c:	ff00fccc 	.word	0xff00fccc

08003f90 <NVIC_GetPriorityGrouping>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <NVIC_GetPriorityGrouping+0x18>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	f003 0307 	and.w	r3, r3, #7
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <NVIC_EnableIRQ>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4907      	ldr	r1, [pc, #28]	; (8003fdc <NVIC_EnableIRQ+0x30>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <NVIC_SetPriority>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da0b      	bge.n	800400c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <NVIC_SetPriority+0x4c>)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	3b04      	subs	r3, #4
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	761a      	strb	r2, [r3, #24]
}
 800400a:	e009      	b.n	8004020 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4907      	ldr	r1, [pc, #28]	; (8004030 <NVIC_SetPriority+0x50>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00
 8004030:	e000e100 	.word	0xe000e100

08004034 <NVIC_EncodePriority>:
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf28      	it	cs
 8004052:	2304      	movcs	r3, #4
 8004054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3304      	adds	r3, #4
 800405a:	2b06      	cmp	r3, #6
 800405c:	d902      	bls.n	8004064 <NVIC_EncodePriority+0x30>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3b03      	subs	r3, #3
 8004062:	e000      	b.n	8004066 <NVIC_EncodePriority+0x32>
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	4313      	orrs	r3, r2
}
 800408e:	4618      	mov	r0, r3
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <LL_APB1_GRP1_EnableClock>:
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	4907      	ldr	r1, [pc, #28]	; (80040c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4013      	ands	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40021000 	.word	0x40021000

080040cc <LL_TIM_EnableCounter>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_TIM_EnableARRPreload>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_TIM_OC_DisableFast>:
{
 800410c:	b4b0      	push	{r4, r5, r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d028      	beq.n	800416e <LL_TIM_OC_DisableFast+0x62>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d023      	beq.n	800416a <LL_TIM_OC_DisableFast+0x5e>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d01e      	beq.n	8004166 <LL_TIM_OC_DisableFast+0x5a>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d019      	beq.n	8004162 <LL_TIM_OC_DisableFast+0x56>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d013      	beq.n	800415e <LL_TIM_OC_DisableFast+0x52>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d00d      	beq.n	800415a <LL_TIM_OC_DisableFast+0x4e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d007      	beq.n	8004156 <LL_TIM_OC_DisableFast+0x4a>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d101      	bne.n	8004152 <LL_TIM_OC_DisableFast+0x46>
 800414e:	2307      	movs	r3, #7
 8004150:	e00e      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 8004152:	2308      	movs	r3, #8
 8004154:	e00c      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 8004156:	2306      	movs	r3, #6
 8004158:	e00a      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 800415a:	2305      	movs	r3, #5
 800415c:	e008      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 800415e:	2304      	movs	r3, #4
 8004160:	e006      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 8004162:	2303      	movs	r3, #3
 8004164:	e004      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 8004166:	2302      	movs	r3, #2
 8004168:	e002      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <LL_TIM_OC_DisableFast+0x64>
 800416e:	2300      	movs	r3, #0
 8004170:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3318      	adds	r3, #24
 8004176:	461a      	mov	r2, r3
 8004178:	4629      	mov	r1, r5
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <LL_TIM_OC_DisableFast+0x94>)
 800417c:	5c5b      	ldrb	r3, [r3, r1]
 800417e:	4413      	add	r3, r2
 8004180:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	4629      	mov	r1, r5
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <LL_TIM_OC_DisableFast+0x98>)
 8004188:	5c5b      	ldrb	r3, [r3, r1]
 800418a:	4619      	mov	r1, r3
 800418c:	2304      	movs	r3, #4
 800418e:	408b      	lsls	r3, r1
 8004190:	43db      	mvns	r3, r3
 8004192:	4013      	ands	r3, r2
 8004194:	6023      	str	r3, [r4, #0]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bcb0      	pop	{r4, r5, r7}
 800419e:	4770      	bx	lr
 80041a0:	080077e8 	.word	0x080077e8
 80041a4:	080077f4 	.word	0x080077f4

080041a8 <LL_TIM_SetClockSource>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_TIM_SetTriggerOutput>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_TIM_DisableMasterSlaveMode>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_TIM_EnableIT_UPDATE>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800423e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2220      	movs	r2, #32
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa05 	bl	8004664 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800425a:	2002      	movs	r0, #2
 800425c:	f7ff ff1e 	bl	800409c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8004260:	f7ff fe96 	bl	8003f90 <NVIC_GetPriorityGrouping>
 8004264:	4603      	mov	r3, r0
 8004266:	2202      	movs	r2, #2
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fee2 	bl	8004034 <NVIC_EncodePriority>
 8004270:	4603      	mov	r3, r0
 8004272:	4619      	mov	r1, r3
 8004274:	201d      	movs	r0, #29
 8004276:	f7ff feb3 	bl	8003fe0 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800427a:	201d      	movs	r0, #29
 800427c:	f7ff fe96 	bl	8003fac <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8004280:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8004284:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004286:	2300      	movs	r3, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800428a:	2313      	movs	r3, #19
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800428e:	2300      	movs	r3, #0
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004296:	4619      	mov	r1, r3
 8004298:	4817      	ldr	r0, [pc, #92]	; (80042f8 <MX_TIM3_Init+0xc0>)
 800429a:	f7fd f9cf 	bl	800163c <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 800429e:	4816      	ldr	r0, [pc, #88]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042a0:	f7ff ff24 	bl	80040ec <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80042a4:	2100      	movs	r1, #0
 80042a6:	4814      	ldr	r0, [pc, #80]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042a8:	f7ff ff7e 	bl	80041a8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80042ac:	2310      	movs	r3, #16
 80042ae:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	461a      	mov	r2, r3
 80042c4:	2101      	movs	r1, #1
 80042c6:	480c      	ldr	r0, [pc, #48]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042c8:	f7fd fa2c 	bl	8001724 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80042cc:	2101      	movs	r1, #1
 80042ce:	480a      	ldr	r0, [pc, #40]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042d0:	f7ff ff1c 	bl	800410c <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80042d4:	2100      	movs	r1, #0
 80042d6:	4808      	ldr	r0, [pc, #32]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042d8:	f7ff ff7b 	bl	80041d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80042dc:	4806      	ldr	r0, [pc, #24]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042de:	f7ff ff8b 	bl	80041f8 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80042e2:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042e4:	f7ff ff98 	bl	8004218 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80042e8:	4803      	ldr	r0, [pc, #12]	; (80042f8 <MX_TIM3_Init+0xc0>)
 80042ea:	f7ff feef 	bl	80040cc <LL_TIM_EnableCounter>

}
 80042ee:	bf00      	nop
 80042f0:	3738      	adds	r7, #56	; 0x38
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40000400 	.word	0x40000400

080042fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004334 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004300:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004302:	e003      	b.n	800430c <LoopCopyDataInit>

08004304 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004306:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004308:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800430a:	3104      	adds	r1, #4

0800430c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <LoopForever+0xa>)
	ldr	r3, =_edata
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004310:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004312:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004314:	d3f6      	bcc.n	8004304 <CopyDataInit>
	ldr	r2, =_sbss
 8004316:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004318:	e002      	b.n	8004320 <LoopFillZerobss>

0800431a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800431a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800431c:	f842 3b04 	str.w	r3, [r2], #4

08004320 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <LoopForever+0x16>)
	cmp	r2, r3
 8004322:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004324:	d3f9      	bcc.n	800431a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004326:	f7ff fde9 	bl	8003efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800432a:	f000 f977 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800432e:	f7ff fb6b 	bl	8003a08 <main>

08004332 <LoopForever>:

LoopForever:
    b LoopForever
 8004332:	e7fe      	b.n	8004332 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004334:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004338:	08007aa8 	.word	0x08007aa8
	ldr	r0, =_sdata
 800433c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004340:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8004344:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8004348:	2000023c 	.word	0x2000023c

0800434c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800434c:	e7fe      	b.n	800434c <ADC1_2_IRQHandler>
	...

08004350 <hts221_read_byte>:
#include "hts221.h"

uint8_t addres = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <hts221_read_byte+0x30>)
 8004360:	7819      	ldrb	r1, [r3, #0]
 8004362:	79fa      	ldrb	r2, [r7, #7]
 8004364:	f107 000f 	add.w	r0, r7, #15
 8004368:	2300      	movs	r3, #0
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	460b      	mov	r3, r1
 800436e:	2101      	movs	r1, #1
 8004370:	f7ff f8ac 	bl	80034cc <i2c_master_read>
 8004374:	4603      	mov	r3, r0
 8004376:	781b      	ldrb	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000004 	.word	0x20000004

08004384 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	460a      	mov	r2, r1
 800438e:	71fb      	strb	r3, [r7, #7]
 8004390:	4613      	mov	r3, r2
 8004392:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <hts221_write_byte+0x28>)
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	79f9      	ldrb	r1, [r7, #7]
 800439a:	79b8      	ldrb	r0, [r7, #6]
 800439c:	2300      	movs	r3, #0
 800439e:	f7ff f851 	bl	8003444 <i2c_master_write>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000004 	.word	0x20000004

080043b0 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
 80043bc:	4613      	mov	r3, r2
 80043be:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <hts221_readArray+0x2c>)
 80043c2:	7818      	ldrb	r0, [r3, #0]
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	78b9      	ldrb	r1, [r7, #2]
 80043c8:	2301      	movs	r3, #1
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4603      	mov	r3, r0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff f87c 	bl	80034cc <i2c_master_read>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000004 	.word	0x20000004

080043e0 <hts221_get_humi>:

    return temperature;
}

int8_t hts221_get_humi()
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
    uint8_t temp[2];

    hts221_readArray(temp, HTS221_ADDRESS_HUMI_L, 2);
 80043e6:	463b      	mov	r3, r7
 80043e8:	2202      	movs	r2, #2
 80043ea:	2128      	movs	r1, #40	; 0x28
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ffdf 	bl	80043b0 <hts221_readArray>
    uint16_t tmp = ((temp[1] << 8) | temp[0]);
 80043f2:	787b      	ldrb	r3, [r7, #1]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	b21a      	sxth	r2, r3
 80043f8:	783b      	ldrb	r3, [r7, #0]
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b21b      	sxth	r3, r3
 8004400:	80fb      	strh	r3, [r7, #6]
    int8_t humi = (20*(tmp - 4000))/(2000) + 20;
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4a07      	ldr	r2, [pc, #28]	; (8004430 <hts221_get_humi+0x50>)
 8004412:	fb82 1203 	smull	r1, r2, r2, r3
 8004416:	11d2      	asrs	r2, r2, #7
 8004418:	17db      	asrs	r3, r3, #31
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	3314      	adds	r3, #20
 8004420:	b2db      	uxtb	r3, r3
 8004422:	717b      	strb	r3, [r7, #5]
    return humi;
 8004424:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	10624dd3 	.word	0x10624dd3

08004434 <hts221_init>:


uint8_t hts221_init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800443e:	2064      	movs	r0, #100	; 0x64
 8004440:	f7fd fc9e 	bl	8001d80 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8004444:	200f      	movs	r0, #15
 8004446:	f7ff ff83 	bl	8004350 <hts221_read_byte>
 800444a:	4603      	mov	r3, r0
 800444c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800444e:	79bb      	ldrb	r3, [r7, #6]
 8004450:	2bbc      	cmp	r3, #188	; 0xbc
 8004452:	d10a      	bne.n	800446a <hts221_init+0x36>
	{
		status = 1;
 8004454:	2301      	movs	r3, #1
 8004456:	71fb      	strb	r3, [r7, #7]
	{
		status = 0;
		return status;
	}

	uint8_t ctrl1 = (8 << 4) | 1;
 8004458:	2381      	movs	r3, #129	; 0x81
 800445a:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 800445c:	797b      	ldrb	r3, [r7, #5]
 800445e:	4619      	mov	r1, r3
 8004460:	2020      	movs	r0, #32
 8004462:	f7ff ff8f 	bl	8004384 <hts221_write_byte>

	return status;
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	e002      	b.n	8004470 <hts221_init+0x3c>
		status = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	71fb      	strb	r3, [r7, #7]
		return status;
 800446e:	79fb      	ldrb	r3, [r7, #7]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_press = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af02      	add	r7, sp, #8
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_press, 0));
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <lps25hb_read_byte+0x30>)
 8004488:	7819      	ldrb	r1, [r3, #0]
 800448a:	79fa      	ldrb	r2, [r7, #7]
 800448c:	f107 000f 	add.w	r0, r7, #15
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	460b      	mov	r3, r1
 8004496:	2101      	movs	r1, #1
 8004498:	f7ff f818 	bl	80034cc <i2c_master_read>
 800449c:	4603      	mov	r3, r0
 800449e:	781b      	ldrb	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000005 	.word	0x20000005

080044ac <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	460a      	mov	r2, r1
 80044b6:	71fb      	strb	r3, [r7, #7]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_press, 0);
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <lps25hb_write_byte+0x28>)
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	79f9      	ldrb	r1, [r7, #7]
 80044c2:	79b8      	ldrb	r0, [r7, #6]
 80044c4:	2300      	movs	r3, #0
 80044c6:	f7fe ffbd 	bl	8003444 <i2c_master_write>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000005 	.word	0x20000005

080044d8 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af02      	add	r7, sp, #8
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
 80044e4:	4613      	mov	r3, r2
 80044e6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_press, 1);
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <lps25hb_readArray+0x2c>)
 80044ea:	7818      	ldrb	r0, [r3, #0]
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	78b9      	ldrb	r1, [r7, #2]
 80044f0:	2301      	movs	r3, #1
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe ffe8 	bl	80034cc <i2c_master_read>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000005 	.word	0x20000005

08004508 <lps25hb_get_temp>:


float lps25hb_get_temp()
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
    uint8_t temp[2];
    lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP_L, 2);
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	2202      	movs	r2, #2
 8004512:	212b      	movs	r1, #43	; 0x2b
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ffdf 	bl	80044d8 <lps25hb_readArray>
    int16_t temperature = ((temp[1] << 8) | temp[0]);
 800451a:	797b      	ldrb	r3, [r7, #5]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	b21a      	sxth	r2, r3
 8004520:	793b      	ldrb	r3, [r7, #4]
 8004522:	b21b      	sxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]

    return (float)(42.5 + (temperature/480));
 8004528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <lps25hb_get_temp+0x60>)
 800452e:	fb82 1203 	smull	r1, r2, r2, r3
 8004532:	441a      	add	r2, r3
 8004534:	1212      	asrs	r2, r2, #8
 8004536:	17db      	asrs	r3, r3, #31
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	b21b      	sxth	r3, r3
 800453c:	4618      	mov	r0, r3
 800453e:	f7fb fff1 	bl	8000524 <__aeabi_i2d>
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <lps25hb_get_temp+0x64>)
 8004548:	f7fb fea0 	bl	800028c <__adddf3>
 800454c:	4603      	mov	r3, r0
 800454e:	460c      	mov	r4, r1
 8004550:	4618      	mov	r0, r3
 8004552:	4621      	mov	r1, r4
 8004554:	f7fc fb28 	bl	8000ba8 <__aeabi_d2f>
 8004558:	4603      	mov	r3, r0
 800455a:	ee07 3a90 	vmov	s15, r3
}
 800455e:	eeb0 0a67 	vmov.f32	s0, s15
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	88888889 	.word	0x88888889
 800456c:	40454000 	.word	0x40454000

08004570 <lps25hb_get_press>:

float lps25hb_get_press()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
	uint8_t data[3];

	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS_XL, 3);
 8004576:	463b      	mov	r3, r7
 8004578:	2203      	movs	r2, #3
 800457a:	2128      	movs	r1, #40	; 0x28
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ffab 	bl	80044d8 <lps25hb_readArray>

	uint32_t press = ((data[2] << 16) | (data[1] << 8) | data[0]);
 8004582:	78bb      	ldrb	r3, [r7, #2]
 8004584:	041a      	lsls	r2, r3, #16
 8004586:	787b      	ldrb	r3, [r7, #1]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	4313      	orrs	r3, r2
 800458c:	783a      	ldrb	r2, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	607b      	str	r3, [r7, #4]

	return (float)(press/4096);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0b1b      	lsrs	r3, r3, #12
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800459e:	eeb0 0a67 	vmov.f32	s0, s15
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80045b2:	2064      	movs	r0, #100	; 0x64
 80045b4:	f7fd fbe4 	bl	8001d80 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80045b8:	200f      	movs	r0, #15
 80045ba:	f7ff ff5d 	bl	8004478 <lps25hb_read_byte>
 80045be:	4603      	mov	r3, r0
 80045c0:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 80045c2:	79bb      	ldrb	r3, [r7, #6]
 80045c4:	2bbd      	cmp	r3, #189	; 0xbd
 80045c6:	d102      	bne.n	80045ce <lps25hb_init+0x26>
	{
		status = 1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	e011      	b.n	80045f2 <lps25hb_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		address_press = LPS25HB_DEVICE_ADDRESS_1;
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <lps25hb_init+0x64>)
 80045d0:	22ba      	movs	r2, #186	; 0xba
 80045d2:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80045d4:	200f      	movs	r0, #15
 80045d6:	f7ff ff4f 	bl	8004478 <lps25hb_read_byte>
 80045da:	4603      	mov	r3, r0
 80045dc:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 80045de:	79bb      	ldrb	r3, [r7, #6]
 80045e0:	2bbd      	cmp	r3, #189	; 0xbd
 80045e2:	d102      	bne.n	80045ea <lps25hb_init+0x42>
		{
			status = 1;
 80045e4:	2301      	movs	r3, #1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	e003      	b.n	80045f2 <lps25hb_init+0x4a>
		}
		else
		{
			status = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	71fb      	strb	r3, [r7, #7]
			return status;
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	e007      	b.n	8004602 <lps25hb_init+0x5a>
		}
	}

	//acc device init

	uint8_t ctrl1 = 9 << 4;
 80045f2:	2390      	movs	r3, #144	; 0x90
 80045f4:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 80045f6:	797b      	ldrb	r3, [r7, #5]
 80045f8:	4619      	mov	r1, r3
 80045fa:	2020      	movs	r0, #32
 80045fc:	f7ff ff56 	bl	80044ac <lps25hb_write_byte>

	return status;
 8004600:	79fb      	ldrb	r3, [r7, #7]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000005 	.word	0x20000005

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000008 	.word	0x20000008

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4e0d      	ldr	r6, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1ba4      	subs	r4, r4, r6
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2500      	movs	r5, #0
 8004628:	42a5      	cmp	r5, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4e0b      	ldr	r6, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f003 f8b4 	bl	800779c <_init>
 8004634:	1ba4      	subs	r4, r4, r6
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2500      	movs	r5, #0
 800463a:	42a5      	cmp	r5, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004644:	4798      	blx	r3
 8004646:	3501      	adds	r5, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464e:	4798      	blx	r3
 8004650:	3501      	adds	r5, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08007aa0 	.word	0x08007aa0
 8004658:	08007aa0 	.word	0x08007aa0
 800465c:	08007aa0 	.word	0x08007aa0
 8004660:	08007aa4 	.word	0x08007aa4

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <__cvt>:
 8004674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	ec55 4b10 	vmov	r4, r5, d0
 800467c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800467e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004682:	2d00      	cmp	r5, #0
 8004684:	460e      	mov	r6, r1
 8004686:	4691      	mov	r9, r2
 8004688:	4619      	mov	r1, r3
 800468a:	bfb8      	it	lt
 800468c:	4622      	movlt	r2, r4
 800468e:	462b      	mov	r3, r5
 8004690:	f027 0720 	bic.w	r7, r7, #32
 8004694:	bfbb      	ittet	lt
 8004696:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800469a:	461d      	movlt	r5, r3
 800469c:	2300      	movge	r3, #0
 800469e:	232d      	movlt	r3, #45	; 0x2d
 80046a0:	bfb8      	it	lt
 80046a2:	4614      	movlt	r4, r2
 80046a4:	2f46      	cmp	r7, #70	; 0x46
 80046a6:	700b      	strb	r3, [r1, #0]
 80046a8:	d004      	beq.n	80046b4 <__cvt+0x40>
 80046aa:	2f45      	cmp	r7, #69	; 0x45
 80046ac:	d100      	bne.n	80046b0 <__cvt+0x3c>
 80046ae:	3601      	adds	r6, #1
 80046b0:	2102      	movs	r1, #2
 80046b2:	e000      	b.n	80046b6 <__cvt+0x42>
 80046b4:	2103      	movs	r1, #3
 80046b6:	ab03      	add	r3, sp, #12
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	ab02      	add	r3, sp, #8
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4632      	mov	r2, r6
 80046c0:	4653      	mov	r3, sl
 80046c2:	ec45 4b10 	vmov	d0, r4, r5
 80046c6:	f000 fcdf 	bl	8005088 <_dtoa_r>
 80046ca:	2f47      	cmp	r7, #71	; 0x47
 80046cc:	4680      	mov	r8, r0
 80046ce:	d102      	bne.n	80046d6 <__cvt+0x62>
 80046d0:	f019 0f01 	tst.w	r9, #1
 80046d4:	d026      	beq.n	8004724 <__cvt+0xb0>
 80046d6:	2f46      	cmp	r7, #70	; 0x46
 80046d8:	eb08 0906 	add.w	r9, r8, r6
 80046dc:	d111      	bne.n	8004702 <__cvt+0x8e>
 80046de:	f898 3000 	ldrb.w	r3, [r8]
 80046e2:	2b30      	cmp	r3, #48	; 0x30
 80046e4:	d10a      	bne.n	80046fc <__cvt+0x88>
 80046e6:	2200      	movs	r2, #0
 80046e8:	2300      	movs	r3, #0
 80046ea:	4620      	mov	r0, r4
 80046ec:	4629      	mov	r1, r5
 80046ee:	f7fc f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80046f2:	b918      	cbnz	r0, 80046fc <__cvt+0x88>
 80046f4:	f1c6 0601 	rsb	r6, r6, #1
 80046f8:	f8ca 6000 	str.w	r6, [sl]
 80046fc:	f8da 3000 	ldr.w	r3, [sl]
 8004700:	4499      	add	r9, r3
 8004702:	2200      	movs	r2, #0
 8004704:	2300      	movs	r3, #0
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fc f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800470e:	b938      	cbnz	r0, 8004720 <__cvt+0xac>
 8004710:	2230      	movs	r2, #48	; 0x30
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	454b      	cmp	r3, r9
 8004716:	d205      	bcs.n	8004724 <__cvt+0xb0>
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	9103      	str	r1, [sp, #12]
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e7f8      	b.n	8004712 <__cvt+0x9e>
 8004720:	f8cd 900c 	str.w	r9, [sp, #12]
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004728:	eba3 0308 	sub.w	r3, r3, r8
 800472c:	4640      	mov	r0, r8
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	b004      	add	sp, #16
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004736 <__exponent>:
 8004736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004738:	2900      	cmp	r1, #0
 800473a:	4604      	mov	r4, r0
 800473c:	bfba      	itte	lt
 800473e:	4249      	neglt	r1, r1
 8004740:	232d      	movlt	r3, #45	; 0x2d
 8004742:	232b      	movge	r3, #43	; 0x2b
 8004744:	2909      	cmp	r1, #9
 8004746:	f804 2b02 	strb.w	r2, [r4], #2
 800474a:	7043      	strb	r3, [r0, #1]
 800474c:	dd20      	ble.n	8004790 <__exponent+0x5a>
 800474e:	f10d 0307 	add.w	r3, sp, #7
 8004752:	461f      	mov	r7, r3
 8004754:	260a      	movs	r6, #10
 8004756:	fb91 f5f6 	sdiv	r5, r1, r6
 800475a:	fb06 1115 	mls	r1, r6, r5, r1
 800475e:	3130      	adds	r1, #48	; 0x30
 8004760:	2d09      	cmp	r5, #9
 8004762:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004766:	f103 32ff 	add.w	r2, r3, #4294967295
 800476a:	4629      	mov	r1, r5
 800476c:	dc09      	bgt.n	8004782 <__exponent+0x4c>
 800476e:	3130      	adds	r1, #48	; 0x30
 8004770:	3b02      	subs	r3, #2
 8004772:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004776:	42bb      	cmp	r3, r7
 8004778:	4622      	mov	r2, r4
 800477a:	d304      	bcc.n	8004786 <__exponent+0x50>
 800477c:	1a10      	subs	r0, r2, r0
 800477e:	b003      	add	sp, #12
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	4613      	mov	r3, r2
 8004784:	e7e7      	b.n	8004756 <__exponent+0x20>
 8004786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478a:	f804 2b01 	strb.w	r2, [r4], #1
 800478e:	e7f2      	b.n	8004776 <__exponent+0x40>
 8004790:	2330      	movs	r3, #48	; 0x30
 8004792:	4419      	add	r1, r3
 8004794:	7083      	strb	r3, [r0, #2]
 8004796:	1d02      	adds	r2, r0, #4
 8004798:	70c1      	strb	r1, [r0, #3]
 800479a:	e7ef      	b.n	800477c <__exponent+0x46>

0800479c <_printf_float>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	b08d      	sub	sp, #52	; 0x34
 80047a2:	460c      	mov	r4, r1
 80047a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80047a8:	4616      	mov	r6, r2
 80047aa:	461f      	mov	r7, r3
 80047ac:	4605      	mov	r5, r0
 80047ae:	f001 fa23 	bl	8005bf8 <_localeconv_r>
 80047b2:	6803      	ldr	r3, [r0, #0]
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fd0a 	bl	80001d0 <strlen>
 80047bc:	2300      	movs	r3, #0
 80047be:	930a      	str	r3, [sp, #40]	; 0x28
 80047c0:	f8d8 3000 	ldr.w	r3, [r8]
 80047c4:	9005      	str	r0, [sp, #20]
 80047c6:	3307      	adds	r3, #7
 80047c8:	f023 0307 	bic.w	r3, r3, #7
 80047cc:	f103 0208 	add.w	r2, r3, #8
 80047d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047d4:	f8d4 b000 	ldr.w	fp, [r4]
 80047d8:	f8c8 2000 	str.w	r2, [r8]
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047ec:	9307      	str	r3, [sp, #28]
 80047ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295
 80047f6:	4ba7      	ldr	r3, [pc, #668]	; (8004a94 <_printf_float+0x2f8>)
 80047f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047fc:	f7fc f996 	bl	8000b2c <__aeabi_dcmpun>
 8004800:	bb70      	cbnz	r0, 8004860 <_printf_float+0xc4>
 8004802:	f04f 32ff 	mov.w	r2, #4294967295
 8004806:	4ba3      	ldr	r3, [pc, #652]	; (8004a94 <_printf_float+0x2f8>)
 8004808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480c:	f7fc f970 	bl	8000af0 <__aeabi_dcmple>
 8004810:	bb30      	cbnz	r0, 8004860 <_printf_float+0xc4>
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	4640      	mov	r0, r8
 8004818:	4649      	mov	r1, r9
 800481a:	f7fc f95f 	bl	8000adc <__aeabi_dcmplt>
 800481e:	b110      	cbz	r0, 8004826 <_printf_float+0x8a>
 8004820:	232d      	movs	r3, #45	; 0x2d
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004826:	4a9c      	ldr	r2, [pc, #624]	; (8004a98 <_printf_float+0x2fc>)
 8004828:	4b9c      	ldr	r3, [pc, #624]	; (8004a9c <_printf_float+0x300>)
 800482a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800482e:	bf8c      	ite	hi
 8004830:	4690      	movhi	r8, r2
 8004832:	4698      	movls	r8, r3
 8004834:	2303      	movs	r3, #3
 8004836:	f02b 0204 	bic.w	r2, fp, #4
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	f04f 0900 	mov.w	r9, #0
 8004842:	9700      	str	r7, [sp, #0]
 8004844:	4633      	mov	r3, r6
 8004846:	aa0b      	add	r2, sp, #44	; 0x2c
 8004848:	4621      	mov	r1, r4
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f9e6 	bl	8004c1c <_printf_common>
 8004850:	3001      	adds	r0, #1
 8004852:	f040 808d 	bne.w	8004970 <_printf_float+0x1d4>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	b00d      	add	sp, #52	; 0x34
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fc f960 	bl	8000b2c <__aeabi_dcmpun>
 800486c:	b110      	cbz	r0, 8004874 <_printf_float+0xd8>
 800486e:	4a8c      	ldr	r2, [pc, #560]	; (8004aa0 <_printf_float+0x304>)
 8004870:	4b8c      	ldr	r3, [pc, #560]	; (8004aa4 <_printf_float+0x308>)
 8004872:	e7da      	b.n	800482a <_printf_float+0x8e>
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	1c4b      	adds	r3, r1, #1
 8004878:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800487c:	a80a      	add	r0, sp, #40	; 0x28
 800487e:	d13e      	bne.n	80048fe <_printf_float+0x162>
 8004880:	2306      	movs	r3, #6
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	2300      	movs	r3, #0
 8004886:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800488a:	ab09      	add	r3, sp, #36	; 0x24
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	ec49 8b10 	vmov	d0, r8, r9
 8004892:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004896:	6022      	str	r2, [r4, #0]
 8004898:	f8cd a004 	str.w	sl, [sp, #4]
 800489c:	6861      	ldr	r1, [r4, #4]
 800489e:	4628      	mov	r0, r5
 80048a0:	f7ff fee8 	bl	8004674 <__cvt>
 80048a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80048a8:	2b47      	cmp	r3, #71	; 0x47
 80048aa:	4680      	mov	r8, r0
 80048ac:	d109      	bne.n	80048c2 <_printf_float+0x126>
 80048ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b0:	1cd8      	adds	r0, r3, #3
 80048b2:	db02      	blt.n	80048ba <_printf_float+0x11e>
 80048b4:	6862      	ldr	r2, [r4, #4]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	dd47      	ble.n	800494a <_printf_float+0x1ae>
 80048ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80048be:	fa5f fa8a 	uxtb.w	sl, sl
 80048c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80048c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c8:	d824      	bhi.n	8004914 <_printf_float+0x178>
 80048ca:	3901      	subs	r1, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048d2:	9109      	str	r1, [sp, #36]	; 0x24
 80048d4:	f7ff ff2f 	bl	8004736 <__exponent>
 80048d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048da:	1813      	adds	r3, r2, r0
 80048dc:	2a01      	cmp	r2, #1
 80048de:	4681      	mov	r9, r0
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	dc02      	bgt.n	80048ea <_printf_float+0x14e>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	07d1      	lsls	r1, r2, #31
 80048e8:	d501      	bpl.n	80048ee <_printf_float+0x152>
 80048ea:	3301      	adds	r3, #1
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0a5      	beq.n	8004842 <_printf_float+0xa6>
 80048f6:	232d      	movs	r3, #45	; 0x2d
 80048f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048fc:	e7a1      	b.n	8004842 <_printf_float+0xa6>
 80048fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004902:	f000 8177 	beq.w	8004bf4 <_printf_float+0x458>
 8004906:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800490a:	d1bb      	bne.n	8004884 <_printf_float+0xe8>
 800490c:	2900      	cmp	r1, #0
 800490e:	d1b9      	bne.n	8004884 <_printf_float+0xe8>
 8004910:	2301      	movs	r3, #1
 8004912:	e7b6      	b.n	8004882 <_printf_float+0xe6>
 8004914:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004918:	d119      	bne.n	800494e <_printf_float+0x1b2>
 800491a:	2900      	cmp	r1, #0
 800491c:	6863      	ldr	r3, [r4, #4]
 800491e:	dd0c      	ble.n	800493a <_printf_float+0x19e>
 8004920:	6121      	str	r1, [r4, #16]
 8004922:	b913      	cbnz	r3, 800492a <_printf_float+0x18e>
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	07d2      	lsls	r2, r2, #31
 8004928:	d502      	bpl.n	8004930 <_printf_float+0x194>
 800492a:	3301      	adds	r3, #1
 800492c:	440b      	add	r3, r1
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004932:	65a3      	str	r3, [r4, #88]	; 0x58
 8004934:	f04f 0900 	mov.w	r9, #0
 8004938:	e7d9      	b.n	80048ee <_printf_float+0x152>
 800493a:	b913      	cbnz	r3, 8004942 <_printf_float+0x1a6>
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	07d0      	lsls	r0, r2, #31
 8004940:	d501      	bpl.n	8004946 <_printf_float+0x1aa>
 8004942:	3302      	adds	r3, #2
 8004944:	e7f3      	b.n	800492e <_printf_float+0x192>
 8004946:	2301      	movs	r3, #1
 8004948:	e7f1      	b.n	800492e <_printf_float+0x192>
 800494a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800494e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004952:	4293      	cmp	r3, r2
 8004954:	db05      	blt.n	8004962 <_printf_float+0x1c6>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	07d1      	lsls	r1, r2, #31
 800495c:	d5e8      	bpl.n	8004930 <_printf_float+0x194>
 800495e:	3301      	adds	r3, #1
 8004960:	e7e5      	b.n	800492e <_printf_float+0x192>
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfd4      	ite	le
 8004966:	f1c3 0302 	rsble	r3, r3, #2
 800496a:	2301      	movgt	r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	e7de      	b.n	800492e <_printf_float+0x192>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	055a      	lsls	r2, r3, #21
 8004974:	d407      	bmi.n	8004986 <_printf_float+0x1ea>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	4642      	mov	r2, r8
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	d12b      	bne.n	80049dc <_printf_float+0x240>
 8004984:	e767      	b.n	8004856 <_printf_float+0xba>
 8004986:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800498a:	f240 80dc 	bls.w	8004b46 <_printf_float+0x3aa>
 800498e:	2200      	movs	r2, #0
 8004990:	2300      	movs	r3, #0
 8004992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004996:	f7fc f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800499a:	2800      	cmp	r0, #0
 800499c:	d033      	beq.n	8004a06 <_printf_float+0x26a>
 800499e:	2301      	movs	r3, #1
 80049a0:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <_printf_float+0x30c>)
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f af54 	beq.w	8004856 <_printf_float+0xba>
 80049ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049b2:	429a      	cmp	r2, r3
 80049b4:	db02      	blt.n	80049bc <_printf_float+0x220>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	07d8      	lsls	r0, r3, #31
 80049ba:	d50f      	bpl.n	80049dc <_printf_float+0x240>
 80049bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b8      	blx	r7
 80049c6:	3001      	adds	r0, #1
 80049c8:	f43f af45 	beq.w	8004856 <_printf_float+0xba>
 80049cc:	f04f 0800 	mov.w	r8, #0
 80049d0:	f104 091a 	add.w	r9, r4, #26
 80049d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4543      	cmp	r3, r8
 80049da:	dc09      	bgt.n	80049f0 <_printf_float+0x254>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	079b      	lsls	r3, r3, #30
 80049e0:	f100 8103 	bmi.w	8004bea <_printf_float+0x44e>
 80049e4:	68e0      	ldr	r0, [r4, #12]
 80049e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e8:	4298      	cmp	r0, r3
 80049ea:	bfb8      	it	lt
 80049ec:	4618      	movlt	r0, r3
 80049ee:	e734      	b.n	800485a <_printf_float+0xbe>
 80049f0:	2301      	movs	r3, #1
 80049f2:	464a      	mov	r2, r9
 80049f4:	4631      	mov	r1, r6
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b8      	blx	r7
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f af2b 	beq.w	8004856 <_printf_float+0xba>
 8004a00:	f108 0801 	add.w	r8, r8, #1
 8004a04:	e7e6      	b.n	80049d4 <_printf_float+0x238>
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dc2b      	bgt.n	8004a64 <_printf_float+0x2c8>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <_printf_float+0x30c>)
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af1d 	beq.w	8004856 <_printf_float+0xba>
 8004a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1e:	b923      	cbnz	r3, 8004a2a <_printf_float+0x28e>
 8004a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a22:	b913      	cbnz	r3, 8004a2a <_printf_float+0x28e>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	07d9      	lsls	r1, r3, #31
 8004a28:	d5d8      	bpl.n	80049dc <_printf_float+0x240>
 8004a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f af0e 	beq.w	8004856 <_printf_float+0xba>
 8004a3a:	f04f 0900 	mov.w	r9, #0
 8004a3e:	f104 0a1a 	add.w	sl, r4, #26
 8004a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a44:	425b      	negs	r3, r3
 8004a46:	454b      	cmp	r3, r9
 8004a48:	dc01      	bgt.n	8004a4e <_printf_float+0x2b2>
 8004a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4c:	e794      	b.n	8004978 <_printf_float+0x1dc>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4652      	mov	r2, sl
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f aefc 	beq.w	8004856 <_printf_float+0xba>
 8004a5e:	f109 0901 	add.w	r9, r9, #1
 8004a62:	e7ee      	b.n	8004a42 <_printf_float+0x2a6>
 8004a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	bfa8      	it	ge
 8004a6c:	461a      	movge	r2, r3
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	4691      	mov	r9, r2
 8004a72:	dd07      	ble.n	8004a84 <_printf_float+0x2e8>
 8004a74:	4613      	mov	r3, r2
 8004a76:	4631      	mov	r1, r6
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f43f aee9 	beq.w	8004856 <_printf_float+0xba>
 8004a84:	f104 031a 	add.w	r3, r4, #26
 8004a88:	f04f 0b00 	mov.w	fp, #0
 8004a8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a90:	9306      	str	r3, [sp, #24]
 8004a92:	e015      	b.n	8004ac0 <_printf_float+0x324>
 8004a94:	7fefffff 	.word	0x7fefffff
 8004a98:	08007801 	.word	0x08007801
 8004a9c:	080077fd 	.word	0x080077fd
 8004aa0:	08007809 	.word	0x08007809
 8004aa4:	08007805 	.word	0x08007805
 8004aa8:	0800780d 	.word	0x0800780d
 8004aac:	2301      	movs	r3, #1
 8004aae:	9a06      	ldr	r2, [sp, #24]
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f43f aecd 	beq.w	8004856 <_printf_float+0xba>
 8004abc:	f10b 0b01 	add.w	fp, fp, #1
 8004ac0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ac4:	ebaa 0309 	sub.w	r3, sl, r9
 8004ac8:	455b      	cmp	r3, fp
 8004aca:	dcef      	bgt.n	8004aac <_printf_float+0x310>
 8004acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	44d0      	add	r8, sl
 8004ad4:	db15      	blt.n	8004b02 <_printf_float+0x366>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	d412      	bmi.n	8004b02 <_printf_float+0x366>
 8004adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ae0:	eba3 020a 	sub.w	r2, r3, sl
 8004ae4:	eba3 0a01 	sub.w	sl, r3, r1
 8004ae8:	4592      	cmp	sl, r2
 8004aea:	bfa8      	it	ge
 8004aec:	4692      	movge	sl, r2
 8004aee:	f1ba 0f00 	cmp.w	sl, #0
 8004af2:	dc0e      	bgt.n	8004b12 <_printf_float+0x376>
 8004af4:	f04f 0800 	mov.w	r8, #0
 8004af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004afc:	f104 091a 	add.w	r9, r4, #26
 8004b00:	e019      	b.n	8004b36 <_printf_float+0x39a>
 8004b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d1e5      	bne.n	8004adc <_printf_float+0x340>
 8004b10:	e6a1      	b.n	8004856 <_printf_float+0xba>
 8004b12:	4653      	mov	r3, sl
 8004b14:	4642      	mov	r2, r8
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b8      	blx	r7
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d1e9      	bne.n	8004af4 <_printf_float+0x358>
 8004b20:	e699      	b.n	8004856 <_printf_float+0xba>
 8004b22:	2301      	movs	r3, #1
 8004b24:	464a      	mov	r2, r9
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f ae92 	beq.w	8004856 <_printf_float+0xba>
 8004b32:	f108 0801 	add.w	r8, r8, #1
 8004b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	eba3 030a 	sub.w	r3, r3, sl
 8004b40:	4543      	cmp	r3, r8
 8004b42:	dcee      	bgt.n	8004b22 <_printf_float+0x386>
 8004b44:	e74a      	b.n	80049dc <_printf_float+0x240>
 8004b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b48:	2a01      	cmp	r2, #1
 8004b4a:	dc01      	bgt.n	8004b50 <_printf_float+0x3b4>
 8004b4c:	07db      	lsls	r3, r3, #31
 8004b4e:	d53a      	bpl.n	8004bc6 <_printf_float+0x42a>
 8004b50:	2301      	movs	r3, #1
 8004b52:	4642      	mov	r2, r8
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f ae7b 	beq.w	8004856 <_printf_float+0xba>
 8004b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b64:	4631      	mov	r1, r6
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f108 0801 	add.w	r8, r8, #1
 8004b70:	f43f ae71 	beq.w	8004856 <_printf_float+0xba>
 8004b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b76:	2200      	movs	r2, #0
 8004b78:	f103 3aff 	add.w	sl, r3, #4294967295
 8004b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b80:	2300      	movs	r3, #0
 8004b82:	f7fb ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b86:	b9c8      	cbnz	r0, 8004bbc <_printf_float+0x420>
 8004b88:	4653      	mov	r3, sl
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	d10e      	bne.n	8004bb4 <_printf_float+0x418>
 8004b96:	e65e      	b.n	8004856 <_printf_float+0xba>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f43f ae57 	beq.w	8004856 <_printf_float+0xba>
 8004ba8:	f108 0801 	add.w	r8, r8, #1
 8004bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4543      	cmp	r3, r8
 8004bb2:	dcf1      	bgt.n	8004b98 <_printf_float+0x3fc>
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bba:	e6de      	b.n	800497a <_printf_float+0x1de>
 8004bbc:	f04f 0800 	mov.w	r8, #0
 8004bc0:	f104 0a1a 	add.w	sl, r4, #26
 8004bc4:	e7f2      	b.n	8004bac <_printf_float+0x410>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e7df      	b.n	8004b8a <_printf_float+0x3ee>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f ae3e 	beq.w	8004856 <_printf_float+0xba>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	4543      	cmp	r3, r8
 8004be6:	dcf0      	bgt.n	8004bca <_printf_float+0x42e>
 8004be8:	e6fc      	b.n	80049e4 <_printf_float+0x248>
 8004bea:	f04f 0800 	mov.w	r8, #0
 8004bee:	f104 0919 	add.w	r9, r4, #25
 8004bf2:	e7f4      	b.n	8004bde <_printf_float+0x442>
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	f43f ae8b 	beq.w	8004910 <_printf_float+0x174>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c00:	ab09      	add	r3, sp, #36	; 0x24
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	ec49 8b10 	vmov	d0, r8, r9
 8004c08:	6022      	str	r2, [r4, #0]
 8004c0a:	f8cd a004 	str.w	sl, [sp, #4]
 8004c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7ff fd2e 	bl	8004674 <__cvt>
 8004c18:	4680      	mov	r8, r0
 8004c1a:	e648      	b.n	80048ae <_printf_float+0x112>

08004c1c <_printf_common>:
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	4691      	mov	r9, r2
 8004c22:	461f      	mov	r7, r3
 8004c24:	688a      	ldr	r2, [r1, #8]
 8004c26:	690b      	ldr	r3, [r1, #16]
 8004c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bfb8      	it	lt
 8004c30:	4613      	movlt	r3, r2
 8004c32:	f8c9 3000 	str.w	r3, [r9]
 8004c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	b112      	cbz	r2, 8004c46 <_printf_common+0x2a>
 8004c40:	3301      	adds	r3, #1
 8004c42:	f8c9 3000 	str.w	r3, [r9]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c50:	3302      	addmi	r3, #2
 8004c52:	f8c9 3000 	strmi.w	r3, [r9]
 8004c56:	6825      	ldr	r5, [r4, #0]
 8004c58:	f015 0506 	ands.w	r5, r5, #6
 8004c5c:	d107      	bne.n	8004c6e <_printf_common+0x52>
 8004c5e:	f104 0a19 	add.w	sl, r4, #25
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	f8d9 2000 	ldr.w	r2, [r9]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	42ab      	cmp	r3, r5
 8004c6c:	dc28      	bgt.n	8004cc0 <_printf_common+0xa4>
 8004c6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	3300      	adds	r3, #0
 8004c76:	bf18      	it	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	0692      	lsls	r2, r2, #26
 8004c7c:	d42d      	bmi.n	8004cda <_printf_common+0xbe>
 8004c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c82:	4639      	mov	r1, r7
 8004c84:	4630      	mov	r0, r6
 8004c86:	47c0      	blx	r8
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d020      	beq.n	8004cce <_printf_common+0xb2>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	68e5      	ldr	r5, [r4, #12]
 8004c90:	f8d9 2000 	ldr.w	r2, [r9]
 8004c94:	f003 0306 	and.w	r3, r3, #6
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	bf08      	it	eq
 8004c9c:	1aad      	subeq	r5, r5, r2
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	bf0c      	ite	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	2500      	movne	r5, #0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bfc4      	itt	gt
 8004cae:	1a9b      	subgt	r3, r3, r2
 8004cb0:	18ed      	addgt	r5, r5, r3
 8004cb2:	f04f 0900 	mov.w	r9, #0
 8004cb6:	341a      	adds	r4, #26
 8004cb8:	454d      	cmp	r5, r9
 8004cba:	d11a      	bne.n	8004cf2 <_printf_common+0xd6>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e008      	b.n	8004cd2 <_printf_common+0xb6>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d103      	bne.n	8004cd6 <_printf_common+0xba>
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7c3      	b.n	8004c62 <_printf_common+0x46>
 8004cda:	18e1      	adds	r1, r4, r3
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	2030      	movs	r0, #48	; 0x30
 8004ce0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ce4:	4422      	add	r2, r4
 8004ce6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cee:	3302      	adds	r3, #2
 8004cf0:	e7c5      	b.n	8004c7e <_printf_common+0x62>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0e6      	beq.n	8004cce <_printf_common+0xb2>
 8004d00:	f109 0901 	add.w	r9, r9, #1
 8004d04:	e7d8      	b.n	8004cb8 <_printf_common+0x9c>
	...

08004d08 <_printf_i>:
 8004d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d10:	460c      	mov	r4, r1
 8004d12:	7e09      	ldrb	r1, [r1, #24]
 8004d14:	b085      	sub	sp, #20
 8004d16:	296e      	cmp	r1, #110	; 0x6e
 8004d18:	4617      	mov	r7, r2
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d20:	f000 80b3 	beq.w	8004e8a <_printf_i+0x182>
 8004d24:	d822      	bhi.n	8004d6c <_printf_i+0x64>
 8004d26:	2963      	cmp	r1, #99	; 0x63
 8004d28:	d036      	beq.n	8004d98 <_printf_i+0x90>
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x3a>
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	f000 80b9 	beq.w	8004ea4 <_printf_i+0x19c>
 8004d32:	2958      	cmp	r1, #88	; 0x58
 8004d34:	f000 8083 	beq.w	8004e3e <_printf_i+0x136>
 8004d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d40:	e032      	b.n	8004da8 <_printf_i+0xa0>
 8004d42:	2964      	cmp	r1, #100	; 0x64
 8004d44:	d001      	beq.n	8004d4a <_printf_i+0x42>
 8004d46:	2969      	cmp	r1, #105	; 0x69
 8004d48:	d1f6      	bne.n	8004d38 <_printf_i+0x30>
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	0605      	lsls	r5, r0, #24
 8004d50:	f103 0104 	add.w	r1, r3, #4
 8004d54:	d52a      	bpl.n	8004dac <_printf_i+0xa4>
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da03      	bge.n	8004d66 <_printf_i+0x5e>
 8004d5e:	222d      	movs	r2, #45	; 0x2d
 8004d60:	425b      	negs	r3, r3
 8004d62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d66:	486f      	ldr	r0, [pc, #444]	; (8004f24 <_printf_i+0x21c>)
 8004d68:	220a      	movs	r2, #10
 8004d6a:	e039      	b.n	8004de0 <_printf_i+0xd8>
 8004d6c:	2973      	cmp	r1, #115	; 0x73
 8004d6e:	f000 809d 	beq.w	8004eac <_printf_i+0x1a4>
 8004d72:	d808      	bhi.n	8004d86 <_printf_i+0x7e>
 8004d74:	296f      	cmp	r1, #111	; 0x6f
 8004d76:	d020      	beq.n	8004dba <_printf_i+0xb2>
 8004d78:	2970      	cmp	r1, #112	; 0x70
 8004d7a:	d1dd      	bne.n	8004d38 <_printf_i+0x30>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f043 0320 	orr.w	r3, r3, #32
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	e003      	b.n	8004d8e <_printf_i+0x86>
 8004d86:	2975      	cmp	r1, #117	; 0x75
 8004d88:	d017      	beq.n	8004dba <_printf_i+0xb2>
 8004d8a:	2978      	cmp	r1, #120	; 0x78
 8004d8c:	d1d4      	bne.n	8004d38 <_printf_i+0x30>
 8004d8e:	2378      	movs	r3, #120	; 0x78
 8004d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d94:	4864      	ldr	r0, [pc, #400]	; (8004f28 <_printf_i+0x220>)
 8004d96:	e055      	b.n	8004e44 <_printf_i+0x13c>
 8004d98:	6813      	ldr	r3, [r2, #0]
 8004d9a:	1d19      	adds	r1, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da8:	2301      	movs	r3, #1
 8004daa:	e08c      	b.n	8004ec6 <_printf_i+0x1be>
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6011      	str	r1, [r2, #0]
 8004db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004db4:	bf18      	it	ne
 8004db6:	b21b      	sxthne	r3, r3
 8004db8:	e7cf      	b.n	8004d5a <_printf_i+0x52>
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1d18      	adds	r0, r3, #4
 8004dc0:	6010      	str	r0, [r2, #0]
 8004dc2:	0628      	lsls	r0, r5, #24
 8004dc4:	d501      	bpl.n	8004dca <_printf_i+0xc2>
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	e002      	b.n	8004dd0 <_printf_i+0xc8>
 8004dca:	0668      	lsls	r0, r5, #25
 8004dcc:	d5fb      	bpl.n	8004dc6 <_printf_i+0xbe>
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	4854      	ldr	r0, [pc, #336]	; (8004f24 <_printf_i+0x21c>)
 8004dd2:	296f      	cmp	r1, #111	; 0x6f
 8004dd4:	bf14      	ite	ne
 8004dd6:	220a      	movne	r2, #10
 8004dd8:	2208      	moveq	r2, #8
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de0:	6865      	ldr	r5, [r4, #4]
 8004de2:	60a5      	str	r5, [r4, #8]
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	f2c0 8095 	blt.w	8004f14 <_printf_i+0x20c>
 8004dea:	6821      	ldr	r1, [r4, #0]
 8004dec:	f021 0104 	bic.w	r1, r1, #4
 8004df0:	6021      	str	r1, [r4, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13d      	bne.n	8004e72 <_printf_i+0x16a>
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	f040 808e 	bne.w	8004f18 <_printf_i+0x210>
 8004dfc:	4665      	mov	r5, ip
 8004dfe:	2a08      	cmp	r2, #8
 8004e00:	d10b      	bne.n	8004e1a <_printf_i+0x112>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	07db      	lsls	r3, r3, #31
 8004e06:	d508      	bpl.n	8004e1a <_printf_i+0x112>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	bfde      	ittt	le
 8004e10:	2330      	movle	r3, #48	; 0x30
 8004e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e1a:	ebac 0305 	sub.w	r3, ip, r5
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	f8cd 8000 	str.w	r8, [sp]
 8004e24:	463b      	mov	r3, r7
 8004e26:	aa03      	add	r2, sp, #12
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff fef6 	bl	8004c1c <_printf_common>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d14d      	bne.n	8004ed0 <_printf_i+0x1c8>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b005      	add	sp, #20
 8004e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	4839      	ldr	r0, [pc, #228]	; (8004f24 <_printf_i+0x21c>)
 8004e40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e44:	6813      	ldr	r3, [r2, #0]
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	1d1d      	adds	r5, r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6015      	str	r5, [r2, #0]
 8004e4e:	060a      	lsls	r2, r1, #24
 8004e50:	d50b      	bpl.n	8004e6a <_printf_i+0x162>
 8004e52:	07ca      	lsls	r2, r1, #31
 8004e54:	bf44      	itt	mi
 8004e56:	f041 0120 	orrmi.w	r1, r1, #32
 8004e5a:	6021      	strmi	r1, [r4, #0]
 8004e5c:	b91b      	cbnz	r3, 8004e66 <_printf_i+0x15e>
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	f022 0220 	bic.w	r2, r2, #32
 8004e64:	6022      	str	r2, [r4, #0]
 8004e66:	2210      	movs	r2, #16
 8004e68:	e7b7      	b.n	8004dda <_printf_i+0xd2>
 8004e6a:	064d      	lsls	r5, r1, #25
 8004e6c:	bf48      	it	mi
 8004e6e:	b29b      	uxthmi	r3, r3
 8004e70:	e7ef      	b.n	8004e52 <_printf_i+0x14a>
 8004e72:	4665      	mov	r5, ip
 8004e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e78:	fb02 3311 	mls	r3, r2, r1, r3
 8004e7c:	5cc3      	ldrb	r3, [r0, r3]
 8004e7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e82:	460b      	mov	r3, r1
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d1f5      	bne.n	8004e74 <_printf_i+0x16c>
 8004e88:	e7b9      	b.n	8004dfe <_printf_i+0xf6>
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	6961      	ldr	r1, [r4, #20]
 8004e90:	1d18      	adds	r0, r3, #4
 8004e92:	6010      	str	r0, [r2, #0]
 8004e94:	0628      	lsls	r0, r5, #24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	d501      	bpl.n	8004e9e <_printf_i+0x196>
 8004e9a:	6019      	str	r1, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <_printf_i+0x19c>
 8004e9e:	066a      	lsls	r2, r5, #25
 8004ea0:	d5fb      	bpl.n	8004e9a <_printf_i+0x192>
 8004ea2:	8019      	strh	r1, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	4665      	mov	r5, ip
 8004eaa:	e7b9      	b.n	8004e20 <_printf_i+0x118>
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	1d19      	adds	r1, r3, #4
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	681d      	ldr	r5, [r3, #0]
 8004eb4:	6862      	ldr	r2, [r4, #4]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f7fb f991 	bl	80001e0 <memchr>
 8004ebe:	b108      	cbz	r0, 8004ec4 <_printf_i+0x1bc>
 8004ec0:	1b40      	subs	r0, r0, r5
 8004ec2:	6060      	str	r0, [r4, #4]
 8004ec4:	6863      	ldr	r3, [r4, #4]
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ece:	e7a7      	b.n	8004e20 <_printf_i+0x118>
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	47c0      	blx	r8
 8004eda:	3001      	adds	r0, #1
 8004edc:	d0aa      	beq.n	8004e34 <_printf_i+0x12c>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	079b      	lsls	r3, r3, #30
 8004ee2:	d413      	bmi.n	8004f0c <_printf_i+0x204>
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	4298      	cmp	r0, r3
 8004eea:	bfb8      	it	lt
 8004eec:	4618      	movlt	r0, r3
 8004eee:	e7a3      	b.n	8004e38 <_printf_i+0x130>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	464a      	mov	r2, r9
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d09a      	beq.n	8004e34 <_printf_i+0x12c>
 8004efe:	3501      	adds	r5, #1
 8004f00:	68e3      	ldr	r3, [r4, #12]
 8004f02:	9a03      	ldr	r2, [sp, #12]
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	42ab      	cmp	r3, r5
 8004f08:	dcf2      	bgt.n	8004ef0 <_printf_i+0x1e8>
 8004f0a:	e7eb      	b.n	8004ee4 <_printf_i+0x1dc>
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f5      	b.n	8004f00 <_printf_i+0x1f8>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ac      	bne.n	8004e72 <_printf_i+0x16a>
 8004f18:	7803      	ldrb	r3, [r0, #0]
 8004f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f22:	e76c      	b.n	8004dfe <_printf_i+0xf6>
 8004f24:	0800780f 	.word	0x0800780f
 8004f28:	08007820 	.word	0x08007820

08004f2c <siprintf>:
 8004f2c:	b40e      	push	{r1, r2, r3}
 8004f2e:	b500      	push	{lr}
 8004f30:	b09c      	sub	sp, #112	; 0x70
 8004f32:	ab1d      	add	r3, sp, #116	; 0x74
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9006      	str	r0, [sp, #24]
 8004f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f3c:	4809      	ldr	r0, [pc, #36]	; (8004f64 <siprintf+0x38>)
 8004f3e:	9107      	str	r1, [sp, #28]
 8004f40:	9104      	str	r1, [sp, #16]
 8004f42:	4909      	ldr	r1, [pc, #36]	; (8004f68 <siprintf+0x3c>)
 8004f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f48:	9105      	str	r1, [sp, #20]
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	a902      	add	r1, sp, #8
 8004f50:	f001 fa5e 	bl	8006410 <_svfiprintf_r>
 8004f54:	9b02      	ldr	r3, [sp, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	b01c      	add	sp, #112	; 0x70
 8004f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f60:	b003      	add	sp, #12
 8004f62:	4770      	bx	lr
 8004f64:	20000008 	.word	0x20000008
 8004f68:	ffff0208 	.word	0xffff0208

08004f6c <quorem>:
 8004f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	6903      	ldr	r3, [r0, #16]
 8004f72:	690c      	ldr	r4, [r1, #16]
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	4680      	mov	r8, r0
 8004f78:	f2c0 8082 	blt.w	8005080 <quorem+0x114>
 8004f7c:	3c01      	subs	r4, #1
 8004f7e:	f101 0714 	add.w	r7, r1, #20
 8004f82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f86:	f100 0614 	add.w	r6, r0, #20
 8004f8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004f8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004f92:	eb06 030c 	add.w	r3, r6, ip
 8004f96:	3501      	adds	r5, #1
 8004f98:	eb07 090c 	add.w	r9, r7, ip
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004fa2:	b395      	cbz	r5, 800500a <quorem+0x9e>
 8004fa4:	f04f 0a00 	mov.w	sl, #0
 8004fa8:	4638      	mov	r0, r7
 8004faa:	46b6      	mov	lr, r6
 8004fac:	46d3      	mov	fp, sl
 8004fae:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fb2:	b293      	uxth	r3, r2
 8004fb4:	fb05 a303 	mla	r3, r5, r3, sl
 8004fb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	ebab 0303 	sub.w	r3, fp, r3
 8004fc2:	0c12      	lsrs	r2, r2, #16
 8004fc4:	f8de b000 	ldr.w	fp, [lr]
 8004fc8:	fb05 a202 	mla	r2, r5, r2, sl
 8004fcc:	fa13 f38b 	uxtah	r3, r3, fp
 8004fd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004fd4:	fa1f fb82 	uxth.w	fp, r2
 8004fd8:	f8de 2000 	ldr.w	r2, [lr]
 8004fdc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fea:	4581      	cmp	r9, r0
 8004fec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ff0:	f84e 3b04 	str.w	r3, [lr], #4
 8004ff4:	d2db      	bcs.n	8004fae <quorem+0x42>
 8004ff6:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ffa:	b933      	cbnz	r3, 800500a <quorem+0x9e>
 8004ffc:	9b01      	ldr	r3, [sp, #4]
 8004ffe:	3b04      	subs	r3, #4
 8005000:	429e      	cmp	r6, r3
 8005002:	461a      	mov	r2, r3
 8005004:	d330      	bcc.n	8005068 <quorem+0xfc>
 8005006:	f8c8 4010 	str.w	r4, [r8, #16]
 800500a:	4640      	mov	r0, r8
 800500c:	f001 f82a 	bl	8006064 <__mcmp>
 8005010:	2800      	cmp	r0, #0
 8005012:	db25      	blt.n	8005060 <quorem+0xf4>
 8005014:	3501      	adds	r5, #1
 8005016:	4630      	mov	r0, r6
 8005018:	f04f 0c00 	mov.w	ip, #0
 800501c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005020:	f8d0 e000 	ldr.w	lr, [r0]
 8005024:	b293      	uxth	r3, r2
 8005026:	ebac 0303 	sub.w	r3, ip, r3
 800502a:	0c12      	lsrs	r2, r2, #16
 800502c:	fa13 f38e 	uxtah	r3, r3, lr
 8005030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005038:	b29b      	uxth	r3, r3
 800503a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800503e:	45b9      	cmp	r9, r7
 8005040:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005044:	f840 3b04 	str.w	r3, [r0], #4
 8005048:	d2e8      	bcs.n	800501c <quorem+0xb0>
 800504a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800504e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005052:	b92a      	cbnz	r2, 8005060 <quorem+0xf4>
 8005054:	3b04      	subs	r3, #4
 8005056:	429e      	cmp	r6, r3
 8005058:	461a      	mov	r2, r3
 800505a:	d30b      	bcc.n	8005074 <quorem+0x108>
 800505c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005060:	4628      	mov	r0, r5
 8005062:	b003      	add	sp, #12
 8005064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	3b04      	subs	r3, #4
 800506c:	2a00      	cmp	r2, #0
 800506e:	d1ca      	bne.n	8005006 <quorem+0x9a>
 8005070:	3c01      	subs	r4, #1
 8005072:	e7c5      	b.n	8005000 <quorem+0x94>
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	3b04      	subs	r3, #4
 8005078:	2a00      	cmp	r2, #0
 800507a:	d1ef      	bne.n	800505c <quorem+0xf0>
 800507c:	3c01      	subs	r4, #1
 800507e:	e7ea      	b.n	8005056 <quorem+0xea>
 8005080:	2000      	movs	r0, #0
 8005082:	e7ee      	b.n	8005062 <quorem+0xf6>
 8005084:	0000      	movs	r0, r0
	...

08005088 <_dtoa_r>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	ec57 6b10 	vmov	r6, r7, d0
 8005090:	b097      	sub	sp, #92	; 0x5c
 8005092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005094:	9106      	str	r1, [sp, #24]
 8005096:	4604      	mov	r4, r0
 8005098:	920b      	str	r2, [sp, #44]	; 0x2c
 800509a:	9312      	str	r3, [sp, #72]	; 0x48
 800509c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050a0:	e9cd 6700 	strd	r6, r7, [sp]
 80050a4:	b93d      	cbnz	r5, 80050b6 <_dtoa_r+0x2e>
 80050a6:	2010      	movs	r0, #16
 80050a8:	f000 fdb4 	bl	8005c14 <malloc>
 80050ac:	6260      	str	r0, [r4, #36]	; 0x24
 80050ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050b2:	6005      	str	r5, [r0, #0]
 80050b4:	60c5      	str	r5, [r0, #12]
 80050b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	b151      	cbz	r1, 80050d2 <_dtoa_r+0x4a>
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	604a      	str	r2, [r1, #4]
 80050c0:	2301      	movs	r3, #1
 80050c2:	4093      	lsls	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 fdeb 	bl	8005ca2 <_Bfree>
 80050cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	1e3b      	subs	r3, r7, #0
 80050d4:	bfbb      	ittet	lt
 80050d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050da:	9301      	strlt	r3, [sp, #4]
 80050dc:	2300      	movge	r3, #0
 80050de:	2201      	movlt	r2, #1
 80050e0:	bfac      	ite	ge
 80050e2:	f8c8 3000 	strge.w	r3, [r8]
 80050e6:	f8c8 2000 	strlt.w	r2, [r8]
 80050ea:	4baf      	ldr	r3, [pc, #700]	; (80053a8 <_dtoa_r+0x320>)
 80050ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050f0:	ea33 0308 	bics.w	r3, r3, r8
 80050f4:	d114      	bne.n	8005120 <_dtoa_r+0x98>
 80050f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	9b00      	ldr	r3, [sp, #0]
 8005100:	b923      	cbnz	r3, 800510c <_dtoa_r+0x84>
 8005102:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005106:	2800      	cmp	r0, #0
 8005108:	f000 8542 	beq.w	8005b90 <_dtoa_r+0xb08>
 800510c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800510e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80053bc <_dtoa_r+0x334>
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8544 	beq.w	8005ba0 <_dtoa_r+0xb18>
 8005118:	f10b 0303 	add.w	r3, fp, #3
 800511c:	f000 bd3e 	b.w	8005b9c <_dtoa_r+0xb14>
 8005120:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005130:	4681      	mov	r9, r0
 8005132:	b168      	cbz	r0, 8005150 <_dtoa_r+0xc8>
 8005134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005136:	2301      	movs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8524 	beq.w	8005b8a <_dtoa_r+0xb02>
 8005142:	4b9a      	ldr	r3, [pc, #616]	; (80053ac <_dtoa_r+0x324>)
 8005144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005146:	f103 3bff 	add.w	fp, r3, #4294967295
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	f000 bd28 	b.w	8005ba0 <_dtoa_r+0xb18>
 8005150:	aa14      	add	r2, sp, #80	; 0x50
 8005152:	a915      	add	r1, sp, #84	; 0x54
 8005154:	ec47 6b10 	vmov	d0, r6, r7
 8005158:	4620      	mov	r0, r4
 800515a:	f000 fffa 	bl	8006152 <__d2b>
 800515e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005162:	9004      	str	r0, [sp, #16]
 8005164:	2d00      	cmp	r5, #0
 8005166:	d07c      	beq.n	8005262 <_dtoa_r+0x1da>
 8005168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800516c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005170:	46b2      	mov	sl, r6
 8005172:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800517a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800517e:	2200      	movs	r2, #0
 8005180:	4b8b      	ldr	r3, [pc, #556]	; (80053b0 <_dtoa_r+0x328>)
 8005182:	4650      	mov	r0, sl
 8005184:	4659      	mov	r1, fp
 8005186:	f7fb f87f 	bl	8000288 <__aeabi_dsub>
 800518a:	a381      	add	r3, pc, #516	; (adr r3, 8005390 <_dtoa_r+0x308>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	a380      	add	r3, pc, #512	; (adr r3, 8005398 <_dtoa_r+0x310>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fb f877 	bl	800028c <__adddf3>
 800519e:	4606      	mov	r6, r0
 80051a0:	4628      	mov	r0, r5
 80051a2:	460f      	mov	r7, r1
 80051a4:	f7fb f9be 	bl	8000524 <__aeabi_i2d>
 80051a8:	a37d      	add	r3, pc, #500	; (adr r3, 80053a0 <_dtoa_r+0x318>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fa23 	bl	80005f8 <__aeabi_dmul>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4630      	mov	r0, r6
 80051b8:	4639      	mov	r1, r7
 80051ba:	f7fb f867 	bl	800028c <__adddf3>
 80051be:	4606      	mov	r6, r0
 80051c0:	460f      	mov	r7, r1
 80051c2:	f7fb fcc9 	bl	8000b58 <__aeabi_d2iz>
 80051c6:	2200      	movs	r2, #0
 80051c8:	4682      	mov	sl, r0
 80051ca:	2300      	movs	r3, #0
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb fc84 	bl	8000adc <__aeabi_dcmplt>
 80051d4:	b148      	cbz	r0, 80051ea <_dtoa_r+0x162>
 80051d6:	4650      	mov	r0, sl
 80051d8:	f7fb f9a4 	bl	8000524 <__aeabi_i2d>
 80051dc:	4632      	mov	r2, r6
 80051de:	463b      	mov	r3, r7
 80051e0:	f7fb fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80051e4:	b908      	cbnz	r0, 80051ea <_dtoa_r+0x162>
 80051e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ea:	f1ba 0f16 	cmp.w	sl, #22
 80051ee:	d859      	bhi.n	80052a4 <_dtoa_r+0x21c>
 80051f0:	4970      	ldr	r1, [pc, #448]	; (80053b4 <_dtoa_r+0x32c>)
 80051f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80051f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051fe:	f7fb fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8005202:	2800      	cmp	r0, #0
 8005204:	d050      	beq.n	80052a8 <_dtoa_r+0x220>
 8005206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800520a:	2300      	movs	r3, #0
 800520c:	930f      	str	r3, [sp, #60]	; 0x3c
 800520e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005210:	1b5d      	subs	r5, r3, r5
 8005212:	f1b5 0801 	subs.w	r8, r5, #1
 8005216:	bf49      	itett	mi
 8005218:	f1c5 0301 	rsbmi	r3, r5, #1
 800521c:	2300      	movpl	r3, #0
 800521e:	9305      	strmi	r3, [sp, #20]
 8005220:	f04f 0800 	movmi.w	r8, #0
 8005224:	bf58      	it	pl
 8005226:	9305      	strpl	r3, [sp, #20]
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	db3e      	blt.n	80052ac <_dtoa_r+0x224>
 800522e:	2300      	movs	r3, #0
 8005230:	44d0      	add	r8, sl
 8005232:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005236:	9307      	str	r3, [sp, #28]
 8005238:	9b06      	ldr	r3, [sp, #24]
 800523a:	2b09      	cmp	r3, #9
 800523c:	f200 8090 	bhi.w	8005360 <_dtoa_r+0x2d8>
 8005240:	2b05      	cmp	r3, #5
 8005242:	bfc4      	itt	gt
 8005244:	3b04      	subgt	r3, #4
 8005246:	9306      	strgt	r3, [sp, #24]
 8005248:	9b06      	ldr	r3, [sp, #24]
 800524a:	f1a3 0302 	sub.w	r3, r3, #2
 800524e:	bfcc      	ite	gt
 8005250:	2500      	movgt	r5, #0
 8005252:	2501      	movle	r5, #1
 8005254:	2b03      	cmp	r3, #3
 8005256:	f200 808f 	bhi.w	8005378 <_dtoa_r+0x2f0>
 800525a:	e8df f003 	tbb	[pc, r3]
 800525e:	7f7d      	.short	0x7f7d
 8005260:	7131      	.short	0x7131
 8005262:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005266:	441d      	add	r5, r3
 8005268:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800526c:	2820      	cmp	r0, #32
 800526e:	dd13      	ble.n	8005298 <_dtoa_r+0x210>
 8005270:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005274:	9b00      	ldr	r3, [sp, #0]
 8005276:	fa08 f800 	lsl.w	r8, r8, r0
 800527a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800527e:	fa23 f000 	lsr.w	r0, r3, r0
 8005282:	ea48 0000 	orr.w	r0, r8, r0
 8005286:	f7fb f93d 	bl	8000504 <__aeabi_ui2d>
 800528a:	2301      	movs	r3, #1
 800528c:	4682      	mov	sl, r0
 800528e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005292:	3d01      	subs	r5, #1
 8005294:	9313      	str	r3, [sp, #76]	; 0x4c
 8005296:	e772      	b.n	800517e <_dtoa_r+0xf6>
 8005298:	9b00      	ldr	r3, [sp, #0]
 800529a:	f1c0 0020 	rsb	r0, r0, #32
 800529e:	fa03 f000 	lsl.w	r0, r3, r0
 80052a2:	e7f0      	b.n	8005286 <_dtoa_r+0x1fe>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e7b1      	b.n	800520c <_dtoa_r+0x184>
 80052a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80052aa:	e7b0      	b.n	800520e <_dtoa_r+0x186>
 80052ac:	9b05      	ldr	r3, [sp, #20]
 80052ae:	eba3 030a 	sub.w	r3, r3, sl
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	f1ca 0300 	rsb	r3, sl, #0
 80052b8:	9307      	str	r3, [sp, #28]
 80052ba:	2300      	movs	r3, #0
 80052bc:	930e      	str	r3, [sp, #56]	; 0x38
 80052be:	e7bb      	b.n	8005238 <_dtoa_r+0x1b0>
 80052c0:	2301      	movs	r3, #1
 80052c2:	930a      	str	r3, [sp, #40]	; 0x28
 80052c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dd59      	ble.n	800537e <_dtoa_r+0x2f6>
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	4699      	mov	r9, r3
 80052ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80052d0:	2200      	movs	r2, #0
 80052d2:	6072      	str	r2, [r6, #4]
 80052d4:	2204      	movs	r2, #4
 80052d6:	f102 0014 	add.w	r0, r2, #20
 80052da:	4298      	cmp	r0, r3
 80052dc:	6871      	ldr	r1, [r6, #4]
 80052de:	d953      	bls.n	8005388 <_dtoa_r+0x300>
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fcaa 	bl	8005c3a <_Balloc>
 80052e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052e8:	6030      	str	r0, [r6, #0]
 80052ea:	f1b9 0f0e 	cmp.w	r9, #14
 80052ee:	f8d3 b000 	ldr.w	fp, [r3]
 80052f2:	f200 80e6 	bhi.w	80054c2 <_dtoa_r+0x43a>
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	f000 80e3 	beq.w	80054c2 <_dtoa_r+0x43a>
 80052fc:	ed9d 7b00 	vldr	d7, [sp]
 8005300:	f1ba 0f00 	cmp.w	sl, #0
 8005304:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005308:	dd74      	ble.n	80053f4 <_dtoa_r+0x36c>
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <_dtoa_r+0x32c>)
 800530c:	f00a 030f 	and.w	r3, sl, #15
 8005310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005314:	ed93 7b00 	vldr	d7, [r3]
 8005318:	ea4f 162a 	mov.w	r6, sl, asr #4
 800531c:	06f0      	lsls	r0, r6, #27
 800531e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005322:	d565      	bpl.n	80053f0 <_dtoa_r+0x368>
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <_dtoa_r+0x330>)
 8005326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800532a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800532e:	f7fb fa8d 	bl	800084c <__aeabi_ddiv>
 8005332:	e9cd 0100 	strd	r0, r1, [sp]
 8005336:	f006 060f 	and.w	r6, r6, #15
 800533a:	2503      	movs	r5, #3
 800533c:	4f1e      	ldr	r7, [pc, #120]	; (80053b8 <_dtoa_r+0x330>)
 800533e:	e04c      	b.n	80053da <_dtoa_r+0x352>
 8005340:	2301      	movs	r3, #1
 8005342:	930a      	str	r3, [sp, #40]	; 0x28
 8005344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005346:	4453      	add	r3, sl
 8005348:	f103 0901 	add.w	r9, r3, #1
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	464b      	mov	r3, r9
 8005350:	2b01      	cmp	r3, #1
 8005352:	bfb8      	it	lt
 8005354:	2301      	movlt	r3, #1
 8005356:	e7ba      	b.n	80052ce <_dtoa_r+0x246>
 8005358:	2300      	movs	r3, #0
 800535a:	e7b2      	b.n	80052c2 <_dtoa_r+0x23a>
 800535c:	2300      	movs	r3, #0
 800535e:	e7f0      	b.n	8005342 <_dtoa_r+0x2ba>
 8005360:	2501      	movs	r5, #1
 8005362:	2300      	movs	r3, #0
 8005364:	9306      	str	r3, [sp, #24]
 8005366:	950a      	str	r5, [sp, #40]	; 0x28
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	4699      	mov	r9, r3
 8005370:	2200      	movs	r2, #0
 8005372:	2312      	movs	r3, #18
 8005374:	920b      	str	r2, [sp, #44]	; 0x2c
 8005376:	e7aa      	b.n	80052ce <_dtoa_r+0x246>
 8005378:	2301      	movs	r3, #1
 800537a:	930a      	str	r3, [sp, #40]	; 0x28
 800537c:	e7f4      	b.n	8005368 <_dtoa_r+0x2e0>
 800537e:	2301      	movs	r3, #1
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	4699      	mov	r9, r3
 8005384:	461a      	mov	r2, r3
 8005386:	e7f5      	b.n	8005374 <_dtoa_r+0x2ec>
 8005388:	3101      	adds	r1, #1
 800538a:	6071      	str	r1, [r6, #4]
 800538c:	0052      	lsls	r2, r2, #1
 800538e:	e7a2      	b.n	80052d6 <_dtoa_r+0x24e>
 8005390:	636f4361 	.word	0x636f4361
 8005394:	3fd287a7 	.word	0x3fd287a7
 8005398:	8b60c8b3 	.word	0x8b60c8b3
 800539c:	3fc68a28 	.word	0x3fc68a28
 80053a0:	509f79fb 	.word	0x509f79fb
 80053a4:	3fd34413 	.word	0x3fd34413
 80053a8:	7ff00000 	.word	0x7ff00000
 80053ac:	0800780e 	.word	0x0800780e
 80053b0:	3ff80000 	.word	0x3ff80000
 80053b4:	08007868 	.word	0x08007868
 80053b8:	08007840 	.word	0x08007840
 80053bc:	0800783a 	.word	0x0800783a
 80053c0:	07f1      	lsls	r1, r6, #31
 80053c2:	d508      	bpl.n	80053d6 <_dtoa_r+0x34e>
 80053c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	f7fb f914 	bl	80005f8 <__aeabi_dmul>
 80053d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053d4:	3501      	adds	r5, #1
 80053d6:	1076      	asrs	r6, r6, #1
 80053d8:	3708      	adds	r7, #8
 80053da:	2e00      	cmp	r6, #0
 80053dc:	d1f0      	bne.n	80053c0 <_dtoa_r+0x338>
 80053de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053e6:	f7fb fa31 	bl	800084c <__aeabi_ddiv>
 80053ea:	e9cd 0100 	strd	r0, r1, [sp]
 80053ee:	e01a      	b.n	8005426 <_dtoa_r+0x39e>
 80053f0:	2502      	movs	r5, #2
 80053f2:	e7a3      	b.n	800533c <_dtoa_r+0x2b4>
 80053f4:	f000 80a0 	beq.w	8005538 <_dtoa_r+0x4b0>
 80053f8:	f1ca 0600 	rsb	r6, sl, #0
 80053fc:	4b9f      	ldr	r3, [pc, #636]	; (800567c <_dtoa_r+0x5f4>)
 80053fe:	4fa0      	ldr	r7, [pc, #640]	; (8005680 <_dtoa_r+0x5f8>)
 8005400:	f006 020f 	and.w	r2, r6, #15
 8005404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005410:	f7fb f8f2 	bl	80005f8 <__aeabi_dmul>
 8005414:	e9cd 0100 	strd	r0, r1, [sp]
 8005418:	1136      	asrs	r6, r6, #4
 800541a:	2300      	movs	r3, #0
 800541c:	2502      	movs	r5, #2
 800541e:	2e00      	cmp	r6, #0
 8005420:	d17f      	bne.n	8005522 <_dtoa_r+0x49a>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e1      	bne.n	80053ea <_dtoa_r+0x362>
 8005426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8087 	beq.w	800553c <_dtoa_r+0x4b4>
 800542e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005432:	2200      	movs	r2, #0
 8005434:	4b93      	ldr	r3, [pc, #588]	; (8005684 <_dtoa_r+0x5fc>)
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fb fb4f 	bl	8000adc <__aeabi_dcmplt>
 800543e:	2800      	cmp	r0, #0
 8005440:	d07c      	beq.n	800553c <_dtoa_r+0x4b4>
 8005442:	f1b9 0f00 	cmp.w	r9, #0
 8005446:	d079      	beq.n	800553c <_dtoa_r+0x4b4>
 8005448:	9b02      	ldr	r3, [sp, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd35      	ble.n	80054ba <_dtoa_r+0x432>
 800544e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005452:	9308      	str	r3, [sp, #32]
 8005454:	4639      	mov	r1, r7
 8005456:	2200      	movs	r2, #0
 8005458:	4b8b      	ldr	r3, [pc, #556]	; (8005688 <_dtoa_r+0x600>)
 800545a:	4630      	mov	r0, r6
 800545c:	f7fb f8cc 	bl	80005f8 <__aeabi_dmul>
 8005460:	e9cd 0100 	strd	r0, r1, [sp]
 8005464:	9f02      	ldr	r7, [sp, #8]
 8005466:	3501      	adds	r5, #1
 8005468:	4628      	mov	r0, r5
 800546a:	f7fb f85b 	bl	8000524 <__aeabi_i2d>
 800546e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005472:	f7fb f8c1 	bl	80005f8 <__aeabi_dmul>
 8005476:	2200      	movs	r2, #0
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <_dtoa_r+0x604>)
 800547a:	f7fa ff07 	bl	800028c <__adddf3>
 800547e:	4605      	mov	r5, r0
 8005480:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005484:	2f00      	cmp	r7, #0
 8005486:	d15d      	bne.n	8005544 <_dtoa_r+0x4bc>
 8005488:	2200      	movs	r2, #0
 800548a:	4b81      	ldr	r3, [pc, #516]	; (8005690 <_dtoa_r+0x608>)
 800548c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005490:	f7fa fefa 	bl	8000288 <__aeabi_dsub>
 8005494:	462a      	mov	r2, r5
 8005496:	4633      	mov	r3, r6
 8005498:	e9cd 0100 	strd	r0, r1, [sp]
 800549c:	f7fb fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f040 8288 	bne.w	80059b6 <_dtoa_r+0x92e>
 80054a6:	462a      	mov	r2, r5
 80054a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054b0:	f7fb fb14 	bl	8000adc <__aeabi_dcmplt>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f040 827c 	bne.w	80059b2 <_dtoa_r+0x92a>
 80054ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054be:	e9cd 2300 	strd	r2, r3, [sp]
 80054c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f2c0 8150 	blt.w	800576a <_dtoa_r+0x6e2>
 80054ca:	f1ba 0f0e 	cmp.w	sl, #14
 80054ce:	f300 814c 	bgt.w	800576a <_dtoa_r+0x6e2>
 80054d2:	4b6a      	ldr	r3, [pc, #424]	; (800567c <_dtoa_r+0x5f4>)
 80054d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054d8:	ed93 7b00 	vldr	d7, [r3]
 80054dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054e4:	f280 80d8 	bge.w	8005698 <_dtoa_r+0x610>
 80054e8:	f1b9 0f00 	cmp.w	r9, #0
 80054ec:	f300 80d4 	bgt.w	8005698 <_dtoa_r+0x610>
 80054f0:	f040 825e 	bne.w	80059b0 <_dtoa_r+0x928>
 80054f4:	2200      	movs	r2, #0
 80054f6:	4b66      	ldr	r3, [pc, #408]	; (8005690 <_dtoa_r+0x608>)
 80054f8:	ec51 0b17 	vmov	r0, r1, d7
 80054fc:	f7fb f87c 	bl	80005f8 <__aeabi_dmul>
 8005500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005504:	f7fb fafe 	bl	8000b04 <__aeabi_dcmpge>
 8005508:	464f      	mov	r7, r9
 800550a:	464e      	mov	r6, r9
 800550c:	2800      	cmp	r0, #0
 800550e:	f040 8234 	bne.w	800597a <_dtoa_r+0x8f2>
 8005512:	2331      	movs	r3, #49	; 0x31
 8005514:	f10b 0501 	add.w	r5, fp, #1
 8005518:	f88b 3000 	strb.w	r3, [fp]
 800551c:	f10a 0a01 	add.w	sl, sl, #1
 8005520:	e22f      	b.n	8005982 <_dtoa_r+0x8fa>
 8005522:	07f2      	lsls	r2, r6, #31
 8005524:	d505      	bpl.n	8005532 <_dtoa_r+0x4aa>
 8005526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800552a:	f7fb f865 	bl	80005f8 <__aeabi_dmul>
 800552e:	3501      	adds	r5, #1
 8005530:	2301      	movs	r3, #1
 8005532:	1076      	asrs	r6, r6, #1
 8005534:	3708      	adds	r7, #8
 8005536:	e772      	b.n	800541e <_dtoa_r+0x396>
 8005538:	2502      	movs	r5, #2
 800553a:	e774      	b.n	8005426 <_dtoa_r+0x39e>
 800553c:	f8cd a020 	str.w	sl, [sp, #32]
 8005540:	464f      	mov	r7, r9
 8005542:	e791      	b.n	8005468 <_dtoa_r+0x3e0>
 8005544:	4b4d      	ldr	r3, [pc, #308]	; (800567c <_dtoa_r+0x5f4>)
 8005546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800554a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d047      	beq.n	80055e4 <_dtoa_r+0x55c>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	2000      	movs	r0, #0
 800555a:	494e      	ldr	r1, [pc, #312]	; (8005694 <_dtoa_r+0x60c>)
 800555c:	f7fb f976 	bl	800084c <__aeabi_ddiv>
 8005560:	462a      	mov	r2, r5
 8005562:	4633      	mov	r3, r6
 8005564:	f7fa fe90 	bl	8000288 <__aeabi_dsub>
 8005568:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800556c:	465d      	mov	r5, fp
 800556e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005572:	f7fb faf1 	bl	8000b58 <__aeabi_d2iz>
 8005576:	4606      	mov	r6, r0
 8005578:	f7fa ffd4 	bl	8000524 <__aeabi_i2d>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005584:	f7fa fe80 	bl	8000288 <__aeabi_dsub>
 8005588:	3630      	adds	r6, #48	; 0x30
 800558a:	f805 6b01 	strb.w	r6, [r5], #1
 800558e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005592:	e9cd 0100 	strd	r0, r1, [sp]
 8005596:	f7fb faa1 	bl	8000adc <__aeabi_dcmplt>
 800559a:	2800      	cmp	r0, #0
 800559c:	d163      	bne.n	8005666 <_dtoa_r+0x5de>
 800559e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055a2:	2000      	movs	r0, #0
 80055a4:	4937      	ldr	r1, [pc, #220]	; (8005684 <_dtoa_r+0x5fc>)
 80055a6:	f7fa fe6f 	bl	8000288 <__aeabi_dsub>
 80055aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055ae:	f7fb fa95 	bl	8000adc <__aeabi_dcmplt>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 80b7 	bne.w	8005726 <_dtoa_r+0x69e>
 80055b8:	eba5 030b 	sub.w	r3, r5, fp
 80055bc:	429f      	cmp	r7, r3
 80055be:	f77f af7c 	ble.w	80054ba <_dtoa_r+0x432>
 80055c2:	2200      	movs	r2, #0
 80055c4:	4b30      	ldr	r3, [pc, #192]	; (8005688 <_dtoa_r+0x600>)
 80055c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055ca:	f7fb f815 	bl	80005f8 <__aeabi_dmul>
 80055ce:	2200      	movs	r2, #0
 80055d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055d4:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <_dtoa_r+0x600>)
 80055d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055da:	f7fb f80d 	bl	80005f8 <__aeabi_dmul>
 80055de:	e9cd 0100 	strd	r0, r1, [sp]
 80055e2:	e7c4      	b.n	800556e <_dtoa_r+0x4e6>
 80055e4:	462a      	mov	r2, r5
 80055e6:	4633      	mov	r3, r6
 80055e8:	f7fb f806 	bl	80005f8 <__aeabi_dmul>
 80055ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055f0:	eb0b 0507 	add.w	r5, fp, r7
 80055f4:	465e      	mov	r6, fp
 80055f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055fa:	f7fb faad 	bl	8000b58 <__aeabi_d2iz>
 80055fe:	4607      	mov	r7, r0
 8005600:	f7fa ff90 	bl	8000524 <__aeabi_i2d>
 8005604:	3730      	adds	r7, #48	; 0x30
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800560e:	f7fa fe3b 	bl	8000288 <__aeabi_dsub>
 8005612:	f806 7b01 	strb.w	r7, [r6], #1
 8005616:	42ae      	cmp	r6, r5
 8005618:	e9cd 0100 	strd	r0, r1, [sp]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	d126      	bne.n	8005670 <_dtoa_r+0x5e8>
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <_dtoa_r+0x60c>)
 8005624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005628:	f7fa fe30 	bl	800028c <__adddf3>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005634:	f7fb fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8005638:	2800      	cmp	r0, #0
 800563a:	d174      	bne.n	8005726 <_dtoa_r+0x69e>
 800563c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005640:	2000      	movs	r0, #0
 8005642:	4914      	ldr	r1, [pc, #80]	; (8005694 <_dtoa_r+0x60c>)
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005650:	f7fb fa44 	bl	8000adc <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	f43f af30 	beq.w	80054ba <_dtoa_r+0x432>
 800565a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800565e:	2b30      	cmp	r3, #48	; 0x30
 8005660:	f105 32ff 	add.w	r2, r5, #4294967295
 8005664:	d002      	beq.n	800566c <_dtoa_r+0x5e4>
 8005666:	f8dd a020 	ldr.w	sl, [sp, #32]
 800566a:	e04a      	b.n	8005702 <_dtoa_r+0x67a>
 800566c:	4615      	mov	r5, r2
 800566e:	e7f4      	b.n	800565a <_dtoa_r+0x5d2>
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <_dtoa_r+0x600>)
 8005672:	f7fa ffc1 	bl	80005f8 <__aeabi_dmul>
 8005676:	e9cd 0100 	strd	r0, r1, [sp]
 800567a:	e7bc      	b.n	80055f6 <_dtoa_r+0x56e>
 800567c:	08007868 	.word	0x08007868
 8005680:	08007840 	.word	0x08007840
 8005684:	3ff00000 	.word	0x3ff00000
 8005688:	40240000 	.word	0x40240000
 800568c:	401c0000 	.word	0x401c0000
 8005690:	40140000 	.word	0x40140000
 8005694:	3fe00000 	.word	0x3fe00000
 8005698:	e9dd 6700 	ldrd	r6, r7, [sp]
 800569c:	465d      	mov	r5, fp
 800569e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056a2:	4630      	mov	r0, r6
 80056a4:	4639      	mov	r1, r7
 80056a6:	f7fb f8d1 	bl	800084c <__aeabi_ddiv>
 80056aa:	f7fb fa55 	bl	8000b58 <__aeabi_d2iz>
 80056ae:	4680      	mov	r8, r0
 80056b0:	f7fa ff38 	bl	8000524 <__aeabi_i2d>
 80056b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b8:	f7fa ff9e 	bl	80005f8 <__aeabi_dmul>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4630      	mov	r0, r6
 80056c2:	4639      	mov	r1, r7
 80056c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80056c8:	f7fa fdde 	bl	8000288 <__aeabi_dsub>
 80056cc:	f805 6b01 	strb.w	r6, [r5], #1
 80056d0:	eba5 060b 	sub.w	r6, r5, fp
 80056d4:	45b1      	cmp	r9, r6
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	d139      	bne.n	8005750 <_dtoa_r+0x6c8>
 80056dc:	f7fa fdd6 	bl	800028c <__adddf3>
 80056e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	f7fb fa16 	bl	8000b18 <__aeabi_dcmpgt>
 80056ec:	b9c8      	cbnz	r0, 8005722 <_dtoa_r+0x69a>
 80056ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	f7fb f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80056fa:	b110      	cbz	r0, 8005702 <_dtoa_r+0x67a>
 80056fc:	f018 0f01 	tst.w	r8, #1
 8005700:	d10f      	bne.n	8005722 <_dtoa_r+0x69a>
 8005702:	9904      	ldr	r1, [sp, #16]
 8005704:	4620      	mov	r0, r4
 8005706:	f000 facc 	bl	8005ca2 <_Bfree>
 800570a:	2300      	movs	r3, #0
 800570c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800570e:	702b      	strb	r3, [r5, #0]
 8005710:	f10a 0301 	add.w	r3, sl, #1
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8241 	beq.w	8005ba0 <_dtoa_r+0xb18>
 800571e:	601d      	str	r5, [r3, #0]
 8005720:	e23e      	b.n	8005ba0 <_dtoa_r+0xb18>
 8005722:	f8cd a020 	str.w	sl, [sp, #32]
 8005726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800572a:	2a39      	cmp	r2, #57	; 0x39
 800572c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005730:	d108      	bne.n	8005744 <_dtoa_r+0x6bc>
 8005732:	459b      	cmp	fp, r3
 8005734:	d10a      	bne.n	800574c <_dtoa_r+0x6c4>
 8005736:	9b08      	ldr	r3, [sp, #32]
 8005738:	3301      	adds	r3, #1
 800573a:	9308      	str	r3, [sp, #32]
 800573c:	2330      	movs	r3, #48	; 0x30
 800573e:	f88b 3000 	strb.w	r3, [fp]
 8005742:	465b      	mov	r3, fp
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	3201      	adds	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e78c      	b.n	8005666 <_dtoa_r+0x5de>
 800574c:	461d      	mov	r5, r3
 800574e:	e7ea      	b.n	8005726 <_dtoa_r+0x69e>
 8005750:	2200      	movs	r2, #0
 8005752:	4b9b      	ldr	r3, [pc, #620]	; (80059c0 <_dtoa_r+0x938>)
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	4606      	mov	r6, r0
 800575e:	460f      	mov	r7, r1
 8005760:	f7fb f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005764:	2800      	cmp	r0, #0
 8005766:	d09a      	beq.n	800569e <_dtoa_r+0x616>
 8005768:	e7cb      	b.n	8005702 <_dtoa_r+0x67a>
 800576a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800576c:	2a00      	cmp	r2, #0
 800576e:	f000 808b 	beq.w	8005888 <_dtoa_r+0x800>
 8005772:	9a06      	ldr	r2, [sp, #24]
 8005774:	2a01      	cmp	r2, #1
 8005776:	dc6e      	bgt.n	8005856 <_dtoa_r+0x7ce>
 8005778:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800577a:	2a00      	cmp	r2, #0
 800577c:	d067      	beq.n	800584e <_dtoa_r+0x7c6>
 800577e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005782:	9f07      	ldr	r7, [sp, #28]
 8005784:	9d05      	ldr	r5, [sp, #20]
 8005786:	9a05      	ldr	r2, [sp, #20]
 8005788:	2101      	movs	r1, #1
 800578a:	441a      	add	r2, r3
 800578c:	4620      	mov	r0, r4
 800578e:	9205      	str	r2, [sp, #20]
 8005790:	4498      	add	r8, r3
 8005792:	f000 fb26 	bl	8005de2 <__i2b>
 8005796:	4606      	mov	r6, r0
 8005798:	2d00      	cmp	r5, #0
 800579a:	dd0c      	ble.n	80057b6 <_dtoa_r+0x72e>
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	dd09      	ble.n	80057b6 <_dtoa_r+0x72e>
 80057a2:	4545      	cmp	r5, r8
 80057a4:	9a05      	ldr	r2, [sp, #20]
 80057a6:	462b      	mov	r3, r5
 80057a8:	bfa8      	it	ge
 80057aa:	4643      	movge	r3, r8
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	9205      	str	r2, [sp, #20]
 80057b0:	1aed      	subs	r5, r5, r3
 80057b2:	eba8 0803 	sub.w	r8, r8, r3
 80057b6:	9b07      	ldr	r3, [sp, #28]
 80057b8:	b1eb      	cbz	r3, 80057f6 <_dtoa_r+0x76e>
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d067      	beq.n	8005890 <_dtoa_r+0x808>
 80057c0:	b18f      	cbz	r7, 80057e6 <_dtoa_r+0x75e>
 80057c2:	4631      	mov	r1, r6
 80057c4:	463a      	mov	r2, r7
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 fbaa 	bl	8005f20 <__pow5mult>
 80057cc:	9a04      	ldr	r2, [sp, #16]
 80057ce:	4601      	mov	r1, r0
 80057d0:	4606      	mov	r6, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fb0e 	bl	8005df4 <__multiply>
 80057d8:	9904      	ldr	r1, [sp, #16]
 80057da:	9008      	str	r0, [sp, #32]
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 fa60 	bl	8005ca2 <_Bfree>
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	9b07      	ldr	r3, [sp, #28]
 80057e8:	1bda      	subs	r2, r3, r7
 80057ea:	d004      	beq.n	80057f6 <_dtoa_r+0x76e>
 80057ec:	9904      	ldr	r1, [sp, #16]
 80057ee:	4620      	mov	r0, r4
 80057f0:	f000 fb96 	bl	8005f20 <__pow5mult>
 80057f4:	9004      	str	r0, [sp, #16]
 80057f6:	2101      	movs	r1, #1
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 faf2 	bl	8005de2 <__i2b>
 80057fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005800:	4607      	mov	r7, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 81d0 	beq.w	8005ba8 <_dtoa_r+0xb20>
 8005808:	461a      	mov	r2, r3
 800580a:	4601      	mov	r1, r0
 800580c:	4620      	mov	r0, r4
 800580e:	f000 fb87 	bl	8005f20 <__pow5mult>
 8005812:	9b06      	ldr	r3, [sp, #24]
 8005814:	2b01      	cmp	r3, #1
 8005816:	4607      	mov	r7, r0
 8005818:	dc40      	bgt.n	800589c <_dtoa_r+0x814>
 800581a:	9b00      	ldr	r3, [sp, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d139      	bne.n	8005894 <_dtoa_r+0x80c>
 8005820:	9b01      	ldr	r3, [sp, #4]
 8005822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005826:	2b00      	cmp	r3, #0
 8005828:	d136      	bne.n	8005898 <_dtoa_r+0x810>
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005830:	0d1b      	lsrs	r3, r3, #20
 8005832:	051b      	lsls	r3, r3, #20
 8005834:	b12b      	cbz	r3, 8005842 <_dtoa_r+0x7ba>
 8005836:	9b05      	ldr	r3, [sp, #20]
 8005838:	3301      	adds	r3, #1
 800583a:	9305      	str	r3, [sp, #20]
 800583c:	f108 0801 	add.w	r8, r8, #1
 8005840:	2301      	movs	r3, #1
 8005842:	9307      	str	r3, [sp, #28]
 8005844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d12a      	bne.n	80058a0 <_dtoa_r+0x818>
 800584a:	2001      	movs	r0, #1
 800584c:	e030      	b.n	80058b0 <_dtoa_r+0x828>
 800584e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005850:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005854:	e795      	b.n	8005782 <_dtoa_r+0x6fa>
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	f109 37ff 	add.w	r7, r9, #4294967295
 800585c:	42bb      	cmp	r3, r7
 800585e:	bfbf      	itttt	lt
 8005860:	9b07      	ldrlt	r3, [sp, #28]
 8005862:	9707      	strlt	r7, [sp, #28]
 8005864:	1afa      	sublt	r2, r7, r3
 8005866:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005868:	bfbb      	ittet	lt
 800586a:	189b      	addlt	r3, r3, r2
 800586c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800586e:	1bdf      	subge	r7, r3, r7
 8005870:	2700      	movlt	r7, #0
 8005872:	f1b9 0f00 	cmp.w	r9, #0
 8005876:	bfb5      	itete	lt
 8005878:	9b05      	ldrlt	r3, [sp, #20]
 800587a:	9d05      	ldrge	r5, [sp, #20]
 800587c:	eba3 0509 	sublt.w	r5, r3, r9
 8005880:	464b      	movge	r3, r9
 8005882:	bfb8      	it	lt
 8005884:	2300      	movlt	r3, #0
 8005886:	e77e      	b.n	8005786 <_dtoa_r+0x6fe>
 8005888:	9f07      	ldr	r7, [sp, #28]
 800588a:	9d05      	ldr	r5, [sp, #20]
 800588c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800588e:	e783      	b.n	8005798 <_dtoa_r+0x710>
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	e7ab      	b.n	80057ec <_dtoa_r+0x764>
 8005894:	2300      	movs	r3, #0
 8005896:	e7d4      	b.n	8005842 <_dtoa_r+0x7ba>
 8005898:	9b00      	ldr	r3, [sp, #0]
 800589a:	e7d2      	b.n	8005842 <_dtoa_r+0x7ba>
 800589c:	2300      	movs	r3, #0
 800589e:	9307      	str	r3, [sp, #28]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80058a6:	6918      	ldr	r0, [r3, #16]
 80058a8:	f000 fa4d 	bl	8005d46 <__hi0bits>
 80058ac:	f1c0 0020 	rsb	r0, r0, #32
 80058b0:	4440      	add	r0, r8
 80058b2:	f010 001f 	ands.w	r0, r0, #31
 80058b6:	d047      	beq.n	8005948 <_dtoa_r+0x8c0>
 80058b8:	f1c0 0320 	rsb	r3, r0, #32
 80058bc:	2b04      	cmp	r3, #4
 80058be:	dd3b      	ble.n	8005938 <_dtoa_r+0x8b0>
 80058c0:	9b05      	ldr	r3, [sp, #20]
 80058c2:	f1c0 001c 	rsb	r0, r0, #28
 80058c6:	4403      	add	r3, r0
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	4405      	add	r5, r0
 80058cc:	4480      	add	r8, r0
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dd05      	ble.n	80058e0 <_dtoa_r+0x858>
 80058d4:	461a      	mov	r2, r3
 80058d6:	9904      	ldr	r1, [sp, #16]
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fb6f 	bl	8005fbc <__lshift>
 80058de:	9004      	str	r0, [sp, #16]
 80058e0:	f1b8 0f00 	cmp.w	r8, #0
 80058e4:	dd05      	ble.n	80058f2 <_dtoa_r+0x86a>
 80058e6:	4639      	mov	r1, r7
 80058e8:	4642      	mov	r2, r8
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fb66 	bl	8005fbc <__lshift>
 80058f0:	4607      	mov	r7, r0
 80058f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058f4:	b353      	cbz	r3, 800594c <_dtoa_r+0x8c4>
 80058f6:	4639      	mov	r1, r7
 80058f8:	9804      	ldr	r0, [sp, #16]
 80058fa:	f000 fbb3 	bl	8006064 <__mcmp>
 80058fe:	2800      	cmp	r0, #0
 8005900:	da24      	bge.n	800594c <_dtoa_r+0x8c4>
 8005902:	2300      	movs	r3, #0
 8005904:	220a      	movs	r2, #10
 8005906:	9904      	ldr	r1, [sp, #16]
 8005908:	4620      	mov	r0, r4
 800590a:	f000 f9e1 	bl	8005cd0 <__multadd>
 800590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005910:	9004      	str	r0, [sp, #16]
 8005912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 814d 	beq.w	8005bb6 <_dtoa_r+0xb2e>
 800591c:	2300      	movs	r3, #0
 800591e:	4631      	mov	r1, r6
 8005920:	220a      	movs	r2, #10
 8005922:	4620      	mov	r0, r4
 8005924:	f000 f9d4 	bl	8005cd0 <__multadd>
 8005928:	9b02      	ldr	r3, [sp, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	4606      	mov	r6, r0
 800592e:	dc4f      	bgt.n	80059d0 <_dtoa_r+0x948>
 8005930:	9b06      	ldr	r3, [sp, #24]
 8005932:	2b02      	cmp	r3, #2
 8005934:	dd4c      	ble.n	80059d0 <_dtoa_r+0x948>
 8005936:	e011      	b.n	800595c <_dtoa_r+0x8d4>
 8005938:	d0c9      	beq.n	80058ce <_dtoa_r+0x846>
 800593a:	9a05      	ldr	r2, [sp, #20]
 800593c:	331c      	adds	r3, #28
 800593e:	441a      	add	r2, r3
 8005940:	9205      	str	r2, [sp, #20]
 8005942:	441d      	add	r5, r3
 8005944:	4498      	add	r8, r3
 8005946:	e7c2      	b.n	80058ce <_dtoa_r+0x846>
 8005948:	4603      	mov	r3, r0
 800594a:	e7f6      	b.n	800593a <_dtoa_r+0x8b2>
 800594c:	f1b9 0f00 	cmp.w	r9, #0
 8005950:	dc38      	bgt.n	80059c4 <_dtoa_r+0x93c>
 8005952:	9b06      	ldr	r3, [sp, #24]
 8005954:	2b02      	cmp	r3, #2
 8005956:	dd35      	ble.n	80059c4 <_dtoa_r+0x93c>
 8005958:	f8cd 9008 	str.w	r9, [sp, #8]
 800595c:	9b02      	ldr	r3, [sp, #8]
 800595e:	b963      	cbnz	r3, 800597a <_dtoa_r+0x8f2>
 8005960:	4639      	mov	r1, r7
 8005962:	2205      	movs	r2, #5
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f9b3 	bl	8005cd0 <__multadd>
 800596a:	4601      	mov	r1, r0
 800596c:	4607      	mov	r7, r0
 800596e:	9804      	ldr	r0, [sp, #16]
 8005970:	f000 fb78 	bl	8006064 <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	f73f adcc 	bgt.w	8005512 <_dtoa_r+0x48a>
 800597a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800597c:	465d      	mov	r5, fp
 800597e:	ea6f 0a03 	mvn.w	sl, r3
 8005982:	f04f 0900 	mov.w	r9, #0
 8005986:	4639      	mov	r1, r7
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f98a 	bl	8005ca2 <_Bfree>
 800598e:	2e00      	cmp	r6, #0
 8005990:	f43f aeb7 	beq.w	8005702 <_dtoa_r+0x67a>
 8005994:	f1b9 0f00 	cmp.w	r9, #0
 8005998:	d005      	beq.n	80059a6 <_dtoa_r+0x91e>
 800599a:	45b1      	cmp	r9, r6
 800599c:	d003      	beq.n	80059a6 <_dtoa_r+0x91e>
 800599e:	4649      	mov	r1, r9
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f97e 	bl	8005ca2 <_Bfree>
 80059a6:	4631      	mov	r1, r6
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f97a 	bl	8005ca2 <_Bfree>
 80059ae:	e6a8      	b.n	8005702 <_dtoa_r+0x67a>
 80059b0:	2700      	movs	r7, #0
 80059b2:	463e      	mov	r6, r7
 80059b4:	e7e1      	b.n	800597a <_dtoa_r+0x8f2>
 80059b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059ba:	463e      	mov	r6, r7
 80059bc:	e5a9      	b.n	8005512 <_dtoa_r+0x48a>
 80059be:	bf00      	nop
 80059c0:	40240000 	.word	0x40240000
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80fa 	beq.w	8005bc4 <_dtoa_r+0xb3c>
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	dd05      	ble.n	80059e0 <_dtoa_r+0x958>
 80059d4:	4631      	mov	r1, r6
 80059d6:	462a      	mov	r2, r5
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 faef 	bl	8005fbc <__lshift>
 80059de:	4606      	mov	r6, r0
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04c      	beq.n	8005a80 <_dtoa_r+0x9f8>
 80059e6:	6871      	ldr	r1, [r6, #4]
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 f926 	bl	8005c3a <_Balloc>
 80059ee:	6932      	ldr	r2, [r6, #16]
 80059f0:	3202      	adds	r2, #2
 80059f2:	4605      	mov	r5, r0
 80059f4:	0092      	lsls	r2, r2, #2
 80059f6:	f106 010c 	add.w	r1, r6, #12
 80059fa:	300c      	adds	r0, #12
 80059fc:	f000 f912 	bl	8005c24 <memcpy>
 8005a00:	2201      	movs	r2, #1
 8005a02:	4629      	mov	r1, r5
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fad9 	bl	8005fbc <__lshift>
 8005a0a:	9b00      	ldr	r3, [sp, #0]
 8005a0c:	f8cd b014 	str.w	fp, [sp, #20]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	46b1      	mov	r9, r6
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	4606      	mov	r6, r0
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	9804      	ldr	r0, [sp, #16]
 8005a1e:	f7ff faa5 	bl	8004f6c <quorem>
 8005a22:	4649      	mov	r1, r9
 8005a24:	4605      	mov	r5, r0
 8005a26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a2a:	9804      	ldr	r0, [sp, #16]
 8005a2c:	f000 fb1a 	bl	8006064 <__mcmp>
 8005a30:	4632      	mov	r2, r6
 8005a32:	9000      	str	r0, [sp, #0]
 8005a34:	4639      	mov	r1, r7
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 fb2e 	bl	8006098 <__mdiff>
 8005a3c:	68c3      	ldr	r3, [r0, #12]
 8005a3e:	4602      	mov	r2, r0
 8005a40:	bb03      	cbnz	r3, 8005a84 <_dtoa_r+0x9fc>
 8005a42:	4601      	mov	r1, r0
 8005a44:	9008      	str	r0, [sp, #32]
 8005a46:	9804      	ldr	r0, [sp, #16]
 8005a48:	f000 fb0c 	bl	8006064 <__mcmp>
 8005a4c:	9a08      	ldr	r2, [sp, #32]
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4611      	mov	r1, r2
 8005a52:	4620      	mov	r0, r4
 8005a54:	9308      	str	r3, [sp, #32]
 8005a56:	f000 f924 	bl	8005ca2 <_Bfree>
 8005a5a:	9b08      	ldr	r3, [sp, #32]
 8005a5c:	b9a3      	cbnz	r3, 8005a88 <_dtoa_r+0xa00>
 8005a5e:	9a06      	ldr	r2, [sp, #24]
 8005a60:	b992      	cbnz	r2, 8005a88 <_dtoa_r+0xa00>
 8005a62:	9a07      	ldr	r2, [sp, #28]
 8005a64:	b982      	cbnz	r2, 8005a88 <_dtoa_r+0xa00>
 8005a66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a6a:	d029      	beq.n	8005ac0 <_dtoa_r+0xa38>
 8005a6c:	9b00      	ldr	r3, [sp, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd01      	ble.n	8005a76 <_dtoa_r+0x9ee>
 8005a72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005a76:	9b05      	ldr	r3, [sp, #20]
 8005a78:	1c5d      	adds	r5, r3, #1
 8005a7a:	f883 8000 	strb.w	r8, [r3]
 8005a7e:	e782      	b.n	8005986 <_dtoa_r+0x8fe>
 8005a80:	4630      	mov	r0, r6
 8005a82:	e7c2      	b.n	8005a0a <_dtoa_r+0x982>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e7e3      	b.n	8005a50 <_dtoa_r+0x9c8>
 8005a88:	9a00      	ldr	r2, [sp, #0]
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	db04      	blt.n	8005a98 <_dtoa_r+0xa10>
 8005a8e:	d125      	bne.n	8005adc <_dtoa_r+0xa54>
 8005a90:	9a06      	ldr	r2, [sp, #24]
 8005a92:	bb1a      	cbnz	r2, 8005adc <_dtoa_r+0xa54>
 8005a94:	9a07      	ldr	r2, [sp, #28]
 8005a96:	bb0a      	cbnz	r2, 8005adc <_dtoa_r+0xa54>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	ddec      	ble.n	8005a76 <_dtoa_r+0x9ee>
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	9904      	ldr	r1, [sp, #16]
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fa8b 	bl	8005fbc <__lshift>
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	9004      	str	r0, [sp, #16]
 8005aaa:	f000 fadb 	bl	8006064 <__mcmp>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	dc03      	bgt.n	8005aba <_dtoa_r+0xa32>
 8005ab2:	d1e0      	bne.n	8005a76 <_dtoa_r+0x9ee>
 8005ab4:	f018 0f01 	tst.w	r8, #1
 8005ab8:	d0dd      	beq.n	8005a76 <_dtoa_r+0x9ee>
 8005aba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005abe:	d1d8      	bne.n	8005a72 <_dtoa_r+0x9ea>
 8005ac0:	9b05      	ldr	r3, [sp, #20]
 8005ac2:	9a05      	ldr	r2, [sp, #20]
 8005ac4:	1c5d      	adds	r5, r3, #1
 8005ac6:	2339      	movs	r3, #57	; 0x39
 8005ac8:	7013      	strb	r3, [r2, #0]
 8005aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ace:	2b39      	cmp	r3, #57	; 0x39
 8005ad0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ad4:	d04f      	beq.n	8005b76 <_dtoa_r+0xaee>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	7013      	strb	r3, [r2, #0]
 8005ada:	e754      	b.n	8005986 <_dtoa_r+0x8fe>
 8005adc:	9a05      	ldr	r2, [sp, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f102 0501 	add.w	r5, r2, #1
 8005ae4:	dd06      	ble.n	8005af4 <_dtoa_r+0xa6c>
 8005ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005aea:	d0e9      	beq.n	8005ac0 <_dtoa_r+0xa38>
 8005aec:	f108 0801 	add.w	r8, r8, #1
 8005af0:	9b05      	ldr	r3, [sp, #20]
 8005af2:	e7c2      	b.n	8005a7a <_dtoa_r+0x9f2>
 8005af4:	9a02      	ldr	r2, [sp, #8]
 8005af6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005afa:	eba5 030b 	sub.w	r3, r5, fp
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d021      	beq.n	8005b46 <_dtoa_r+0xabe>
 8005b02:	2300      	movs	r3, #0
 8005b04:	220a      	movs	r2, #10
 8005b06:	9904      	ldr	r1, [sp, #16]
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 f8e1 	bl	8005cd0 <__multadd>
 8005b0e:	45b1      	cmp	r9, r6
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	f04f 020a 	mov.w	r2, #10
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	d105      	bne.n	8005b2c <_dtoa_r+0xaa4>
 8005b20:	f000 f8d6 	bl	8005cd0 <__multadd>
 8005b24:	4681      	mov	r9, r0
 8005b26:	4606      	mov	r6, r0
 8005b28:	9505      	str	r5, [sp, #20]
 8005b2a:	e776      	b.n	8005a1a <_dtoa_r+0x992>
 8005b2c:	f000 f8d0 	bl	8005cd0 <__multadd>
 8005b30:	4631      	mov	r1, r6
 8005b32:	4681      	mov	r9, r0
 8005b34:	2300      	movs	r3, #0
 8005b36:	220a      	movs	r2, #10
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 f8c9 	bl	8005cd0 <__multadd>
 8005b3e:	4606      	mov	r6, r0
 8005b40:	e7f2      	b.n	8005b28 <_dtoa_r+0xaa0>
 8005b42:	f04f 0900 	mov.w	r9, #0
 8005b46:	2201      	movs	r2, #1
 8005b48:	9904      	ldr	r1, [sp, #16]
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fa36 	bl	8005fbc <__lshift>
 8005b50:	4639      	mov	r1, r7
 8005b52:	9004      	str	r0, [sp, #16]
 8005b54:	f000 fa86 	bl	8006064 <__mcmp>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dcb6      	bgt.n	8005aca <_dtoa_r+0xa42>
 8005b5c:	d102      	bne.n	8005b64 <_dtoa_r+0xadc>
 8005b5e:	f018 0f01 	tst.w	r8, #1
 8005b62:	d1b2      	bne.n	8005aca <_dtoa_r+0xa42>
 8005b64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b6e:	f47f af0a 	bne.w	8005986 <_dtoa_r+0x8fe>
 8005b72:	4615      	mov	r5, r2
 8005b74:	e7f6      	b.n	8005b64 <_dtoa_r+0xadc>
 8005b76:	4593      	cmp	fp, r2
 8005b78:	d105      	bne.n	8005b86 <_dtoa_r+0xafe>
 8005b7a:	2331      	movs	r3, #49	; 0x31
 8005b7c:	f10a 0a01 	add.w	sl, sl, #1
 8005b80:	f88b 3000 	strb.w	r3, [fp]
 8005b84:	e6ff      	b.n	8005986 <_dtoa_r+0x8fe>
 8005b86:	4615      	mov	r5, r2
 8005b88:	e79f      	b.n	8005aca <_dtoa_r+0xa42>
 8005b8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005bf0 <_dtoa_r+0xb68>
 8005b8e:	e007      	b.n	8005ba0 <_dtoa_r+0xb18>
 8005b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005bf4 <_dtoa_r+0xb6c>
 8005b96:	b11b      	cbz	r3, 8005ba0 <_dtoa_r+0xb18>
 8005b98:	f10b 0308 	add.w	r3, fp, #8
 8005b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	b017      	add	sp, #92	; 0x5c
 8005ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba8:	9b06      	ldr	r3, [sp, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	f77f ae35 	ble.w	800581a <_dtoa_r+0x792>
 8005bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	e649      	b.n	800584a <_dtoa_r+0x7c2>
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc03      	bgt.n	8005bc4 <_dtoa_r+0xb3c>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	f73f aecc 	bgt.w	800595c <_dtoa_r+0x8d4>
 8005bc4:	465d      	mov	r5, fp
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	9804      	ldr	r0, [sp, #16]
 8005bca:	f7ff f9cf 	bl	8004f6c <quorem>
 8005bce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bd2:	f805 8b01 	strb.w	r8, [r5], #1
 8005bd6:	9a02      	ldr	r2, [sp, #8]
 8005bd8:	eba5 030b 	sub.w	r3, r5, fp
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	ddb0      	ble.n	8005b42 <_dtoa_r+0xaba>
 8005be0:	2300      	movs	r3, #0
 8005be2:	220a      	movs	r2, #10
 8005be4:	9904      	ldr	r1, [sp, #16]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 f872 	bl	8005cd0 <__multadd>
 8005bec:	9004      	str	r0, [sp, #16]
 8005bee:	e7ea      	b.n	8005bc6 <_dtoa_r+0xb3e>
 8005bf0:	0800780d 	.word	0x0800780d
 8005bf4:	08007831 	.word	0x08007831

08005bf8 <_localeconv_r>:
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <_localeconv_r+0x14>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a18      	ldr	r0, [r3, #32]
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <_localeconv_r+0x18>)
 8005c00:	2800      	cmp	r0, #0
 8005c02:	bf08      	it	eq
 8005c04:	4618      	moveq	r0, r3
 8005c06:	30f0      	adds	r0, #240	; 0xf0
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000008 	.word	0x20000008
 8005c10:	2000006c 	.word	0x2000006c

08005c14 <malloc>:
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <malloc+0xc>)
 8005c16:	4601      	mov	r1, r0
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	f000 bb45 	b.w	80062a8 <_malloc_r>
 8005c1e:	bf00      	nop
 8005c20:	20000008 	.word	0x20000008

08005c24 <memcpy>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	1e43      	subs	r3, r0, #1
 8005c28:	440a      	add	r2, r1
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d100      	bne.n	8005c30 <memcpy+0xc>
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c38:	e7f7      	b.n	8005c2a <memcpy+0x6>

08005c3a <_Balloc>:
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460e      	mov	r6, r1
 8005c42:	b93d      	cbnz	r5, 8005c54 <_Balloc+0x1a>
 8005c44:	2010      	movs	r0, #16
 8005c46:	f7ff ffe5 	bl	8005c14 <malloc>
 8005c4a:	6260      	str	r0, [r4, #36]	; 0x24
 8005c4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c50:	6005      	str	r5, [r0, #0]
 8005c52:	60c5      	str	r5, [r0, #12]
 8005c54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c56:	68eb      	ldr	r3, [r5, #12]
 8005c58:	b183      	cbz	r3, 8005c7c <_Balloc+0x42>
 8005c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c62:	b9b8      	cbnz	r0, 8005c94 <_Balloc+0x5a>
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f506 	lsl.w	r5, r1, r6
 8005c6a:	1d6a      	adds	r2, r5, #5
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fabe 	bl	80061f0 <_calloc_r>
 8005c74:	b160      	cbz	r0, 8005c90 <_Balloc+0x56>
 8005c76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005c7a:	e00e      	b.n	8005c9a <_Balloc+0x60>
 8005c7c:	2221      	movs	r2, #33	; 0x21
 8005c7e:	2104      	movs	r1, #4
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fab5 	bl	80061f0 <_calloc_r>
 8005c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c88:	60e8      	str	r0, [r5, #12]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e4      	bne.n	8005c5a <_Balloc+0x20>
 8005c90:	2000      	movs	r0, #0
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	6802      	ldr	r2, [r0, #0]
 8005c96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ca0:	e7f7      	b.n	8005c92 <_Balloc+0x58>

08005ca2 <_Bfree>:
 8005ca2:	b570      	push	{r4, r5, r6, lr}
 8005ca4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	b93c      	cbnz	r4, 8005cbc <_Bfree+0x1a>
 8005cac:	2010      	movs	r0, #16
 8005cae:	f7ff ffb1 	bl	8005c14 <malloc>
 8005cb2:	6270      	str	r0, [r6, #36]	; 0x24
 8005cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cb8:	6004      	str	r4, [r0, #0]
 8005cba:	60c4      	str	r4, [r0, #12]
 8005cbc:	b13d      	cbz	r5, 8005cce <_Bfree+0x2c>
 8005cbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005cc0:	686a      	ldr	r2, [r5, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cc8:	6029      	str	r1, [r5, #0]
 8005cca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005cce:	bd70      	pop	{r4, r5, r6, pc}

08005cd0 <__multadd>:
 8005cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd4:	690d      	ldr	r5, [r1, #16]
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	f101 0c14 	add.w	ip, r1, #20
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8dc 0000 	ldr.w	r0, [ip]
 8005ce6:	b281      	uxth	r1, r0
 8005ce8:	fb02 7101 	mla	r1, r2, r1, r7
 8005cec:	0c0f      	lsrs	r7, r1, #16
 8005cee:	0c00      	lsrs	r0, r0, #16
 8005cf0:	fb02 7000 	mla	r0, r2, r0, r7
 8005cf4:	b289      	uxth	r1, r1
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d02:	f84c 1b04 	str.w	r1, [ip], #4
 8005d06:	dcec      	bgt.n	8005ce2 <__multadd+0x12>
 8005d08:	b1d7      	cbz	r7, 8005d40 <__multadd+0x70>
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dc12      	bgt.n	8005d36 <__multadd+0x66>
 8005d10:	6861      	ldr	r1, [r4, #4]
 8005d12:	4630      	mov	r0, r6
 8005d14:	3101      	adds	r1, #1
 8005d16:	f7ff ff90 	bl	8005c3a <_Balloc>
 8005d1a:	6922      	ldr	r2, [r4, #16]
 8005d1c:	3202      	adds	r2, #2
 8005d1e:	f104 010c 	add.w	r1, r4, #12
 8005d22:	4680      	mov	r8, r0
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	300c      	adds	r0, #12
 8005d28:	f7ff ff7c 	bl	8005c24 <memcpy>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ffb7 	bl	8005ca2 <_Bfree>
 8005d34:	4644      	mov	r4, r8
 8005d36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d3a:	3501      	adds	r5, #1
 8005d3c:	615f      	str	r7, [r3, #20]
 8005d3e:	6125      	str	r5, [r4, #16]
 8005d40:	4620      	mov	r0, r4
 8005d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d46 <__hi0bits>:
 8005d46:	0c02      	lsrs	r2, r0, #16
 8005d48:	0412      	lsls	r2, r2, #16
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	b9b2      	cbnz	r2, 8005d7c <__hi0bits+0x36>
 8005d4e:	0403      	lsls	r3, r0, #16
 8005d50:	2010      	movs	r0, #16
 8005d52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d56:	bf04      	itt	eq
 8005d58:	021b      	lsleq	r3, r3, #8
 8005d5a:	3008      	addeq	r0, #8
 8005d5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d60:	bf04      	itt	eq
 8005d62:	011b      	lsleq	r3, r3, #4
 8005d64:	3004      	addeq	r0, #4
 8005d66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d6a:	bf04      	itt	eq
 8005d6c:	009b      	lsleq	r3, r3, #2
 8005d6e:	3002      	addeq	r0, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db06      	blt.n	8005d82 <__hi0bits+0x3c>
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	d503      	bpl.n	8005d80 <__hi0bits+0x3a>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	4770      	bx	lr
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7e8      	b.n	8005d52 <__hi0bits+0xc>
 8005d80:	2020      	movs	r0, #32
 8005d82:	4770      	bx	lr

08005d84 <__lo0bits>:
 8005d84:	6803      	ldr	r3, [r0, #0]
 8005d86:	f013 0207 	ands.w	r2, r3, #7
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	d00b      	beq.n	8005da6 <__lo0bits+0x22>
 8005d8e:	07da      	lsls	r2, r3, #31
 8005d90:	d423      	bmi.n	8005dda <__lo0bits+0x56>
 8005d92:	0798      	lsls	r0, r3, #30
 8005d94:	bf49      	itett	mi
 8005d96:	085b      	lsrmi	r3, r3, #1
 8005d98:	089b      	lsrpl	r3, r3, #2
 8005d9a:	2001      	movmi	r0, #1
 8005d9c:	600b      	strmi	r3, [r1, #0]
 8005d9e:	bf5c      	itt	pl
 8005da0:	600b      	strpl	r3, [r1, #0]
 8005da2:	2002      	movpl	r0, #2
 8005da4:	4770      	bx	lr
 8005da6:	b298      	uxth	r0, r3
 8005da8:	b9a8      	cbnz	r0, 8005dd6 <__lo0bits+0x52>
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	2010      	movs	r0, #16
 8005dae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005db2:	bf04      	itt	eq
 8005db4:	0a1b      	lsreq	r3, r3, #8
 8005db6:	3008      	addeq	r0, #8
 8005db8:	071a      	lsls	r2, r3, #28
 8005dba:	bf04      	itt	eq
 8005dbc:	091b      	lsreq	r3, r3, #4
 8005dbe:	3004      	addeq	r0, #4
 8005dc0:	079a      	lsls	r2, r3, #30
 8005dc2:	bf04      	itt	eq
 8005dc4:	089b      	lsreq	r3, r3, #2
 8005dc6:	3002      	addeq	r0, #2
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	d402      	bmi.n	8005dd2 <__lo0bits+0x4e>
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	d006      	beq.n	8005dde <__lo0bits+0x5a>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	600b      	str	r3, [r1, #0]
 8005dd4:	4770      	bx	lr
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	e7e9      	b.n	8005dae <__lo0bits+0x2a>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	4770      	bx	lr
 8005dde:	2020      	movs	r0, #32
 8005de0:	4770      	bx	lr

08005de2 <__i2b>:
 8005de2:	b510      	push	{r4, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	2101      	movs	r1, #1
 8005de8:	f7ff ff27 	bl	8005c3a <_Balloc>
 8005dec:	2201      	movs	r2, #1
 8005dee:	6144      	str	r4, [r0, #20]
 8005df0:	6102      	str	r2, [r0, #16]
 8005df2:	bd10      	pop	{r4, pc}

08005df4 <__multiply>:
 8005df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	4614      	mov	r4, r2
 8005dfa:	690a      	ldr	r2, [r1, #16]
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	bfb8      	it	lt
 8005e02:	460b      	movlt	r3, r1
 8005e04:	4688      	mov	r8, r1
 8005e06:	bfbc      	itt	lt
 8005e08:	46a0      	movlt	r8, r4
 8005e0a:	461c      	movlt	r4, r3
 8005e0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e1c:	eb07 0609 	add.w	r6, r7, r9
 8005e20:	42b3      	cmp	r3, r6
 8005e22:	bfb8      	it	lt
 8005e24:	3101      	addlt	r1, #1
 8005e26:	f7ff ff08 	bl	8005c3a <_Balloc>
 8005e2a:	f100 0514 	add.w	r5, r0, #20
 8005e2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005e32:	462b      	mov	r3, r5
 8005e34:	2200      	movs	r2, #0
 8005e36:	4573      	cmp	r3, lr
 8005e38:	d316      	bcc.n	8005e68 <__multiply+0x74>
 8005e3a:	f104 0214 	add.w	r2, r4, #20
 8005e3e:	f108 0114 	add.w	r1, r8, #20
 8005e42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005e46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	9b00      	ldr	r3, [sp, #0]
 8005e4e:	9201      	str	r2, [sp, #4]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d80c      	bhi.n	8005e6e <__multiply+0x7a>
 8005e54:	2e00      	cmp	r6, #0
 8005e56:	dd03      	ble.n	8005e60 <__multiply+0x6c>
 8005e58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05d      	beq.n	8005f1c <__multiply+0x128>
 8005e60:	6106      	str	r6, [r0, #16]
 8005e62:	b003      	add	sp, #12
 8005e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e68:	f843 2b04 	str.w	r2, [r3], #4
 8005e6c:	e7e3      	b.n	8005e36 <__multiply+0x42>
 8005e6e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005e72:	f1bb 0f00 	cmp.w	fp, #0
 8005e76:	d023      	beq.n	8005ec0 <__multiply+0xcc>
 8005e78:	4689      	mov	r9, r1
 8005e7a:	46ac      	mov	ip, r5
 8005e7c:	f04f 0800 	mov.w	r8, #0
 8005e80:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e84:	f8dc a000 	ldr.w	sl, [ip]
 8005e88:	b2a3      	uxth	r3, r4
 8005e8a:	fa1f fa8a 	uxth.w	sl, sl
 8005e8e:	fb0b a303 	mla	r3, fp, r3, sl
 8005e92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e96:	f8dc 4000 	ldr.w	r4, [ip]
 8005e9a:	4443      	add	r3, r8
 8005e9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ea0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ea4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ea8:	46e2      	mov	sl, ip
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005eb0:	454f      	cmp	r7, r9
 8005eb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005eb6:	f84a 3b04 	str.w	r3, [sl], #4
 8005eba:	d82b      	bhi.n	8005f14 <__multiply+0x120>
 8005ebc:	f8cc 8004 	str.w	r8, [ip, #4]
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005ec6:	3204      	adds	r2, #4
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	d020      	beq.n	8005f10 <__multiply+0x11c>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	46a8      	mov	r8, r5
 8005ed4:	f04f 0b00 	mov.w	fp, #0
 8005ed8:	f8b9 c000 	ldrh.w	ip, [r9]
 8005edc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005ee0:	fb0a 440c 	mla	r4, sl, ip, r4
 8005ee4:	445c      	add	r4, fp
 8005ee6:	46c4      	mov	ip, r8
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005eee:	f84c 3b04 	str.w	r3, [ip], #4
 8005ef2:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ef6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	fb0a b303 	mla	r3, sl, r3, fp
 8005f00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f04:	454f      	cmp	r7, r9
 8005f06:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005f0a:	d805      	bhi.n	8005f18 <__multiply+0x124>
 8005f0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f10:	3504      	adds	r5, #4
 8005f12:	e79b      	b.n	8005e4c <__multiply+0x58>
 8005f14:	46d4      	mov	ip, sl
 8005f16:	e7b3      	b.n	8005e80 <__multiply+0x8c>
 8005f18:	46e0      	mov	r8, ip
 8005f1a:	e7dd      	b.n	8005ed8 <__multiply+0xe4>
 8005f1c:	3e01      	subs	r6, #1
 8005f1e:	e799      	b.n	8005e54 <__multiply+0x60>

08005f20 <__pow5mult>:
 8005f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f24:	4615      	mov	r5, r2
 8005f26:	f012 0203 	ands.w	r2, r2, #3
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	d007      	beq.n	8005f40 <__pow5mult+0x20>
 8005f30:	3a01      	subs	r2, #1
 8005f32:	4c21      	ldr	r4, [pc, #132]	; (8005fb8 <__pow5mult+0x98>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f3a:	f7ff fec9 	bl	8005cd0 <__multadd>
 8005f3e:	4607      	mov	r7, r0
 8005f40:	10ad      	asrs	r5, r5, #2
 8005f42:	d035      	beq.n	8005fb0 <__pow5mult+0x90>
 8005f44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f46:	b93c      	cbnz	r4, 8005f58 <__pow5mult+0x38>
 8005f48:	2010      	movs	r0, #16
 8005f4a:	f7ff fe63 	bl	8005c14 <malloc>
 8005f4e:	6270      	str	r0, [r6, #36]	; 0x24
 8005f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f54:	6004      	str	r4, [r0, #0]
 8005f56:	60c4      	str	r4, [r0, #12]
 8005f58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f60:	b94c      	cbnz	r4, 8005f76 <__pow5mult+0x56>
 8005f62:	f240 2171 	movw	r1, #625	; 0x271
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ff3b 	bl	8005de2 <__i2b>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f72:	4604      	mov	r4, r0
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	07eb      	lsls	r3, r5, #31
 8005f7c:	d50a      	bpl.n	8005f94 <__pow5mult+0x74>
 8005f7e:	4639      	mov	r1, r7
 8005f80:	4622      	mov	r2, r4
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff ff36 	bl	8005df4 <__multiply>
 8005f88:	4639      	mov	r1, r7
 8005f8a:	4681      	mov	r9, r0
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7ff fe88 	bl	8005ca2 <_Bfree>
 8005f92:	464f      	mov	r7, r9
 8005f94:	106d      	asrs	r5, r5, #1
 8005f96:	d00b      	beq.n	8005fb0 <__pow5mult+0x90>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	b938      	cbnz	r0, 8005fac <__pow5mult+0x8c>
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff ff27 	bl	8005df4 <__multiply>
 8005fa6:	6020      	str	r0, [r4, #0]
 8005fa8:	f8c0 8000 	str.w	r8, [r0]
 8005fac:	4604      	mov	r4, r0
 8005fae:	e7e4      	b.n	8005f7a <__pow5mult+0x5a>
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb6:	bf00      	nop
 8005fb8:	08007930 	.word	0x08007930

08005fbc <__lshift>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	6849      	ldr	r1, [r1, #4]
 8005fca:	eb0a 0903 	add.w	r9, sl, r3
 8005fce:	68a3      	ldr	r3, [r4, #8]
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	f109 0501 	add.w	r5, r9, #1
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	db32      	blt.n	8006042 <__lshift+0x86>
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff fe2c 	bl	8005c3a <_Balloc>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	f100 0114 	add.w	r1, r0, #20
 8005fea:	461a      	mov	r2, r3
 8005fec:	4553      	cmp	r3, sl
 8005fee:	db2b      	blt.n	8006048 <__lshift+0x8c>
 8005ff0:	6920      	ldr	r0, [r4, #16]
 8005ff2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ff6:	f104 0314 	add.w	r3, r4, #20
 8005ffa:	f016 021f 	ands.w	r2, r6, #31
 8005ffe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006002:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006006:	d025      	beq.n	8006054 <__lshift+0x98>
 8006008:	f1c2 0e20 	rsb	lr, r2, #32
 800600c:	2000      	movs	r0, #0
 800600e:	681e      	ldr	r6, [r3, #0]
 8006010:	468a      	mov	sl, r1
 8006012:	4096      	lsls	r6, r2
 8006014:	4330      	orrs	r0, r6
 8006016:	f84a 0b04 	str.w	r0, [sl], #4
 800601a:	f853 0b04 	ldr.w	r0, [r3], #4
 800601e:	459c      	cmp	ip, r3
 8006020:	fa20 f00e 	lsr.w	r0, r0, lr
 8006024:	d814      	bhi.n	8006050 <__lshift+0x94>
 8006026:	6048      	str	r0, [r1, #4]
 8006028:	b108      	cbz	r0, 800602e <__lshift+0x72>
 800602a:	f109 0502 	add.w	r5, r9, #2
 800602e:	3d01      	subs	r5, #1
 8006030:	4638      	mov	r0, r7
 8006032:	f8c8 5010 	str.w	r5, [r8, #16]
 8006036:	4621      	mov	r1, r4
 8006038:	f7ff fe33 	bl	8005ca2 <_Bfree>
 800603c:	4640      	mov	r0, r8
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	3101      	adds	r1, #1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	e7c7      	b.n	8005fd8 <__lshift+0x1c>
 8006048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800604c:	3301      	adds	r3, #1
 800604e:	e7cd      	b.n	8005fec <__lshift+0x30>
 8006050:	4651      	mov	r1, sl
 8006052:	e7dc      	b.n	800600e <__lshift+0x52>
 8006054:	3904      	subs	r1, #4
 8006056:	f853 2b04 	ldr.w	r2, [r3], #4
 800605a:	f841 2f04 	str.w	r2, [r1, #4]!
 800605e:	459c      	cmp	ip, r3
 8006060:	d8f9      	bhi.n	8006056 <__lshift+0x9a>
 8006062:	e7e4      	b.n	800602e <__lshift+0x72>

08006064 <__mcmp>:
 8006064:	6903      	ldr	r3, [r0, #16]
 8006066:	690a      	ldr	r2, [r1, #16]
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	b530      	push	{r4, r5, lr}
 800606c:	d10c      	bne.n	8006088 <__mcmp+0x24>
 800606e:	0092      	lsls	r2, r2, #2
 8006070:	3014      	adds	r0, #20
 8006072:	3114      	adds	r1, #20
 8006074:	1884      	adds	r4, r0, r2
 8006076:	4411      	add	r1, r2
 8006078:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800607c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006080:	4295      	cmp	r5, r2
 8006082:	d003      	beq.n	800608c <__mcmp+0x28>
 8006084:	d305      	bcc.n	8006092 <__mcmp+0x2e>
 8006086:	2301      	movs	r3, #1
 8006088:	4618      	mov	r0, r3
 800608a:	bd30      	pop	{r4, r5, pc}
 800608c:	42a0      	cmp	r0, r4
 800608e:	d3f3      	bcc.n	8006078 <__mcmp+0x14>
 8006090:	e7fa      	b.n	8006088 <__mcmp+0x24>
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	e7f7      	b.n	8006088 <__mcmp+0x24>

08006098 <__mdiff>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	460d      	mov	r5, r1
 800609e:	4607      	mov	r7, r0
 80060a0:	4611      	mov	r1, r2
 80060a2:	4628      	mov	r0, r5
 80060a4:	4614      	mov	r4, r2
 80060a6:	f7ff ffdd 	bl	8006064 <__mcmp>
 80060aa:	1e06      	subs	r6, r0, #0
 80060ac:	d108      	bne.n	80060c0 <__mdiff+0x28>
 80060ae:	4631      	mov	r1, r6
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff fdc2 	bl	8005c3a <_Balloc>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80060bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c0:	bfa4      	itt	ge
 80060c2:	4623      	movge	r3, r4
 80060c4:	462c      	movge	r4, r5
 80060c6:	4638      	mov	r0, r7
 80060c8:	6861      	ldr	r1, [r4, #4]
 80060ca:	bfa6      	itte	ge
 80060cc:	461d      	movge	r5, r3
 80060ce:	2600      	movge	r6, #0
 80060d0:	2601      	movlt	r6, #1
 80060d2:	f7ff fdb2 	bl	8005c3a <_Balloc>
 80060d6:	692b      	ldr	r3, [r5, #16]
 80060d8:	60c6      	str	r6, [r0, #12]
 80060da:	6926      	ldr	r6, [r4, #16]
 80060dc:	f105 0914 	add.w	r9, r5, #20
 80060e0:	f104 0214 	add.w	r2, r4, #20
 80060e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80060e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80060ec:	f100 0514 	add.w	r5, r0, #20
 80060f0:	f04f 0e00 	mov.w	lr, #0
 80060f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80060f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80060fc:	fa1e f18a 	uxtah	r1, lr, sl
 8006100:	b2a3      	uxth	r3, r4
 8006102:	1ac9      	subs	r1, r1, r3
 8006104:	0c23      	lsrs	r3, r4, #16
 8006106:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800610a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800610e:	b289      	uxth	r1, r1
 8006110:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006114:	45c8      	cmp	r8, r9
 8006116:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800611a:	4694      	mov	ip, r2
 800611c:	f845 3b04 	str.w	r3, [r5], #4
 8006120:	d8e8      	bhi.n	80060f4 <__mdiff+0x5c>
 8006122:	45bc      	cmp	ip, r7
 8006124:	d304      	bcc.n	8006130 <__mdiff+0x98>
 8006126:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800612a:	b183      	cbz	r3, 800614e <__mdiff+0xb6>
 800612c:	6106      	str	r6, [r0, #16]
 800612e:	e7c5      	b.n	80060bc <__mdiff+0x24>
 8006130:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006134:	fa1e f381 	uxtah	r3, lr, r1
 8006138:	141a      	asrs	r2, r3, #16
 800613a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800613e:	b29b      	uxth	r3, r3
 8006140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006144:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006148:	f845 3b04 	str.w	r3, [r5], #4
 800614c:	e7e9      	b.n	8006122 <__mdiff+0x8a>
 800614e:	3e01      	subs	r6, #1
 8006150:	e7e9      	b.n	8006126 <__mdiff+0x8e>

08006152 <__d2b>:
 8006152:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006156:	460e      	mov	r6, r1
 8006158:	2101      	movs	r1, #1
 800615a:	ec59 8b10 	vmov	r8, r9, d0
 800615e:	4615      	mov	r5, r2
 8006160:	f7ff fd6b 	bl	8005c3a <_Balloc>
 8006164:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006168:	4607      	mov	r7, r0
 800616a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800616e:	bb34      	cbnz	r4, 80061be <__d2b+0x6c>
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	f1b8 0300 	subs.w	r3, r8, #0
 8006176:	d027      	beq.n	80061c8 <__d2b+0x76>
 8006178:	a802      	add	r0, sp, #8
 800617a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800617e:	f7ff fe01 	bl	8005d84 <__lo0bits>
 8006182:	9900      	ldr	r1, [sp, #0]
 8006184:	b1f0      	cbz	r0, 80061c4 <__d2b+0x72>
 8006186:	9a01      	ldr	r2, [sp, #4]
 8006188:	f1c0 0320 	rsb	r3, r0, #32
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	430b      	orrs	r3, r1
 8006192:	40c2      	lsrs	r2, r0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	9201      	str	r2, [sp, #4]
 8006198:	9b01      	ldr	r3, [sp, #4]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf14      	ite	ne
 80061a0:	2102      	movne	r1, #2
 80061a2:	2101      	moveq	r1, #1
 80061a4:	6139      	str	r1, [r7, #16]
 80061a6:	b1c4      	cbz	r4, 80061da <__d2b+0x88>
 80061a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80061ac:	4404      	add	r4, r0
 80061ae:	6034      	str	r4, [r6, #0]
 80061b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061b4:	6028      	str	r0, [r5, #0]
 80061b6:	4638      	mov	r0, r7
 80061b8:	b003      	add	sp, #12
 80061ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c2:	e7d5      	b.n	8006170 <__d2b+0x1e>
 80061c4:	6179      	str	r1, [r7, #20]
 80061c6:	e7e7      	b.n	8006198 <__d2b+0x46>
 80061c8:	a801      	add	r0, sp, #4
 80061ca:	f7ff fddb 	bl	8005d84 <__lo0bits>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	2101      	movs	r1, #1
 80061d4:	6139      	str	r1, [r7, #16]
 80061d6:	3020      	adds	r0, #32
 80061d8:	e7e5      	b.n	80061a6 <__d2b+0x54>
 80061da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80061de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061e2:	6030      	str	r0, [r6, #0]
 80061e4:	6918      	ldr	r0, [r3, #16]
 80061e6:	f7ff fdae 	bl	8005d46 <__hi0bits>
 80061ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80061ee:	e7e1      	b.n	80061b4 <__d2b+0x62>

080061f0 <_calloc_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	fb02 f401 	mul.w	r4, r2, r1
 80061f6:	4621      	mov	r1, r4
 80061f8:	f000 f856 	bl	80062a8 <_malloc_r>
 80061fc:	4605      	mov	r5, r0
 80061fe:	b118      	cbz	r0, 8006208 <_calloc_r+0x18>
 8006200:	4622      	mov	r2, r4
 8006202:	2100      	movs	r1, #0
 8006204:	f7fe fa2e 	bl	8004664 <memset>
 8006208:	4628      	mov	r0, r5
 800620a:	bd38      	pop	{r3, r4, r5, pc}

0800620c <_free_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4605      	mov	r5, r0
 8006210:	2900      	cmp	r1, #0
 8006212:	d045      	beq.n	80062a0 <_free_r+0x94>
 8006214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006218:	1f0c      	subs	r4, r1, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	bfb8      	it	lt
 800621e:	18e4      	addlt	r4, r4, r3
 8006220:	f000 fa29 	bl	8006676 <__malloc_lock>
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <_free_r+0x98>)
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	4610      	mov	r0, r2
 800622a:	b933      	cbnz	r3, 800623a <_free_r+0x2e>
 800622c:	6063      	str	r3, [r4, #4]
 800622e:	6014      	str	r4, [r2, #0]
 8006230:	4628      	mov	r0, r5
 8006232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006236:	f000 ba1f 	b.w	8006678 <__malloc_unlock>
 800623a:	42a3      	cmp	r3, r4
 800623c:	d90c      	bls.n	8006258 <_free_r+0x4c>
 800623e:	6821      	ldr	r1, [r4, #0]
 8006240:	1862      	adds	r2, r4, r1
 8006242:	4293      	cmp	r3, r2
 8006244:	bf04      	itt	eq
 8006246:	681a      	ldreq	r2, [r3, #0]
 8006248:	685b      	ldreq	r3, [r3, #4]
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	bf04      	itt	eq
 800624e:	1852      	addeq	r2, r2, r1
 8006250:	6022      	streq	r2, [r4, #0]
 8006252:	6004      	str	r4, [r0, #0]
 8006254:	e7ec      	b.n	8006230 <_free_r+0x24>
 8006256:	4613      	mov	r3, r2
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	b10a      	cbz	r2, 8006260 <_free_r+0x54>
 800625c:	42a2      	cmp	r2, r4
 800625e:	d9fa      	bls.n	8006256 <_free_r+0x4a>
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	1858      	adds	r0, r3, r1
 8006264:	42a0      	cmp	r0, r4
 8006266:	d10b      	bne.n	8006280 <_free_r+0x74>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	4401      	add	r1, r0
 800626c:	1858      	adds	r0, r3, r1
 800626e:	4282      	cmp	r2, r0
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	d1dd      	bne.n	8006230 <_free_r+0x24>
 8006274:	6810      	ldr	r0, [r2, #0]
 8006276:	6852      	ldr	r2, [r2, #4]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	4401      	add	r1, r0
 800627c:	6019      	str	r1, [r3, #0]
 800627e:	e7d7      	b.n	8006230 <_free_r+0x24>
 8006280:	d902      	bls.n	8006288 <_free_r+0x7c>
 8006282:	230c      	movs	r3, #12
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	e7d3      	b.n	8006230 <_free_r+0x24>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428a      	cmp	r2, r1
 800628e:	bf04      	itt	eq
 8006290:	6811      	ldreq	r1, [r2, #0]
 8006292:	6852      	ldreq	r2, [r2, #4]
 8006294:	6062      	str	r2, [r4, #4]
 8006296:	bf04      	itt	eq
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	605c      	str	r4, [r3, #4]
 800629e:	e7c7      	b.n	8006230 <_free_r+0x24>
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000220 	.word	0x20000220

080062a8 <_malloc_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	1ccd      	adds	r5, r1, #3
 80062ac:	f025 0503 	bic.w	r5, r5, #3
 80062b0:	3508      	adds	r5, #8
 80062b2:	2d0c      	cmp	r5, #12
 80062b4:	bf38      	it	cc
 80062b6:	250c      	movcc	r5, #12
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	4606      	mov	r6, r0
 80062bc:	db01      	blt.n	80062c2 <_malloc_r+0x1a>
 80062be:	42a9      	cmp	r1, r5
 80062c0:	d903      	bls.n	80062ca <_malloc_r+0x22>
 80062c2:	230c      	movs	r3, #12
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	2000      	movs	r0, #0
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	f000 f9d4 	bl	8006676 <__malloc_lock>
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <_malloc_r+0xac>)
 80062d0:	6814      	ldr	r4, [r2, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	b991      	cbnz	r1, 80062fc <_malloc_r+0x54>
 80062d6:	4c20      	ldr	r4, [pc, #128]	; (8006358 <_malloc_r+0xb0>)
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	b91b      	cbnz	r3, 80062e4 <_malloc_r+0x3c>
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f98f 	bl	8006600 <_sbrk_r>
 80062e2:	6020      	str	r0, [r4, #0]
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f000 f98a 	bl	8006600 <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d124      	bne.n	800633a <_malloc_r+0x92>
 80062f0:	230c      	movs	r3, #12
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f9bf 	bl	8006678 <__malloc_unlock>
 80062fa:	e7e4      	b.n	80062c6 <_malloc_r+0x1e>
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	1b5b      	subs	r3, r3, r5
 8006300:	d418      	bmi.n	8006334 <_malloc_r+0x8c>
 8006302:	2b0b      	cmp	r3, #11
 8006304:	d90f      	bls.n	8006326 <_malloc_r+0x7e>
 8006306:	600b      	str	r3, [r1, #0]
 8006308:	50cd      	str	r5, [r1, r3]
 800630a:	18cc      	adds	r4, r1, r3
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f9b3 	bl	8006678 <__malloc_unlock>
 8006312:	f104 000b 	add.w	r0, r4, #11
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	f020 0007 	bic.w	r0, r0, #7
 800631c:	1ac3      	subs	r3, r0, r3
 800631e:	d0d3      	beq.n	80062c8 <_malloc_r+0x20>
 8006320:	425a      	negs	r2, r3
 8006322:	50e2      	str	r2, [r4, r3]
 8006324:	e7d0      	b.n	80062c8 <_malloc_r+0x20>
 8006326:	428c      	cmp	r4, r1
 8006328:	684b      	ldr	r3, [r1, #4]
 800632a:	bf16      	itet	ne
 800632c:	6063      	strne	r3, [r4, #4]
 800632e:	6013      	streq	r3, [r2, #0]
 8006330:	460c      	movne	r4, r1
 8006332:	e7eb      	b.n	800630c <_malloc_r+0x64>
 8006334:	460c      	mov	r4, r1
 8006336:	6849      	ldr	r1, [r1, #4]
 8006338:	e7cc      	b.n	80062d4 <_malloc_r+0x2c>
 800633a:	1cc4      	adds	r4, r0, #3
 800633c:	f024 0403 	bic.w	r4, r4, #3
 8006340:	42a0      	cmp	r0, r4
 8006342:	d005      	beq.n	8006350 <_malloc_r+0xa8>
 8006344:	1a21      	subs	r1, r4, r0
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f95a 	bl	8006600 <_sbrk_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d0cf      	beq.n	80062f0 <_malloc_r+0x48>
 8006350:	6025      	str	r5, [r4, #0]
 8006352:	e7db      	b.n	800630c <_malloc_r+0x64>
 8006354:	20000220 	.word	0x20000220
 8006358:	20000224 	.word	0x20000224

0800635c <__ssputs_r>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	688e      	ldr	r6, [r1, #8]
 8006362:	429e      	cmp	r6, r3
 8006364:	4682      	mov	sl, r0
 8006366:	460c      	mov	r4, r1
 8006368:	4690      	mov	r8, r2
 800636a:	4699      	mov	r9, r3
 800636c:	d837      	bhi.n	80063de <__ssputs_r+0x82>
 800636e:	898a      	ldrh	r2, [r1, #12]
 8006370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006374:	d031      	beq.n	80063da <__ssputs_r+0x7e>
 8006376:	6825      	ldr	r5, [r4, #0]
 8006378:	6909      	ldr	r1, [r1, #16]
 800637a:	1a6f      	subs	r7, r5, r1
 800637c:	6965      	ldr	r5, [r4, #20]
 800637e:	2302      	movs	r3, #2
 8006380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006384:	fb95 f5f3 	sdiv	r5, r5, r3
 8006388:	f109 0301 	add.w	r3, r9, #1
 800638c:	443b      	add	r3, r7
 800638e:	429d      	cmp	r5, r3
 8006390:	bf38      	it	cc
 8006392:	461d      	movcc	r5, r3
 8006394:	0553      	lsls	r3, r2, #21
 8006396:	d530      	bpl.n	80063fa <__ssputs_r+0x9e>
 8006398:	4629      	mov	r1, r5
 800639a:	f7ff ff85 	bl	80062a8 <_malloc_r>
 800639e:	4606      	mov	r6, r0
 80063a0:	b950      	cbnz	r0, 80063b8 <__ssputs_r+0x5c>
 80063a2:	230c      	movs	r3, #12
 80063a4:	f8ca 3000 	str.w	r3, [sl]
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b8:	463a      	mov	r2, r7
 80063ba:	6921      	ldr	r1, [r4, #16]
 80063bc:	f7ff fc32 	bl	8005c24 <memcpy>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	6126      	str	r6, [r4, #16]
 80063ce:	6165      	str	r5, [r4, #20]
 80063d0:	443e      	add	r6, r7
 80063d2:	1bed      	subs	r5, r5, r7
 80063d4:	6026      	str	r6, [r4, #0]
 80063d6:	60a5      	str	r5, [r4, #8]
 80063d8:	464e      	mov	r6, r9
 80063da:	454e      	cmp	r6, r9
 80063dc:	d900      	bls.n	80063e0 <__ssputs_r+0x84>
 80063de:	464e      	mov	r6, r9
 80063e0:	4632      	mov	r2, r6
 80063e2:	4641      	mov	r1, r8
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	f000 f92d 	bl	8006644 <memmove>
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	1b9b      	subs	r3, r3, r6
 80063ee:	60a3      	str	r3, [r4, #8]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	441e      	add	r6, r3
 80063f4:	6026      	str	r6, [r4, #0]
 80063f6:	2000      	movs	r0, #0
 80063f8:	e7dc      	b.n	80063b4 <__ssputs_r+0x58>
 80063fa:	462a      	mov	r2, r5
 80063fc:	f000 f93d 	bl	800667a <_realloc_r>
 8006400:	4606      	mov	r6, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	d1e2      	bne.n	80063cc <__ssputs_r+0x70>
 8006406:	6921      	ldr	r1, [r4, #16]
 8006408:	4650      	mov	r0, sl
 800640a:	f7ff feff 	bl	800620c <_free_r>
 800640e:	e7c8      	b.n	80063a2 <__ssputs_r+0x46>

08006410 <_svfiprintf_r>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	461d      	mov	r5, r3
 8006416:	898b      	ldrh	r3, [r1, #12]
 8006418:	061f      	lsls	r7, r3, #24
 800641a:	b09d      	sub	sp, #116	; 0x74
 800641c:	4680      	mov	r8, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d50f      	bpl.n	8006444 <_svfiprintf_r+0x34>
 8006424:	690b      	ldr	r3, [r1, #16]
 8006426:	b96b      	cbnz	r3, 8006444 <_svfiprintf_r+0x34>
 8006428:	2140      	movs	r1, #64	; 0x40
 800642a:	f7ff ff3d 	bl	80062a8 <_malloc_r>
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	6120      	str	r0, [r4, #16]
 8006432:	b928      	cbnz	r0, 8006440 <_svfiprintf_r+0x30>
 8006434:	230c      	movs	r3, #12
 8006436:	f8c8 3000 	str.w	r3, [r8]
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e0c8      	b.n	80065d2 <_svfiprintf_r+0x1c2>
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	6163      	str	r3, [r4, #20]
 8006444:	2300      	movs	r3, #0
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	2320      	movs	r3, #32
 800644a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800644e:	2330      	movs	r3, #48	; 0x30
 8006450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006454:	9503      	str	r5, [sp, #12]
 8006456:	f04f 0b01 	mov.w	fp, #1
 800645a:	4637      	mov	r7, r6
 800645c:	463d      	mov	r5, r7
 800645e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006462:	b10b      	cbz	r3, 8006468 <_svfiprintf_r+0x58>
 8006464:	2b25      	cmp	r3, #37	; 0x25
 8006466:	d13e      	bne.n	80064e6 <_svfiprintf_r+0xd6>
 8006468:	ebb7 0a06 	subs.w	sl, r7, r6
 800646c:	d00b      	beq.n	8006486 <_svfiprintf_r+0x76>
 800646e:	4653      	mov	r3, sl
 8006470:	4632      	mov	r2, r6
 8006472:	4621      	mov	r1, r4
 8006474:	4640      	mov	r0, r8
 8006476:	f7ff ff71 	bl	800635c <__ssputs_r>
 800647a:	3001      	adds	r0, #1
 800647c:	f000 80a4 	beq.w	80065c8 <_svfiprintf_r+0x1b8>
 8006480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006482:	4453      	add	r3, sl
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	783b      	ldrb	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 809d 	beq.w	80065c8 <_svfiprintf_r+0x1b8>
 800648e:	2300      	movs	r3, #0
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	9307      	str	r3, [sp, #28]
 800649c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a0:	931a      	str	r3, [sp, #104]	; 0x68
 80064a2:	462f      	mov	r7, r5
 80064a4:	2205      	movs	r2, #5
 80064a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064aa:	4850      	ldr	r0, [pc, #320]	; (80065ec <_svfiprintf_r+0x1dc>)
 80064ac:	f7f9 fe98 	bl	80001e0 <memchr>
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	b9d0      	cbnz	r0, 80064ea <_svfiprintf_r+0xda>
 80064b4:	06d9      	lsls	r1, r3, #27
 80064b6:	bf44      	itt	mi
 80064b8:	2220      	movmi	r2, #32
 80064ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064be:	071a      	lsls	r2, r3, #28
 80064c0:	bf44      	itt	mi
 80064c2:	222b      	movmi	r2, #43	; 0x2b
 80064c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064c8:	782a      	ldrb	r2, [r5, #0]
 80064ca:	2a2a      	cmp	r2, #42	; 0x2a
 80064cc:	d015      	beq.n	80064fa <_svfiprintf_r+0xea>
 80064ce:	9a07      	ldr	r2, [sp, #28]
 80064d0:	462f      	mov	r7, r5
 80064d2:	2000      	movs	r0, #0
 80064d4:	250a      	movs	r5, #10
 80064d6:	4639      	mov	r1, r7
 80064d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064dc:	3b30      	subs	r3, #48	; 0x30
 80064de:	2b09      	cmp	r3, #9
 80064e0:	d94d      	bls.n	800657e <_svfiprintf_r+0x16e>
 80064e2:	b1b8      	cbz	r0, 8006514 <_svfiprintf_r+0x104>
 80064e4:	e00f      	b.n	8006506 <_svfiprintf_r+0xf6>
 80064e6:	462f      	mov	r7, r5
 80064e8:	e7b8      	b.n	800645c <_svfiprintf_r+0x4c>
 80064ea:	4a40      	ldr	r2, [pc, #256]	; (80065ec <_svfiprintf_r+0x1dc>)
 80064ec:	1a80      	subs	r0, r0, r2
 80064ee:	fa0b f000 	lsl.w	r0, fp, r0
 80064f2:	4318      	orrs	r0, r3
 80064f4:	9004      	str	r0, [sp, #16]
 80064f6:	463d      	mov	r5, r7
 80064f8:	e7d3      	b.n	80064a2 <_svfiprintf_r+0x92>
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	1d11      	adds	r1, r2, #4
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	9103      	str	r1, [sp, #12]
 8006502:	2a00      	cmp	r2, #0
 8006504:	db01      	blt.n	800650a <_svfiprintf_r+0xfa>
 8006506:	9207      	str	r2, [sp, #28]
 8006508:	e004      	b.n	8006514 <_svfiprintf_r+0x104>
 800650a:	4252      	negs	r2, r2
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	9207      	str	r2, [sp, #28]
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	783b      	ldrb	r3, [r7, #0]
 8006516:	2b2e      	cmp	r3, #46	; 0x2e
 8006518:	d10c      	bne.n	8006534 <_svfiprintf_r+0x124>
 800651a:	787b      	ldrb	r3, [r7, #1]
 800651c:	2b2a      	cmp	r3, #42	; 0x2a
 800651e:	d133      	bne.n	8006588 <_svfiprintf_r+0x178>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	9203      	str	r2, [sp, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	bfb8      	it	lt
 800652c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006530:	3702      	adds	r7, #2
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	4d2e      	ldr	r5, [pc, #184]	; (80065f0 <_svfiprintf_r+0x1e0>)
 8006536:	7839      	ldrb	r1, [r7, #0]
 8006538:	2203      	movs	r2, #3
 800653a:	4628      	mov	r0, r5
 800653c:	f7f9 fe50 	bl	80001e0 <memchr>
 8006540:	b138      	cbz	r0, 8006552 <_svfiprintf_r+0x142>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	1b40      	subs	r0, r0, r5
 8006546:	fa03 f000 	lsl.w	r0, r3, r0
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	4303      	orrs	r3, r0
 800654e:	3701      	adds	r7, #1
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	7839      	ldrb	r1, [r7, #0]
 8006554:	4827      	ldr	r0, [pc, #156]	; (80065f4 <_svfiprintf_r+0x1e4>)
 8006556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800655a:	2206      	movs	r2, #6
 800655c:	1c7e      	adds	r6, r7, #1
 800655e:	f7f9 fe3f 	bl	80001e0 <memchr>
 8006562:	2800      	cmp	r0, #0
 8006564:	d038      	beq.n	80065d8 <_svfiprintf_r+0x1c8>
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <_svfiprintf_r+0x1e8>)
 8006568:	bb13      	cbnz	r3, 80065b0 <_svfiprintf_r+0x1a0>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	3307      	adds	r3, #7
 800656e:	f023 0307 	bic.w	r3, r3, #7
 8006572:	3308      	adds	r3, #8
 8006574:	9303      	str	r3, [sp, #12]
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	444b      	add	r3, r9
 800657a:	9309      	str	r3, [sp, #36]	; 0x24
 800657c:	e76d      	b.n	800645a <_svfiprintf_r+0x4a>
 800657e:	fb05 3202 	mla	r2, r5, r2, r3
 8006582:	2001      	movs	r0, #1
 8006584:	460f      	mov	r7, r1
 8006586:	e7a6      	b.n	80064d6 <_svfiprintf_r+0xc6>
 8006588:	2300      	movs	r3, #0
 800658a:	3701      	adds	r7, #1
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	4619      	mov	r1, r3
 8006590:	250a      	movs	r5, #10
 8006592:	4638      	mov	r0, r7
 8006594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006598:	3a30      	subs	r2, #48	; 0x30
 800659a:	2a09      	cmp	r2, #9
 800659c:	d903      	bls.n	80065a6 <_svfiprintf_r+0x196>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c8      	beq.n	8006534 <_svfiprintf_r+0x124>
 80065a2:	9105      	str	r1, [sp, #20]
 80065a4:	e7c6      	b.n	8006534 <_svfiprintf_r+0x124>
 80065a6:	fb05 2101 	mla	r1, r5, r1, r2
 80065aa:	2301      	movs	r3, #1
 80065ac:	4607      	mov	r7, r0
 80065ae:	e7f0      	b.n	8006592 <_svfiprintf_r+0x182>
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4622      	mov	r2, r4
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <_svfiprintf_r+0x1ec>)
 80065b8:	a904      	add	r1, sp, #16
 80065ba:	4640      	mov	r0, r8
 80065bc:	f7fe f8ee 	bl	800479c <_printf_float>
 80065c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065c4:	4681      	mov	r9, r0
 80065c6:	d1d6      	bne.n	8006576 <_svfiprintf_r+0x166>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	065b      	lsls	r3, r3, #25
 80065cc:	f53f af35 	bmi.w	800643a <_svfiprintf_r+0x2a>
 80065d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065d2:	b01d      	add	sp, #116	; 0x74
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4622      	mov	r2, r4
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <_svfiprintf_r+0x1ec>)
 80065e0:	a904      	add	r1, sp, #16
 80065e2:	4640      	mov	r0, r8
 80065e4:	f7fe fb90 	bl	8004d08 <_printf_i>
 80065e8:	e7ea      	b.n	80065c0 <_svfiprintf_r+0x1b0>
 80065ea:	bf00      	nop
 80065ec:	0800793c 	.word	0x0800793c
 80065f0:	08007942 	.word	0x08007942
 80065f4:	08007946 	.word	0x08007946
 80065f8:	0800479d 	.word	0x0800479d
 80065fc:	0800635d 	.word	0x0800635d

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4c06      	ldr	r4, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4605      	mov	r5, r0
 8006608:	4608      	mov	r0, r1
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	f7fd fc4a 	bl	8003ea4 <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000238 	.word	0x20000238

08006620 <__ascii_mbtowc>:
 8006620:	b082      	sub	sp, #8
 8006622:	b901      	cbnz	r1, 8006626 <__ascii_mbtowc+0x6>
 8006624:	a901      	add	r1, sp, #4
 8006626:	b142      	cbz	r2, 800663a <__ascii_mbtowc+0x1a>
 8006628:	b14b      	cbz	r3, 800663e <__ascii_mbtowc+0x1e>
 800662a:	7813      	ldrb	r3, [r2, #0]
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	1c10      	adds	r0, r2, #0
 8006632:	bf18      	it	ne
 8006634:	2001      	movne	r0, #1
 8006636:	b002      	add	sp, #8
 8006638:	4770      	bx	lr
 800663a:	4610      	mov	r0, r2
 800663c:	e7fb      	b.n	8006636 <__ascii_mbtowc+0x16>
 800663e:	f06f 0001 	mvn.w	r0, #1
 8006642:	e7f8      	b.n	8006636 <__ascii_mbtowc+0x16>

08006644 <memmove>:
 8006644:	4288      	cmp	r0, r1
 8006646:	b510      	push	{r4, lr}
 8006648:	eb01 0302 	add.w	r3, r1, r2
 800664c:	d807      	bhi.n	800665e <memmove+0x1a>
 800664e:	1e42      	subs	r2, r0, #1
 8006650:	4299      	cmp	r1, r3
 8006652:	d00a      	beq.n	800666a <memmove+0x26>
 8006654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006658:	f802 4f01 	strb.w	r4, [r2, #1]!
 800665c:	e7f8      	b.n	8006650 <memmove+0xc>
 800665e:	4283      	cmp	r3, r0
 8006660:	d9f5      	bls.n	800664e <memmove+0xa>
 8006662:	1881      	adds	r1, r0, r2
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	42d3      	cmn	r3, r2
 8006668:	d100      	bne.n	800666c <memmove+0x28>
 800666a:	bd10      	pop	{r4, pc}
 800666c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006670:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006674:	e7f7      	b.n	8006666 <memmove+0x22>

08006676 <__malloc_lock>:
 8006676:	4770      	bx	lr

08006678 <__malloc_unlock>:
 8006678:	4770      	bx	lr

0800667a <_realloc_r>:
 800667a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667c:	4607      	mov	r7, r0
 800667e:	4614      	mov	r4, r2
 8006680:	460e      	mov	r6, r1
 8006682:	b921      	cbnz	r1, 800668e <_realloc_r+0x14>
 8006684:	4611      	mov	r1, r2
 8006686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800668a:	f7ff be0d 	b.w	80062a8 <_malloc_r>
 800668e:	b922      	cbnz	r2, 800669a <_realloc_r+0x20>
 8006690:	f7ff fdbc 	bl	800620c <_free_r>
 8006694:	4625      	mov	r5, r4
 8006696:	4628      	mov	r0, r5
 8006698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669a:	f000 f821 	bl	80066e0 <_malloc_usable_size_r>
 800669e:	42a0      	cmp	r0, r4
 80066a0:	d20f      	bcs.n	80066c2 <_realloc_r+0x48>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff fdff 	bl	80062a8 <_malloc_r>
 80066aa:	4605      	mov	r5, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d0f2      	beq.n	8006696 <_realloc_r+0x1c>
 80066b0:	4631      	mov	r1, r6
 80066b2:	4622      	mov	r2, r4
 80066b4:	f7ff fab6 	bl	8005c24 <memcpy>
 80066b8:	4631      	mov	r1, r6
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff fda6 	bl	800620c <_free_r>
 80066c0:	e7e9      	b.n	8006696 <_realloc_r+0x1c>
 80066c2:	4635      	mov	r5, r6
 80066c4:	e7e7      	b.n	8006696 <_realloc_r+0x1c>

080066c6 <__ascii_wctomb>:
 80066c6:	b149      	cbz	r1, 80066dc <__ascii_wctomb+0x16>
 80066c8:	2aff      	cmp	r2, #255	; 0xff
 80066ca:	bf85      	ittet	hi
 80066cc:	238a      	movhi	r3, #138	; 0x8a
 80066ce:	6003      	strhi	r3, [r0, #0]
 80066d0:	700a      	strbls	r2, [r1, #0]
 80066d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80066d6:	bf98      	it	ls
 80066d8:	2001      	movls	r0, #1
 80066da:	4770      	bx	lr
 80066dc:	4608      	mov	r0, r1
 80066de:	4770      	bx	lr

080066e0 <_malloc_usable_size_r>:
 80066e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e4:	1f18      	subs	r0, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfbc      	itt	lt
 80066ea:	580b      	ldrlt	r3, [r1, r0]
 80066ec:	18c0      	addlt	r0, r0, r3
 80066ee:	4770      	bx	lr

080066f0 <pow>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	ed2d 8b04 	vpush	{d8-d9}
 80066f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80069cc <pow+0x2dc>
 80066fc:	b08d      	sub	sp, #52	; 0x34
 80066fe:	ec57 6b10 	vmov	r6, r7, d0
 8006702:	ec55 4b11 	vmov	r4, r5, d1
 8006706:	f000 f963 	bl	80069d0 <__ieee754_pow>
 800670a:	f999 3000 	ldrsb.w	r3, [r9]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	eeb0 8a40 	vmov.f32	s16, s0
 8006716:	eef0 8a60 	vmov.f32	s17, s1
 800671a:	46c8      	mov	r8, r9
 800671c:	d05f      	beq.n	80067de <pow+0xee>
 800671e:	4622      	mov	r2, r4
 8006720:	462b      	mov	r3, r5
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7fa fa01 	bl	8000b2c <__aeabi_dcmpun>
 800672a:	4683      	mov	fp, r0
 800672c:	2800      	cmp	r0, #0
 800672e:	d156      	bne.n	80067de <pow+0xee>
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7fa f9f8 	bl	8000b2c <__aeabi_dcmpun>
 800673c:	9001      	str	r0, [sp, #4]
 800673e:	b1e8      	cbz	r0, 800677c <pow+0x8c>
 8006740:	2200      	movs	r2, #0
 8006742:	2300      	movs	r3, #0
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7fa f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800674c:	2800      	cmp	r0, #0
 800674e:	d046      	beq.n	80067de <pow+0xee>
 8006750:	2301      	movs	r3, #1
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	4b96      	ldr	r3, [pc, #600]	; (80069b0 <pow+0x2c0>)
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	4b96      	ldr	r3, [pc, #600]	; (80069b4 <pow+0x2c4>)
 800675a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800675e:	2200      	movs	r2, #0
 8006760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	2b02      	cmp	r3, #2
 8006768:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800676c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006770:	d033      	beq.n	80067da <pow+0xea>
 8006772:	a802      	add	r0, sp, #8
 8006774:	f000 fefb 	bl	800756e <matherr>
 8006778:	bb48      	cbnz	r0, 80067ce <pow+0xde>
 800677a:	e05d      	b.n	8006838 <pow+0x148>
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	f04f 0b00 	mov.w	fp, #0
 8006784:	4652      	mov	r2, sl
 8006786:	465b      	mov	r3, fp
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006790:	ec4b ab19 	vmov	d9, sl, fp
 8006794:	2800      	cmp	r0, #0
 8006796:	d054      	beq.n	8006842 <pow+0x152>
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	4620      	mov	r0, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	f7fa f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a4:	4680      	mov	r8, r0
 80067a6:	b318      	cbz	r0, 80067f0 <pow+0x100>
 80067a8:	2301      	movs	r3, #1
 80067aa:	9302      	str	r3, [sp, #8]
 80067ac:	4b80      	ldr	r3, [pc, #512]	; (80069b0 <pow+0x2c0>)
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	930a      	str	r3, [sp, #40]	; 0x28
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0d5      	beq.n	8006772 <pow+0x82>
 80067c6:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <pow+0x2c4>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	b11b      	cbz	r3, 80067da <pow+0xea>
 80067d2:	f7fd ff1d 	bl	8004610 <__errno>
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	ed9d 8b08 	vldr	d8, [sp, #32]
 80067de:	eeb0 0a48 	vmov.f32	s0, s16
 80067e2:	eef0 0a68 	vmov.f32	s1, s17
 80067e6:	b00d      	add	sp, #52	; 0x34
 80067e8:	ecbd 8b04 	vpop	{d8-d9}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	ec45 4b10 	vmov	d0, r4, r5
 80067f4:	f000 feb3 	bl	800755e <finite>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d0f0      	beq.n	80067de <pow+0xee>
 80067fc:	4652      	mov	r2, sl
 80067fe:	465b      	mov	r3, fp
 8006800:	4620      	mov	r0, r4
 8006802:	4629      	mov	r1, r5
 8006804:	f7fa f96a 	bl	8000adc <__aeabi_dcmplt>
 8006808:	2800      	cmp	r0, #0
 800680a:	d0e8      	beq.n	80067de <pow+0xee>
 800680c:	2301      	movs	r3, #1
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	4b67      	ldr	r3, [pc, #412]	; (80069b0 <pow+0x2c0>)
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	f999 3000 	ldrsb.w	r3, [r9]
 8006818:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800681c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006820:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006824:	b913      	cbnz	r3, 800682c <pow+0x13c>
 8006826:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800682a:	e7a2      	b.n	8006772 <pow+0x82>
 800682c:	4962      	ldr	r1, [pc, #392]	; (80069b8 <pow+0x2c8>)
 800682e:	2000      	movs	r0, #0
 8006830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d19c      	bne.n	8006772 <pow+0x82>
 8006838:	f7fd feea 	bl	8004610 <__errno>
 800683c:	2321      	movs	r3, #33	; 0x21
 800683e:	6003      	str	r3, [r0, #0]
 8006840:	e7c5      	b.n	80067ce <pow+0xde>
 8006842:	eeb0 0a48 	vmov.f32	s0, s16
 8006846:	eef0 0a68 	vmov.f32	s1, s17
 800684a:	f000 fe88 	bl	800755e <finite>
 800684e:	9000      	str	r0, [sp, #0]
 8006850:	2800      	cmp	r0, #0
 8006852:	f040 8081 	bne.w	8006958 <pow+0x268>
 8006856:	ec47 6b10 	vmov	d0, r6, r7
 800685a:	f000 fe80 	bl	800755e <finite>
 800685e:	2800      	cmp	r0, #0
 8006860:	d07a      	beq.n	8006958 <pow+0x268>
 8006862:	ec45 4b10 	vmov	d0, r4, r5
 8006866:	f000 fe7a 	bl	800755e <finite>
 800686a:	2800      	cmp	r0, #0
 800686c:	d074      	beq.n	8006958 <pow+0x268>
 800686e:	ec53 2b18 	vmov	r2, r3, d8
 8006872:	ee18 0a10 	vmov	r0, s16
 8006876:	4619      	mov	r1, r3
 8006878:	f7fa f958 	bl	8000b2c <__aeabi_dcmpun>
 800687c:	f999 9000 	ldrsb.w	r9, [r9]
 8006880:	4b4b      	ldr	r3, [pc, #300]	; (80069b0 <pow+0x2c0>)
 8006882:	b1b0      	cbz	r0, 80068b2 <pow+0x1c2>
 8006884:	2201      	movs	r2, #1
 8006886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	930a      	str	r3, [sp, #40]	; 0x28
 800688e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006892:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006896:	f1b9 0f00 	cmp.w	r9, #0
 800689a:	d0c4      	beq.n	8006826 <pow+0x136>
 800689c:	4652      	mov	r2, sl
 800689e:	465b      	mov	r3, fp
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	f7f9 ffd2 	bl	800084c <__aeabi_ddiv>
 80068a8:	f1b9 0f02 	cmp.w	r9, #2
 80068ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068b0:	e7c1      	b.n	8006836 <pow+0x146>
 80068b2:	2203      	movs	r2, #3
 80068b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068b8:	900a      	str	r0, [sp, #40]	; 0x28
 80068ba:	4629      	mov	r1, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	2200      	movs	r2, #0
 80068c0:	4b3e      	ldr	r3, [pc, #248]	; (80069bc <pow+0x2cc>)
 80068c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80068c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80068ca:	f7f9 fe95 	bl	80005f8 <__aeabi_dmul>
 80068ce:	4604      	mov	r4, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	f1b9 0f00 	cmp.w	r9, #0
 80068d6:	d124      	bne.n	8006922 <pow+0x232>
 80068d8:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <pow+0x2d0>)
 80068da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80068de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068e2:	4630      	mov	r0, r6
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7fa f8f7 	bl	8000adc <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d056      	beq.n	80069a0 <pow+0x2b0>
 80068f2:	ec45 4b10 	vmov	d0, r4, r5
 80068f6:	f000 fe47 	bl	8007588 <rint>
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	ec51 0b10 	vmov	r0, r1, d0
 8006902:	f7fa f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006906:	b920      	cbnz	r0, 8006912 <pow+0x222>
 8006908:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <pow+0x2d4>)
 800690a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800690e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006912:	f998 3000 	ldrsb.w	r3, [r8]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d142      	bne.n	80069a0 <pow+0x2b0>
 800691a:	f7fd fe79 	bl	8004610 <__errno>
 800691e:	2322      	movs	r3, #34	; 0x22
 8006920:	e78d      	b.n	800683e <pow+0x14e>
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <pow+0x2d8>)
 8006924:	2200      	movs	r2, #0
 8006926:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800692a:	4630      	mov	r0, r6
 800692c:	4652      	mov	r2, sl
 800692e:	465b      	mov	r3, fp
 8006930:	4639      	mov	r1, r7
 8006932:	f7fa f8d3 	bl	8000adc <__aeabi_dcmplt>
 8006936:	2800      	cmp	r0, #0
 8006938:	d0eb      	beq.n	8006912 <pow+0x222>
 800693a:	ec45 4b10 	vmov	d0, r4, r5
 800693e:	f000 fe23 	bl	8007588 <rint>
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	ec51 0b10 	vmov	r0, r1, d0
 800694a:	f7fa f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800694e:	2800      	cmp	r0, #0
 8006950:	d1df      	bne.n	8006912 <pow+0x222>
 8006952:	2200      	movs	r2, #0
 8006954:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <pow+0x2c8>)
 8006956:	e7da      	b.n	800690e <pow+0x21e>
 8006958:	2200      	movs	r2, #0
 800695a:	2300      	movs	r3, #0
 800695c:	ec51 0b18 	vmov	r0, r1, d8
 8006960:	f7fa f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006964:	2800      	cmp	r0, #0
 8006966:	f43f af3a 	beq.w	80067de <pow+0xee>
 800696a:	ec47 6b10 	vmov	d0, r6, r7
 800696e:	f000 fdf6 	bl	800755e <finite>
 8006972:	2800      	cmp	r0, #0
 8006974:	f43f af33 	beq.w	80067de <pow+0xee>
 8006978:	ec45 4b10 	vmov	d0, r4, r5
 800697c:	f000 fdef 	bl	800755e <finite>
 8006980:	2800      	cmp	r0, #0
 8006982:	f43f af2c 	beq.w	80067de <pow+0xee>
 8006986:	2304      	movs	r3, #4
 8006988:	9302      	str	r3, [sp, #8]
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <pow+0x2c0>)
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	2300      	movs	r3, #0
 8006990:	930a      	str	r3, [sp, #40]	; 0x28
 8006992:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006996:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800699a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800699e:	e7b8      	b.n	8006912 <pow+0x222>
 80069a0:	a802      	add	r0, sp, #8
 80069a2:	f000 fde4 	bl	800756e <matherr>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f47f af11 	bne.w	80067ce <pow+0xde>
 80069ac:	e7b5      	b.n	800691a <pow+0x22a>
 80069ae:	bf00      	nop
 80069b0:	08007a58 	.word	0x08007a58
 80069b4:	3ff00000 	.word	0x3ff00000
 80069b8:	fff00000 	.word	0xfff00000
 80069bc:	3fe00000 	.word	0x3fe00000
 80069c0:	47efffff 	.word	0x47efffff
 80069c4:	c7efffff 	.word	0xc7efffff
 80069c8:	7ff00000 	.word	0x7ff00000
 80069cc:	200001d8 	.word	0x200001d8

080069d0 <__ieee754_pow>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	b091      	sub	sp, #68	; 0x44
 80069d6:	ed8d 1b00 	vstr	d1, [sp]
 80069da:	e9dd 2900 	ldrd	r2, r9, [sp]
 80069de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80069e2:	ea58 0302 	orrs.w	r3, r8, r2
 80069e6:	ec57 6b10 	vmov	r6, r7, d0
 80069ea:	f000 84be 	beq.w	800736a <__ieee754_pow+0x99a>
 80069ee:	4b7a      	ldr	r3, [pc, #488]	; (8006bd8 <__ieee754_pow+0x208>)
 80069f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80069f4:	429c      	cmp	r4, r3
 80069f6:	463d      	mov	r5, r7
 80069f8:	ee10 aa10 	vmov	sl, s0
 80069fc:	dc09      	bgt.n	8006a12 <__ieee754_pow+0x42>
 80069fe:	d103      	bne.n	8006a08 <__ieee754_pow+0x38>
 8006a00:	b93e      	cbnz	r6, 8006a12 <__ieee754_pow+0x42>
 8006a02:	45a0      	cmp	r8, r4
 8006a04:	dc0d      	bgt.n	8006a22 <__ieee754_pow+0x52>
 8006a06:	e001      	b.n	8006a0c <__ieee754_pow+0x3c>
 8006a08:	4598      	cmp	r8, r3
 8006a0a:	dc02      	bgt.n	8006a12 <__ieee754_pow+0x42>
 8006a0c:	4598      	cmp	r8, r3
 8006a0e:	d10e      	bne.n	8006a2e <__ieee754_pow+0x5e>
 8006a10:	b16a      	cbz	r2, 8006a2e <__ieee754_pow+0x5e>
 8006a12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006a16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a1a:	ea54 030a 	orrs.w	r3, r4, sl
 8006a1e:	f000 84a4 	beq.w	800736a <__ieee754_pow+0x99a>
 8006a22:	486e      	ldr	r0, [pc, #440]	; (8006bdc <__ieee754_pow+0x20c>)
 8006a24:	b011      	add	sp, #68	; 0x44
 8006a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f000 bda5 	b.w	8007578 <nan>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	da53      	bge.n	8006ada <__ieee754_pow+0x10a>
 8006a32:	4b6b      	ldr	r3, [pc, #428]	; (8006be0 <__ieee754_pow+0x210>)
 8006a34:	4598      	cmp	r8, r3
 8006a36:	dc4d      	bgt.n	8006ad4 <__ieee754_pow+0x104>
 8006a38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a3c:	4598      	cmp	r8, r3
 8006a3e:	dd4c      	ble.n	8006ada <__ieee754_pow+0x10a>
 8006a40:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a48:	2b14      	cmp	r3, #20
 8006a4a:	dd26      	ble.n	8006a9a <__ieee754_pow+0xca>
 8006a4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a50:	fa22 f103 	lsr.w	r1, r2, r3
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d13e      	bne.n	8006ada <__ieee754_pow+0x10a>
 8006a5c:	f001 0101 	and.w	r1, r1, #1
 8006a60:	f1c1 0b02 	rsb	fp, r1, #2
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d15b      	bne.n	8006b20 <__ieee754_pow+0x150>
 8006a68:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <__ieee754_pow+0x208>)
 8006a6a:	4598      	cmp	r8, r3
 8006a6c:	d124      	bne.n	8006ab8 <__ieee754_pow+0xe8>
 8006a6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a76:	ea53 030a 	orrs.w	r3, r3, sl
 8006a7a:	f000 8476 	beq.w	800736a <__ieee754_pow+0x99a>
 8006a7e:	4b59      	ldr	r3, [pc, #356]	; (8006be4 <__ieee754_pow+0x214>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	dd2d      	ble.n	8006ae0 <__ieee754_pow+0x110>
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	f280 8473 	bge.w	8007372 <__ieee754_pow+0x9a2>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	ec41 0b10 	vmov	d0, r0, r1
 8006a94:	b011      	add	sp, #68	; 0x44
 8006a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d13e      	bne.n	8006b1c <__ieee754_pow+0x14c>
 8006a9e:	f1c3 0314 	rsb	r3, r3, #20
 8006aa2:	fa48 f103 	asr.w	r1, r8, r3
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	4543      	cmp	r3, r8
 8006aac:	f040 8469 	bne.w	8007382 <__ieee754_pow+0x9b2>
 8006ab0:	f001 0101 	and.w	r1, r1, #1
 8006ab4:	f1c1 0b02 	rsb	fp, r1, #2
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	; (8006be8 <__ieee754_pow+0x218>)
 8006aba:	4598      	cmp	r8, r3
 8006abc:	d118      	bne.n	8006af0 <__ieee754_pow+0x120>
 8006abe:	f1b9 0f00 	cmp.w	r9, #0
 8006ac2:	f280 845a 	bge.w	800737a <__ieee754_pow+0x9aa>
 8006ac6:	4948      	ldr	r1, [pc, #288]	; (8006be8 <__ieee754_pow+0x218>)
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	2000      	movs	r0, #0
 8006ace:	f7f9 febd 	bl	800084c <__aeabi_ddiv>
 8006ad2:	e7dd      	b.n	8006a90 <__ieee754_pow+0xc0>
 8006ad4:	f04f 0b02 	mov.w	fp, #2
 8006ad8:	e7c4      	b.n	8006a64 <__ieee754_pow+0x94>
 8006ada:	f04f 0b00 	mov.w	fp, #0
 8006ade:	e7c1      	b.n	8006a64 <__ieee754_pow+0x94>
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	dad2      	bge.n	8006a8c <__ieee754_pow+0xbc>
 8006ae6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006aea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006aee:	e7cf      	b.n	8006a90 <__ieee754_pow+0xc0>
 8006af0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006af4:	d106      	bne.n	8006b04 <__ieee754_pow+0x134>
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	4610      	mov	r0, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	e7c5      	b.n	8006a90 <__ieee754_pow+0xc0>
 8006b04:	4b39      	ldr	r3, [pc, #228]	; (8006bec <__ieee754_pow+0x21c>)
 8006b06:	4599      	cmp	r9, r3
 8006b08:	d10a      	bne.n	8006b20 <__ieee754_pow+0x150>
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	db08      	blt.n	8006b20 <__ieee754_pow+0x150>
 8006b0e:	ec47 6b10 	vmov	d0, r6, r7
 8006b12:	b011      	add	sp, #68	; 0x44
 8006b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	f000 bc68 	b.w	80073ec <__ieee754_sqrt>
 8006b1c:	f04f 0b00 	mov.w	fp, #0
 8006b20:	ec47 6b10 	vmov	d0, r6, r7
 8006b24:	f000 fd12 	bl	800754c <fabs>
 8006b28:	ec51 0b10 	vmov	r0, r1, d0
 8006b2c:	f1ba 0f00 	cmp.w	sl, #0
 8006b30:	d127      	bne.n	8006b82 <__ieee754_pow+0x1b2>
 8006b32:	b124      	cbz	r4, 8006b3e <__ieee754_pow+0x16e>
 8006b34:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <__ieee754_pow+0x218>)
 8006b36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d121      	bne.n	8006b82 <__ieee754_pow+0x1b2>
 8006b3e:	f1b9 0f00 	cmp.w	r9, #0
 8006b42:	da05      	bge.n	8006b50 <__ieee754_pow+0x180>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	2000      	movs	r0, #0
 8006b4a:	4927      	ldr	r1, [pc, #156]	; (8006be8 <__ieee754_pow+0x218>)
 8006b4c:	f7f9 fe7e 	bl	800084c <__aeabi_ddiv>
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	da9d      	bge.n	8006a90 <__ieee754_pow+0xc0>
 8006b54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b5c:	ea54 030b 	orrs.w	r3, r4, fp
 8006b60:	d108      	bne.n	8006b74 <__ieee754_pow+0x1a4>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f7f9 fb8d 	bl	8000288 <__aeabi_dsub>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	e7ac      	b.n	8006ace <__ieee754_pow+0xfe>
 8006b74:	f1bb 0f01 	cmp.w	fp, #1
 8006b78:	d18a      	bne.n	8006a90 <__ieee754_pow+0xc0>
 8006b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b7e:	4619      	mov	r1, r3
 8006b80:	e786      	b.n	8006a90 <__ieee754_pow+0xc0>
 8006b82:	0fed      	lsrs	r5, r5, #31
 8006b84:	1e6b      	subs	r3, r5, #1
 8006b86:	930d      	str	r3, [sp, #52]	; 0x34
 8006b88:	ea5b 0303 	orrs.w	r3, fp, r3
 8006b8c:	d102      	bne.n	8006b94 <__ieee754_pow+0x1c4>
 8006b8e:	4632      	mov	r2, r6
 8006b90:	463b      	mov	r3, r7
 8006b92:	e7e8      	b.n	8006b66 <__ieee754_pow+0x196>
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <__ieee754_pow+0x220>)
 8006b96:	4598      	cmp	r8, r3
 8006b98:	f340 80fe 	ble.w	8006d98 <__ieee754_pow+0x3c8>
 8006b9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ba0:	4598      	cmp	r8, r3
 8006ba2:	dd0a      	ble.n	8006bba <__ieee754_pow+0x1ea>
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <__ieee754_pow+0x214>)
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	dc0d      	bgt.n	8006bc6 <__ieee754_pow+0x1f6>
 8006baa:	f1b9 0f00 	cmp.w	r9, #0
 8006bae:	f6bf af6d 	bge.w	8006a8c <__ieee754_pow+0xbc>
 8006bb2:	a307      	add	r3, pc, #28	; (adr r3, 8006bd0 <__ieee754_pow+0x200>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	e79f      	b.n	8006afa <__ieee754_pow+0x12a>
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <__ieee754_pow+0x224>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	ddf4      	ble.n	8006baa <__ieee754_pow+0x1da>
 8006bc0:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <__ieee754_pow+0x218>)
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	dd18      	ble.n	8006bf8 <__ieee754_pow+0x228>
 8006bc6:	f1b9 0f00 	cmp.w	r9, #0
 8006bca:	dcf2      	bgt.n	8006bb2 <__ieee754_pow+0x1e2>
 8006bcc:	e75e      	b.n	8006a8c <__ieee754_pow+0xbc>
 8006bce:	bf00      	nop
 8006bd0:	8800759c 	.word	0x8800759c
 8006bd4:	7e37e43c 	.word	0x7e37e43c
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	08007941 	.word	0x08007941
 8006be0:	433fffff 	.word	0x433fffff
 8006be4:	3fefffff 	.word	0x3fefffff
 8006be8:	3ff00000 	.word	0x3ff00000
 8006bec:	3fe00000 	.word	0x3fe00000
 8006bf0:	41e00000 	.word	0x41e00000
 8006bf4:	3feffffe 	.word	0x3feffffe
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4b63      	ldr	r3, [pc, #396]	; (8006d88 <__ieee754_pow+0x3b8>)
 8006bfc:	f7f9 fb44 	bl	8000288 <__aeabi_dsub>
 8006c00:	a355      	add	r3, pc, #340	; (adr r3, 8006d58 <__ieee754_pow+0x388>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	4604      	mov	r4, r0
 8006c08:	460d      	mov	r5, r1
 8006c0a:	f7f9 fcf5 	bl	80005f8 <__aeabi_dmul>
 8006c0e:	a354      	add	r3, pc, #336	; (adr r3, 8006d60 <__ieee754_pow+0x390>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fcec 	bl	80005f8 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c26:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <__ieee754_pow+0x3bc>)
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	a14c      	add	r1, pc, #304	; (adr r1, 8006d68 <__ieee754_pow+0x398>)
 8006c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3a:	f7f9 fb25 	bl	8000288 <__aeabi_dsub>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fcd9 	bl	80005f8 <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	4950      	ldr	r1, [pc, #320]	; (8006d90 <__ieee754_pow+0x3c0>)
 8006c4e:	f7f9 fb1b 	bl	8000288 <__aeabi_dsub>
 8006c52:	4622      	mov	r2, r4
 8006c54:	462b      	mov	r3, r5
 8006c56:	4680      	mov	r8, r0
 8006c58:	4689      	mov	r9, r1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fcc5 	bl	80005f8 <__aeabi_dmul>
 8006c6e:	a340      	add	r3, pc, #256	; (adr r3, 8006d70 <__ieee754_pow+0x3a0>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fcc0 	bl	80005f8 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c80:	f7f9 fb02 	bl	8000288 <__aeabi_dsub>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fafc 	bl	800028c <__adddf3>
 8006c94:	2000      	movs	r0, #0
 8006c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 faed 	bl	8000288 <__aeabi_dsub>
 8006cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	f040 81eb 	bne.w	8007094 <__ieee754_pow+0x6c4>
 8006cbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006d78 <__ieee754_pow+0x3a8>
 8006cc2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	4622      	mov	r2, r4
 8006cca:	462b      	mov	r3, r5
 8006ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cd4:	f7f9 fad8 	bl	8000288 <__aeabi_dsub>
 8006cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4689      	mov	r9, r1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	f7f9 fac8 	bl	800028c <__adddf3>
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	462b      	mov	r3, r5
 8006d00:	4680      	mov	r8, r0
 8006d02:	4689      	mov	r9, r1
 8006d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d08:	f7f9 fc76 	bl	80005f8 <__aeabi_dmul>
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	4602      	mov	r2, r0
 8006d14:	4649      	mov	r1, r9
 8006d16:	4640      	mov	r0, r8
 8006d18:	e9cd 4500 	strd	r4, r5, [sp]
 8006d1c:	f7f9 fab6 	bl	800028c <__adddf3>
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <__ieee754_pow+0x3c4>)
 8006d22:	4299      	cmp	r1, r3
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	468b      	mov	fp, r1
 8006d2a:	f340 82f7 	ble.w	800731c <__ieee754_pow+0x94c>
 8006d2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d36:	4303      	orrs	r3, r0
 8006d38:	f000 81ea 	beq.w	8007110 <__ieee754_pow+0x740>
 8006d3c:	a310      	add	r3, pc, #64	; (adr r3, 8006d80 <__ieee754_pow+0x3b0>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d46:	f7f9 fc57 	bl	80005f8 <__aeabi_dmul>
 8006d4a:	a30d      	add	r3, pc, #52	; (adr r3, 8006d80 <__ieee754_pow+0x3b0>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	e6d5      	b.n	8006afe <__ieee754_pow+0x12e>
 8006d52:	bf00      	nop
 8006d54:	f3af 8000 	nop.w
 8006d58:	60000000 	.word	0x60000000
 8006d5c:	3ff71547 	.word	0x3ff71547
 8006d60:	f85ddf44 	.word	0xf85ddf44
 8006d64:	3e54ae0b 	.word	0x3e54ae0b
 8006d68:	55555555 	.word	0x55555555
 8006d6c:	3fd55555 	.word	0x3fd55555
 8006d70:	652b82fe 	.word	0x652b82fe
 8006d74:	3ff71547 	.word	0x3ff71547
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	bff00000 	.word	0xbff00000
 8006d80:	8800759c 	.word	0x8800759c
 8006d84:	7e37e43c 	.word	0x7e37e43c
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	3fd00000 	.word	0x3fd00000
 8006d90:	3fe00000 	.word	0x3fe00000
 8006d94:	408fffff 	.word	0x408fffff
 8006d98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	da05      	bge.n	8006dae <__ieee754_pow+0x3de>
 8006da2:	4bd3      	ldr	r3, [pc, #844]	; (80070f0 <__ieee754_pow+0x720>)
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006dac:	460c      	mov	r4, r1
 8006dae:	1523      	asrs	r3, r4, #20
 8006db0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006db4:	4413      	add	r3, r2
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	4bce      	ldr	r3, [pc, #824]	; (80070f4 <__ieee754_pow+0x724>)
 8006dba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006dbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dc8:	dd08      	ble.n	8006ddc <__ieee754_pow+0x40c>
 8006dca:	4bcb      	ldr	r3, [pc, #812]	; (80070f8 <__ieee754_pow+0x728>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	f340 815e 	ble.w	800708e <__ieee754_pow+0x6be>
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006ddc:	f04f 0a00 	mov.w	sl, #0
 8006de0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006de4:	930c      	str	r3, [sp, #48]	; 0x30
 8006de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006de8:	4bc4      	ldr	r3, [pc, #784]	; (80070fc <__ieee754_pow+0x72c>)
 8006dea:	4413      	add	r3, r2
 8006dec:	ed93 7b00 	vldr	d7, [r3]
 8006df0:	4629      	mov	r1, r5
 8006df2:	ec53 2b17 	vmov	r2, r3, d7
 8006df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006dfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006dfe:	f7f9 fa43 	bl	8000288 <__aeabi_dsub>
 8006e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e0e:	f7f9 fa3d 	bl	800028c <__adddf3>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	2000      	movs	r0, #0
 8006e18:	49b9      	ldr	r1, [pc, #740]	; (8007100 <__ieee754_pow+0x730>)
 8006e1a:	f7f9 fd17 	bl	800084c <__aeabi_ddiv>
 8006e1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	f7f9 fbe5 	bl	80005f8 <__aeabi_dmul>
 8006e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e42:	106d      	asrs	r5, r5, #1
 8006e44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	4614      	mov	r4, r2
 8006e58:	461d      	mov	r5, r3
 8006e5a:	f7f9 fbcd 	bl	80005f8 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 fa0f 	bl	8000288 <__aeabi_dsub>
 8006e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 fa07 	bl	8000288 <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e82:	f7f9 fa01 	bl	8000288 <__aeabi_dsub>
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	f7f9 fbb5 	bl	80005f8 <__aeabi_dmul>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e9e:	f7f9 fbab 	bl	80005f8 <__aeabi_dmul>
 8006ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	a37b      	add	r3, pc, #492	; (adr r3, 80070a0 <__ieee754_pow+0x6d0>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	f7f9 fb9c 	bl	80005f8 <__aeabi_dmul>
 8006ec0:	a379      	add	r3, pc, #484	; (adr r3, 80070a8 <__ieee754_pow+0x6d8>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f9e1 	bl	800028c <__adddf3>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 fb93 	bl	80005f8 <__aeabi_dmul>
 8006ed2:	a377      	add	r3, pc, #476	; (adr r3, 80070b0 <__ieee754_pow+0x6e0>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f9d8 	bl	800028c <__adddf3>
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f7f9 fb8a 	bl	80005f8 <__aeabi_dmul>
 8006ee4:	a374      	add	r3, pc, #464	; (adr r3, 80070b8 <__ieee754_pow+0x6e8>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f9cf 	bl	800028c <__adddf3>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	a372      	add	r3, pc, #456	; (adr r3, 80070c0 <__ieee754_pow+0x6f0>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 f9c6 	bl	800028c <__adddf3>
 8006f00:	4622      	mov	r2, r4
 8006f02:	462b      	mov	r3, r5
 8006f04:	f7f9 fb78 	bl	80005f8 <__aeabi_dmul>
 8006f08:	a36f      	add	r3, pc, #444	; (adr r3, 80070c8 <__ieee754_pow+0x6f8>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 f9bd 	bl	800028c <__adddf3>
 8006f12:	4622      	mov	r2, r4
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	462b      	mov	r3, r5
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 fb65 	bl	80005f8 <__aeabi_dmul>
 8006f2e:	4642      	mov	r2, r8
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	464b      	mov	r3, r9
 8006f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3a:	f7f9 f9a7 	bl	800028c <__adddf3>
 8006f3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f42:	f7f9 fb59 	bl	80005f8 <__aeabi_dmul>
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f7f9 f99f 	bl	800028c <__adddf3>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	464b      	mov	r3, r9
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4b68      	ldr	r3, [pc, #416]	; (8007104 <__ieee754_pow+0x734>)
 8006f62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f66:	f7f9 f991 	bl	800028c <__adddf3>
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	f7f9 f98d 	bl	800028c <__adddf3>
 8006f72:	9802      	ldr	r0, [sp, #8]
 8006f74:	460d      	mov	r5, r1
 8006f76:	4604      	mov	r4, r0
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	4649      	mov	r1, r9
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	2200      	movs	r2, #0
 8006f86:	4680      	mov	r8, r0
 8006f88:	4689      	mov	r9, r1
 8006f8a:	4b5e      	ldr	r3, [pc, #376]	; (8007104 <__ieee754_pow+0x734>)
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4629      	mov	r1, r5
 8006f90:	f7f9 f97a 	bl	8000288 <__aeabi_dsub>
 8006f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f98:	f7f9 f976 	bl	8000288 <__aeabi_dsub>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 f970 	bl	8000288 <__aeabi_dsub>
 8006fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fbc:	f7f9 fb1c 	bl	80005f8 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 f960 	bl	800028c <__adddf3>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 f958 	bl	800028c <__adddf3>
 8006fdc:	9802      	ldr	r0, [sp, #8]
 8006fde:	a33c      	add	r3, pc, #240	; (adr r3, 80070d0 <__ieee754_pow+0x700>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	4642      	mov	r2, r8
 8006fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 f946 	bl	8000288 <__aeabi_dsub>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f940 	bl	8000288 <__aeabi_dsub>
 8007008:	a333      	add	r3, pc, #204	; (adr r3, 80070d8 <__ieee754_pow+0x708>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 faf3 	bl	80005f8 <__aeabi_dmul>
 8007012:	a333      	add	r3, pc, #204	; (adr r3, 80070e0 <__ieee754_pow+0x710>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	4606      	mov	r6, r0
 800701a:	460f      	mov	r7, r1
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 faea 	bl	80005f8 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 f92e 	bl	800028c <__adddf3>
 8007030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007032:	4b35      	ldr	r3, [pc, #212]	; (8007108 <__ieee754_pow+0x738>)
 8007034:	4413      	add	r3, r2
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f927 	bl	800028c <__adddf3>
 800703e:	4604      	mov	r4, r0
 8007040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007042:	460d      	mov	r5, r1
 8007044:	f7f9 fa6e 	bl	8000524 <__aeabi_i2d>
 8007048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800704a:	4b30      	ldr	r3, [pc, #192]	; (800710c <__ieee754_pow+0x73c>)
 800704c:	4413      	add	r3, r2
 800704e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007052:	4606      	mov	r6, r0
 8007054:	460f      	mov	r7, r1
 8007056:	4622      	mov	r2, r4
 8007058:	462b      	mov	r3, r5
 800705a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800705e:	f7f9 f915 	bl	800028c <__adddf3>
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	f7f9 f911 	bl	800028c <__adddf3>
 800706a:	4632      	mov	r2, r6
 800706c:	463b      	mov	r3, r7
 800706e:	f7f9 f90d 	bl	800028c <__adddf3>
 8007072:	9802      	ldr	r0, [sp, #8]
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800707c:	f7f9 f904 	bl	8000288 <__aeabi_dsub>
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	f7f9 f900 	bl	8000288 <__aeabi_dsub>
 8007088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800708c:	e607      	b.n	8006c9e <__ieee754_pow+0x2ce>
 800708e:	f04f 0a01 	mov.w	sl, #1
 8007092:	e6a5      	b.n	8006de0 <__ieee754_pow+0x410>
 8007094:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80070e8 <__ieee754_pow+0x718>
 8007098:	e613      	b.n	8006cc2 <__ieee754_pow+0x2f2>
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w
 80070a0:	4a454eef 	.word	0x4a454eef
 80070a4:	3fca7e28 	.word	0x3fca7e28
 80070a8:	93c9db65 	.word	0x93c9db65
 80070ac:	3fcd864a 	.word	0x3fcd864a
 80070b0:	a91d4101 	.word	0xa91d4101
 80070b4:	3fd17460 	.word	0x3fd17460
 80070b8:	518f264d 	.word	0x518f264d
 80070bc:	3fd55555 	.word	0x3fd55555
 80070c0:	db6fabff 	.word	0xdb6fabff
 80070c4:	3fdb6db6 	.word	0x3fdb6db6
 80070c8:	33333303 	.word	0x33333303
 80070cc:	3fe33333 	.word	0x3fe33333
 80070d0:	e0000000 	.word	0xe0000000
 80070d4:	3feec709 	.word	0x3feec709
 80070d8:	dc3a03fd 	.word	0xdc3a03fd
 80070dc:	3feec709 	.word	0x3feec709
 80070e0:	145b01f5 	.word	0x145b01f5
 80070e4:	be3e2fe0 	.word	0xbe3e2fe0
 80070e8:	00000000 	.word	0x00000000
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	43400000 	.word	0x43400000
 80070f4:	0003988e 	.word	0x0003988e
 80070f8:	000bb679 	.word	0x000bb679
 80070fc:	08007a60 	.word	0x08007a60
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	40080000 	.word	0x40080000
 8007108:	08007a80 	.word	0x08007a80
 800710c:	08007a70 	.word	0x08007a70
 8007110:	a3b4      	add	r3, pc, #720	; (adr r3, 80073e4 <__ieee754_pow+0xa14>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 f8b7 	bl	800028c <__adddf3>
 800711e:	4622      	mov	r2, r4
 8007120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007124:	462b      	mov	r3, r5
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 f8ad 	bl	8000288 <__aeabi_dsub>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007136:	f7f9 fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800713a:	2800      	cmp	r0, #0
 800713c:	f47f adfe 	bne.w	8006d3c <__ieee754_pow+0x36c>
 8007140:	4aa3      	ldr	r2, [pc, #652]	; (80073d0 <__ieee754_pow+0xa00>)
 8007142:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007146:	4293      	cmp	r3, r2
 8007148:	f340 810a 	ble.w	8007360 <__ieee754_pow+0x990>
 800714c:	151b      	asrs	r3, r3, #20
 800714e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007152:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007156:	fa4a f303 	asr.w	r3, sl, r3
 800715a:	445b      	add	r3, fp
 800715c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007160:	4e9c      	ldr	r6, [pc, #624]	; (80073d4 <__ieee754_pow+0xa04>)
 8007162:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007166:	4116      	asrs	r6, r2
 8007168:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800716c:	2000      	movs	r0, #0
 800716e:	ea23 0106 	bic.w	r1, r3, r6
 8007172:	f1c2 0214 	rsb	r2, r2, #20
 8007176:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800717a:	fa4a fa02 	asr.w	sl, sl, r2
 800717e:	f1bb 0f00 	cmp.w	fp, #0
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	bfb8      	it	lt
 800718c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007190:	f7f9 f87a 	bl	8000288 <__aeabi_dsub>
 8007194:	e9cd 0100 	strd	r0, r1, [sp]
 8007198:	4642      	mov	r2, r8
 800719a:	464b      	mov	r3, r9
 800719c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071a0:	f7f9 f874 	bl	800028c <__adddf3>
 80071a4:	2000      	movs	r0, #0
 80071a6:	a378      	add	r3, pc, #480	; (adr r3, 8007388 <__ieee754_pow+0x9b8>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	f7f9 fa22 	bl	80005f8 <__aeabi_dmul>
 80071b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b8:	4606      	mov	r6, r0
 80071ba:	460f      	mov	r7, r1
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f7f9 f862 	bl	8000288 <__aeabi_dsub>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 f85c 	bl	8000288 <__aeabi_dsub>
 80071d0:	a36f      	add	r3, pc, #444	; (adr r3, 8007390 <__ieee754_pow+0x9c0>)
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80071da:	a36f      	add	r3, pc, #444	; (adr r3, 8007398 <__ieee754_pow+0x9c8>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 fa06 	bl	80005f8 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	f7f9 f84a 	bl	800028c <__adddf3>
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 f842 	bl	800028c <__adddf3>
 8007208:	4632      	mov	r2, r6
 800720a:	463b      	mov	r3, r7
 800720c:	4680      	mov	r8, r0
 800720e:	4689      	mov	r9, r1
 8007210:	f7f9 f83a 	bl	8000288 <__aeabi_dsub>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4620      	mov	r0, r4
 800721a:	4629      	mov	r1, r5
 800721c:	f7f9 f834 	bl	8000288 <__aeabi_dsub>
 8007220:	4642      	mov	r2, r8
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	464b      	mov	r3, r9
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	a35b      	add	r3, pc, #364	; (adr r3, 80073a0 <__ieee754_pow+0x9d0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
 800723a:	f7f9 f9dd 	bl	80005f8 <__aeabi_dmul>
 800723e:	a35a      	add	r3, pc, #360	; (adr r3, 80073a8 <__ieee754_pow+0x9d8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 f820 	bl	8000288 <__aeabi_dsub>
 8007248:	4622      	mov	r2, r4
 800724a:	462b      	mov	r3, r5
 800724c:	f7f9 f9d4 	bl	80005f8 <__aeabi_dmul>
 8007250:	a357      	add	r3, pc, #348	; (adr r3, 80073b0 <__ieee754_pow+0x9e0>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f9 f819 	bl	800028c <__adddf3>
 800725a:	4622      	mov	r2, r4
 800725c:	462b      	mov	r3, r5
 800725e:	f7f9 f9cb 	bl	80005f8 <__aeabi_dmul>
 8007262:	a355      	add	r3, pc, #340	; (adr r3, 80073b8 <__ieee754_pow+0x9e8>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 f80e 	bl	8000288 <__aeabi_dsub>
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f9 f9c2 	bl	80005f8 <__aeabi_dmul>
 8007274:	a352      	add	r3, pc, #328	; (adr r3, 80073c0 <__ieee754_pow+0x9f0>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f9 f807 	bl	800028c <__adddf3>
 800727e:	4622      	mov	r2, r4
 8007280:	462b      	mov	r3, r5
 8007282:	f7f9 f9b9 	bl	80005f8 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4640      	mov	r0, r8
 800728c:	4649      	mov	r1, r9
 800728e:	f7f8 fffb 	bl	8000288 <__aeabi_dsub>
 8007292:	4604      	mov	r4, r0
 8007294:	460d      	mov	r5, r1
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	4640      	mov	r0, r8
 800729c:	4649      	mov	r1, r9
 800729e:	f7f9 f9ab 	bl	80005f8 <__aeabi_dmul>
 80072a2:	2200      	movs	r2, #0
 80072a4:	e9cd 0100 	strd	r0, r1, [sp]
 80072a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072ac:	4620      	mov	r0, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	f7f8 ffea 	bl	8000288 <__aeabi_dsub>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072bc:	f7f9 fac6 	bl	800084c <__aeabi_ddiv>
 80072c0:	4632      	mov	r2, r6
 80072c2:	4604      	mov	r4, r0
 80072c4:	460d      	mov	r5, r1
 80072c6:	463b      	mov	r3, r7
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f9 f994 	bl	80005f8 <__aeabi_dmul>
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	f7f8 ffda 	bl	800028c <__adddf3>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f8 ffd2 	bl	8000288 <__aeabi_dsub>
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	f7f8 ffce 	bl	8000288 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	2000      	movs	r0, #0
 80072f2:	4939      	ldr	r1, [pc, #228]	; (80073d8 <__ieee754_pow+0xa08>)
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80072fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	da2f      	bge.n	8007366 <__ieee754_pow+0x996>
 8007306:	4650      	mov	r0, sl
 8007308:	ec43 2b10 	vmov	d0, r2, r3
 800730c:	f000 f9c0 	bl	8007690 <scalbn>
 8007310:	ec51 0b10 	vmov	r0, r1, d0
 8007314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007318:	f7ff bbf1 	b.w	8006afe <__ieee754_pow+0x12e>
 800731c:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <__ieee754_pow+0xa0c>)
 800731e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007322:	429e      	cmp	r6, r3
 8007324:	f77f af0c 	ble.w	8007140 <__ieee754_pow+0x770>
 8007328:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <__ieee754_pow+0xa10>)
 800732a:	440b      	add	r3, r1
 800732c:	4303      	orrs	r3, r0
 800732e:	d00b      	beq.n	8007348 <__ieee754_pow+0x978>
 8007330:	a325      	add	r3, pc, #148	; (adr r3, 80073c8 <__ieee754_pow+0x9f8>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733a:	f7f9 f95d 	bl	80005f8 <__aeabi_dmul>
 800733e:	a322      	add	r3, pc, #136	; (adr r3, 80073c8 <__ieee754_pow+0x9f8>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7ff bbdb 	b.w	8006afe <__ieee754_pow+0x12e>
 8007348:	4622      	mov	r2, r4
 800734a:	462b      	mov	r3, r5
 800734c:	f7f8 ff9c 	bl	8000288 <__aeabi_dsub>
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	f7f9 fbd6 	bl	8000b04 <__aeabi_dcmpge>
 8007358:	2800      	cmp	r0, #0
 800735a:	f43f aef1 	beq.w	8007140 <__ieee754_pow+0x770>
 800735e:	e7e7      	b.n	8007330 <__ieee754_pow+0x960>
 8007360:	f04f 0a00 	mov.w	sl, #0
 8007364:	e718      	b.n	8007198 <__ieee754_pow+0x7c8>
 8007366:	4621      	mov	r1, r4
 8007368:	e7d4      	b.n	8007314 <__ieee754_pow+0x944>
 800736a:	2000      	movs	r0, #0
 800736c:	491a      	ldr	r1, [pc, #104]	; (80073d8 <__ieee754_pow+0xa08>)
 800736e:	f7ff bb8f 	b.w	8006a90 <__ieee754_pow+0xc0>
 8007372:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007376:	f7ff bb8b 	b.w	8006a90 <__ieee754_pow+0xc0>
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f7ff bb87 	b.w	8006a90 <__ieee754_pow+0xc0>
 8007382:	4693      	mov	fp, r2
 8007384:	f7ff bb98 	b.w	8006ab8 <__ieee754_pow+0xe8>
 8007388:	00000000 	.word	0x00000000
 800738c:	3fe62e43 	.word	0x3fe62e43
 8007390:	fefa39ef 	.word	0xfefa39ef
 8007394:	3fe62e42 	.word	0x3fe62e42
 8007398:	0ca86c39 	.word	0x0ca86c39
 800739c:	be205c61 	.word	0xbe205c61
 80073a0:	72bea4d0 	.word	0x72bea4d0
 80073a4:	3e663769 	.word	0x3e663769
 80073a8:	c5d26bf1 	.word	0xc5d26bf1
 80073ac:	3ebbbd41 	.word	0x3ebbbd41
 80073b0:	af25de2c 	.word	0xaf25de2c
 80073b4:	3f11566a 	.word	0x3f11566a
 80073b8:	16bebd93 	.word	0x16bebd93
 80073bc:	3f66c16c 	.word	0x3f66c16c
 80073c0:	5555553e 	.word	0x5555553e
 80073c4:	3fc55555 	.word	0x3fc55555
 80073c8:	c2f8f359 	.word	0xc2f8f359
 80073cc:	01a56e1f 	.word	0x01a56e1f
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	000fffff 	.word	0x000fffff
 80073d8:	3ff00000 	.word	0x3ff00000
 80073dc:	4090cbff 	.word	0x4090cbff
 80073e0:	3f6f3400 	.word	0x3f6f3400
 80073e4:	652b82fe 	.word	0x652b82fe
 80073e8:	3c971547 	.word	0x3c971547

080073ec <__ieee754_sqrt>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4955      	ldr	r1, [pc, #340]	; (8007548 <__ieee754_sqrt+0x15c>)
 80073f2:	ec55 4b10 	vmov	r4, r5, d0
 80073f6:	43a9      	bics	r1, r5
 80073f8:	462b      	mov	r3, r5
 80073fa:	462a      	mov	r2, r5
 80073fc:	d112      	bne.n	8007424 <__ieee754_sqrt+0x38>
 80073fe:	ee10 2a10 	vmov	r2, s0
 8007402:	ee10 0a10 	vmov	r0, s0
 8007406:	4629      	mov	r1, r5
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f7f8 ff3a 	bl	800028c <__adddf3>
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	ec45 4b10 	vmov	d0, r4, r5
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007424:	2d00      	cmp	r5, #0
 8007426:	ee10 0a10 	vmov	r0, s0
 800742a:	4621      	mov	r1, r4
 800742c:	dc0f      	bgt.n	800744e <__ieee754_sqrt+0x62>
 800742e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007432:	4330      	orrs	r0, r6
 8007434:	d0f2      	beq.n	800741c <__ieee754_sqrt+0x30>
 8007436:	b155      	cbz	r5, 800744e <__ieee754_sqrt+0x62>
 8007438:	ee10 2a10 	vmov	r2, s0
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f8 ff22 	bl	8000288 <__aeabi_dsub>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	f7f9 fa00 	bl	800084c <__aeabi_ddiv>
 800744c:	e7e4      	b.n	8007418 <__ieee754_sqrt+0x2c>
 800744e:	151b      	asrs	r3, r3, #20
 8007450:	d073      	beq.n	800753a <__ieee754_sqrt+0x14e>
 8007452:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007456:	07dd      	lsls	r5, r3, #31
 8007458:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800745c:	bf48      	it	mi
 800745e:	0fc8      	lsrmi	r0, r1, #31
 8007460:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007464:	bf44      	itt	mi
 8007466:	0049      	lslmi	r1, r1, #1
 8007468:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800746c:	2500      	movs	r5, #0
 800746e:	1058      	asrs	r0, r3, #1
 8007470:	0fcb      	lsrs	r3, r1, #31
 8007472:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007476:	0049      	lsls	r1, r1, #1
 8007478:	2316      	movs	r3, #22
 800747a:	462c      	mov	r4, r5
 800747c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007480:	19a7      	adds	r7, r4, r6
 8007482:	4297      	cmp	r7, r2
 8007484:	bfde      	ittt	le
 8007486:	19bc      	addle	r4, r7, r6
 8007488:	1bd2      	suble	r2, r2, r7
 800748a:	19ad      	addle	r5, r5, r6
 800748c:	0fcf      	lsrs	r7, r1, #31
 800748e:	3b01      	subs	r3, #1
 8007490:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007494:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007498:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800749c:	d1f0      	bne.n	8007480 <__ieee754_sqrt+0x94>
 800749e:	f04f 0c20 	mov.w	ip, #32
 80074a2:	469e      	mov	lr, r3
 80074a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074a8:	42a2      	cmp	r2, r4
 80074aa:	eb06 070e 	add.w	r7, r6, lr
 80074ae:	dc02      	bgt.n	80074b6 <__ieee754_sqrt+0xca>
 80074b0:	d112      	bne.n	80074d8 <__ieee754_sqrt+0xec>
 80074b2:	428f      	cmp	r7, r1
 80074b4:	d810      	bhi.n	80074d8 <__ieee754_sqrt+0xec>
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	eb07 0e06 	add.w	lr, r7, r6
 80074bc:	da42      	bge.n	8007544 <__ieee754_sqrt+0x158>
 80074be:	f1be 0f00 	cmp.w	lr, #0
 80074c2:	db3f      	blt.n	8007544 <__ieee754_sqrt+0x158>
 80074c4:	f104 0801 	add.w	r8, r4, #1
 80074c8:	1b12      	subs	r2, r2, r4
 80074ca:	428f      	cmp	r7, r1
 80074cc:	bf88      	it	hi
 80074ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80074d2:	1bc9      	subs	r1, r1, r7
 80074d4:	4433      	add	r3, r6
 80074d6:	4644      	mov	r4, r8
 80074d8:	0052      	lsls	r2, r2, #1
 80074da:	f1bc 0c01 	subs.w	ip, ip, #1
 80074de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80074e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80074ea:	d1dd      	bne.n	80074a8 <__ieee754_sqrt+0xbc>
 80074ec:	430a      	orrs	r2, r1
 80074ee:	d006      	beq.n	80074fe <__ieee754_sqrt+0x112>
 80074f0:	1c5c      	adds	r4, r3, #1
 80074f2:	bf13      	iteet	ne
 80074f4:	3301      	addne	r3, #1
 80074f6:	3501      	addeq	r5, #1
 80074f8:	4663      	moveq	r3, ip
 80074fa:	f023 0301 	bicne.w	r3, r3, #1
 80074fe:	106a      	asrs	r2, r5, #1
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	07e9      	lsls	r1, r5, #31
 8007504:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007508:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800750c:	bf48      	it	mi
 800750e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007512:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007516:	461c      	mov	r4, r3
 8007518:	e780      	b.n	800741c <__ieee754_sqrt+0x30>
 800751a:	0aca      	lsrs	r2, r1, #11
 800751c:	3815      	subs	r0, #21
 800751e:	0549      	lsls	r1, r1, #21
 8007520:	2a00      	cmp	r2, #0
 8007522:	d0fa      	beq.n	800751a <__ieee754_sqrt+0x12e>
 8007524:	02d6      	lsls	r6, r2, #11
 8007526:	d50a      	bpl.n	800753e <__ieee754_sqrt+0x152>
 8007528:	f1c3 0420 	rsb	r4, r3, #32
 800752c:	fa21 f404 	lsr.w	r4, r1, r4
 8007530:	1e5d      	subs	r5, r3, #1
 8007532:	4099      	lsls	r1, r3
 8007534:	4322      	orrs	r2, r4
 8007536:	1b43      	subs	r3, r0, r5
 8007538:	e78b      	b.n	8007452 <__ieee754_sqrt+0x66>
 800753a:	4618      	mov	r0, r3
 800753c:	e7f0      	b.n	8007520 <__ieee754_sqrt+0x134>
 800753e:	0052      	lsls	r2, r2, #1
 8007540:	3301      	adds	r3, #1
 8007542:	e7ef      	b.n	8007524 <__ieee754_sqrt+0x138>
 8007544:	46a0      	mov	r8, r4
 8007546:	e7bf      	b.n	80074c8 <__ieee754_sqrt+0xdc>
 8007548:	7ff00000 	.word	0x7ff00000

0800754c <fabs>:
 800754c:	ec51 0b10 	vmov	r0, r1, d0
 8007550:	ee10 2a10 	vmov	r2, s0
 8007554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007558:	ec43 2b10 	vmov	d0, r2, r3
 800755c:	4770      	bx	lr

0800755e <finite>:
 800755e:	ee10 3a90 	vmov	r3, s1
 8007562:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007566:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800756a:	0fc0      	lsrs	r0, r0, #31
 800756c:	4770      	bx	lr

0800756e <matherr>:
 800756e:	2000      	movs	r0, #0
 8007570:	4770      	bx	lr
 8007572:	0000      	movs	r0, r0
 8007574:	0000      	movs	r0, r0
	...

08007578 <nan>:
 8007578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007580 <nan+0x8>
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	00000000 	.word	0x00000000
 8007584:	7ff80000 	.word	0x7ff80000

08007588 <rint>:
 8007588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758a:	ec51 0b10 	vmov	r0, r1, d0
 800758e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007592:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007596:	2e13      	cmp	r6, #19
 8007598:	460b      	mov	r3, r1
 800759a:	ee10 4a10 	vmov	r4, s0
 800759e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80075a2:	dc56      	bgt.n	8007652 <rint+0xca>
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	da2b      	bge.n	8007600 <rint+0x78>
 80075a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80075ac:	4302      	orrs	r2, r0
 80075ae:	d023      	beq.n	80075f8 <rint+0x70>
 80075b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80075b4:	4302      	orrs	r2, r0
 80075b6:	4254      	negs	r4, r2
 80075b8:	4314      	orrs	r4, r2
 80075ba:	0c4b      	lsrs	r3, r1, #17
 80075bc:	0b24      	lsrs	r4, r4, #12
 80075be:	045b      	lsls	r3, r3, #17
 80075c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80075c4:	ea44 0103 	orr.w	r1, r4, r3
 80075c8:	460b      	mov	r3, r1
 80075ca:	492f      	ldr	r1, [pc, #188]	; (8007688 <rint+0x100>)
 80075cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80075d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80075d4:	4602      	mov	r2, r0
 80075d6:	4639      	mov	r1, r7
 80075d8:	4630      	mov	r0, r6
 80075da:	f7f8 fe57 	bl	800028c <__adddf3>
 80075de:	e9cd 0100 	strd	r0, r1, [sp]
 80075e2:	463b      	mov	r3, r7
 80075e4:	4632      	mov	r2, r6
 80075e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ea:	f7f8 fe4d 	bl	8000288 <__aeabi_dsub>
 80075ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80075f6:	4639      	mov	r1, r7
 80075f8:	ec41 0b10 	vmov	d0, r0, r1
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	4a22      	ldr	r2, [pc, #136]	; (800768c <rint+0x104>)
 8007602:	4132      	asrs	r2, r6
 8007604:	ea01 0702 	and.w	r7, r1, r2
 8007608:	4307      	orrs	r7, r0
 800760a:	d0f5      	beq.n	80075f8 <rint+0x70>
 800760c:	0852      	lsrs	r2, r2, #1
 800760e:	4011      	ands	r1, r2
 8007610:	430c      	orrs	r4, r1
 8007612:	d00b      	beq.n	800762c <rint+0xa4>
 8007614:	ea23 0202 	bic.w	r2, r3, r2
 8007618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800761c:	2e13      	cmp	r6, #19
 800761e:	fa43 f306 	asr.w	r3, r3, r6
 8007622:	bf0c      	ite	eq
 8007624:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007628:	2400      	movne	r4, #0
 800762a:	4313      	orrs	r3, r2
 800762c:	4916      	ldr	r1, [pc, #88]	; (8007688 <rint+0x100>)
 800762e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007632:	4622      	mov	r2, r4
 8007634:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007638:	4620      	mov	r0, r4
 800763a:	4629      	mov	r1, r5
 800763c:	f7f8 fe26 	bl	800028c <__adddf3>
 8007640:	e9cd 0100 	strd	r0, r1, [sp]
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800764c:	f7f8 fe1c 	bl	8000288 <__aeabi_dsub>
 8007650:	e7d2      	b.n	80075f8 <rint+0x70>
 8007652:	2e33      	cmp	r6, #51	; 0x33
 8007654:	dd07      	ble.n	8007666 <rint+0xde>
 8007656:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800765a:	d1cd      	bne.n	80075f8 <rint+0x70>
 800765c:	ee10 2a10 	vmov	r2, s0
 8007660:	f7f8 fe14 	bl	800028c <__adddf3>
 8007664:	e7c8      	b.n	80075f8 <rint+0x70>
 8007666:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	40f2      	lsrs	r2, r6
 8007670:	4210      	tst	r0, r2
 8007672:	d0c1      	beq.n	80075f8 <rint+0x70>
 8007674:	0852      	lsrs	r2, r2, #1
 8007676:	4210      	tst	r0, r2
 8007678:	bf1f      	itttt	ne
 800767a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800767e:	ea20 0202 	bicne.w	r2, r0, r2
 8007682:	4134      	asrne	r4, r6
 8007684:	4314      	orrne	r4, r2
 8007686:	e7d1      	b.n	800762c <rint+0xa4>
 8007688:	08007a90 	.word	0x08007a90
 800768c:	000fffff 	.word	0x000fffff

08007690 <scalbn>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	ec55 4b10 	vmov	r4, r5, d0
 8007696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800769a:	4606      	mov	r6, r0
 800769c:	462b      	mov	r3, r5
 800769e:	b9aa      	cbnz	r2, 80076cc <scalbn+0x3c>
 80076a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076a4:	4323      	orrs	r3, r4
 80076a6:	d03b      	beq.n	8007720 <scalbn+0x90>
 80076a8:	4b31      	ldr	r3, [pc, #196]	; (8007770 <scalbn+0xe0>)
 80076aa:	4629      	mov	r1, r5
 80076ac:	2200      	movs	r2, #0
 80076ae:	ee10 0a10 	vmov	r0, s0
 80076b2:	f7f8 ffa1 	bl	80005f8 <__aeabi_dmul>
 80076b6:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <scalbn+0xe4>)
 80076b8:	429e      	cmp	r6, r3
 80076ba:	4604      	mov	r4, r0
 80076bc:	460d      	mov	r5, r1
 80076be:	da12      	bge.n	80076e6 <scalbn+0x56>
 80076c0:	a327      	add	r3, pc, #156	; (adr r3, 8007760 <scalbn+0xd0>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	e009      	b.n	80076e0 <scalbn+0x50>
 80076cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80076d0:	428a      	cmp	r2, r1
 80076d2:	d10c      	bne.n	80076ee <scalbn+0x5e>
 80076d4:	ee10 2a10 	vmov	r2, s0
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f8 fdd6 	bl	800028c <__adddf3>
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	e01c      	b.n	8007720 <scalbn+0x90>
 80076e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076ea:	460b      	mov	r3, r1
 80076ec:	3a36      	subs	r2, #54	; 0x36
 80076ee:	4432      	add	r2, r6
 80076f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80076f4:	428a      	cmp	r2, r1
 80076f6:	dd0b      	ble.n	8007710 <scalbn+0x80>
 80076f8:	ec45 4b11 	vmov	d1, r4, r5
 80076fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007768 <scalbn+0xd8>
 8007700:	f000 f83c 	bl	800777c <copysign>
 8007704:	a318      	add	r3, pc, #96	; (adr r3, 8007768 <scalbn+0xd8>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	ec51 0b10 	vmov	r0, r1, d0
 800770e:	e7da      	b.n	80076c6 <scalbn+0x36>
 8007710:	2a00      	cmp	r2, #0
 8007712:	dd08      	ble.n	8007726 <scalbn+0x96>
 8007714:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007718:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800771c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007720:	ec45 4b10 	vmov	d0, r4, r5
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800772a:	da0d      	bge.n	8007748 <scalbn+0xb8>
 800772c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007730:	429e      	cmp	r6, r3
 8007732:	ec45 4b11 	vmov	d1, r4, r5
 8007736:	dce1      	bgt.n	80076fc <scalbn+0x6c>
 8007738:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007760 <scalbn+0xd0>
 800773c:	f000 f81e 	bl	800777c <copysign>
 8007740:	a307      	add	r3, pc, #28	; (adr r3, 8007760 <scalbn+0xd0>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	e7e0      	b.n	800770a <scalbn+0x7a>
 8007748:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800774c:	3236      	adds	r2, #54	; 0x36
 800774e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007752:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	2200      	movs	r2, #0
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <scalbn+0xe8>)
 800775e:	e7b2      	b.n	80076c6 <scalbn+0x36>
 8007760:	c2f8f359 	.word	0xc2f8f359
 8007764:	01a56e1f 	.word	0x01a56e1f
 8007768:	8800759c 	.word	0x8800759c
 800776c:	7e37e43c 	.word	0x7e37e43c
 8007770:	43500000 	.word	0x43500000
 8007774:	ffff3cb0 	.word	0xffff3cb0
 8007778:	3c900000 	.word	0x3c900000

0800777c <copysign>:
 800777c:	ec51 0b10 	vmov	r0, r1, d0
 8007780:	ee11 0a90 	vmov	r0, s3
 8007784:	ee10 2a10 	vmov	r2, s0
 8007788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800778c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007790:	ea41 0300 	orr.w	r3, r1, r0
 8007794:	ec43 2b10 	vmov	d0, r2, r3
 8007798:	4770      	bx	lr
	...

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
