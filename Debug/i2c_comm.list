
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bdc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004d68  08004d68  00014d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08004e58  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08004e58  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000762d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e4  00000000  00000000  000276cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  00028eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c8  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004913  00000000  00000000  00029f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006620  00000000  00000000  0002e843  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078880  00000000  00000000  00034e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad6e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002594  00000000  00000000  000ad760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d4c 	.word	0x08004d4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004d4c 	.word	0x08004d4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa93 f3a3 	rbit	r3, r3
 8000b0a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	fab3 f383 	clz	r3, r3
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2103      	movs	r1, #3
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	601a      	str	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b089      	sub	sp, #36	; 0x24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	fa93 f3a3 	rbit	r3, r3
 8000b94:	613b      	str	r3, [r7, #16]
  return(result);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	fa93 f3a3 	rbit	r3, r3
 8000bb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fab3 f383 	clz	r3, r3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000bc8:	bf00      	nop
 8000bca:	3724      	adds	r7, #36	; 0x24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa93 f3a3 	rbit	r3, r3
 8000bee:	613b      	str	r3, [r7, #16]
  return(result);
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	fab3 f383 	clz	r3, r3
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	60da      	str	r2, [r3, #12]
}
 8000c22:	bf00      	nop
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b089      	sub	sp, #36	; 0x24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6a1a      	ldr	r2, [r3, #32]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa93 f3a3 	rbit	r3, r3
 8000c48:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	210f      	movs	r1, #15
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	431a      	orrs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000c7c:	bf00      	nop
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa93 f3a3 	rbit	r3, r3
 8000ca4:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fab3 f383 	clz	r3, r3
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	210f      	movs	r1, #15
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b088      	sub	sp, #32
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa93 f3a3 	rbit	r3, r3
 8000d04:	613b      	str	r3, [r7, #16]
  return(result);
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fab3 f383 	clz	r3, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d0e:	e048      	b.n	8000da2 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d03a      	beq.n	8000d9c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	69b9      	ldr	r1, [r7, #24]
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fede 	bl	8000af0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d003      	beq.n	8000d44 <LL_GPIO_Init+0x5e>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d106      	bne.n	8000d52 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff14 	bl	8000b7a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	461a      	mov	r2, r3
 8000d58:	69b9      	ldr	r1, [r7, #24]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff3a 	bl	8000bd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d119      	bne.n	8000d9c <LL_GPIO_Init+0xb6>
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d74:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000d76:	fab3 f383 	clz	r3, r3
 8000d7a:	2b07      	cmp	r3, #7
 8000d7c:	d807      	bhi.n	8000d8e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	461a      	mov	r2, r3
 8000d84:	69b9      	ldr	r1, [r7, #24]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff51 	bl	8000c2e <LL_GPIO_SetAFPin_0_7>
 8000d8c:	e006      	b.n	8000d9c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	461a      	mov	r2, r3
 8000d94:	69b9      	ldr	r1, [r7, #24]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff76 	bl	8000c88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1af      	bne.n	8000d10 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d003      	beq.n	8000dc0 <LL_GPIO_Init+0xda>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d107      	bne.n	8000dd0 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff febd 	bl	8000b4a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 0201 	bic.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0219      	lsls	r1, r3, #8
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	609a      	str	r2, [r3, #8]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	611a      	str	r2, [r3, #16]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	605a      	str	r2, [r3, #4]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff65 	bl	8000dfa <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6899      	ldr	r1, [r3, #8]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff6d 	bl	8000e1a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb6 	bl	8000eb8 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff44 	bl	8000dda <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa0 	bl	8000e98 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	461a      	mov	r2, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff70 	bl	8000e48 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff81 	bl	8000e78 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ffa9 	bl	8000ed4 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffb6 	bl	8000efa <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	615a      	str	r2, [r3, #20]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <LL_TIM_Init+0xd4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d007      	beq.n	80010e0 <LL_TIM_Init+0x2c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d6:	d003      	beq.n	80010e0 <LL_TIM_Init+0x2c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <LL_TIM_Init+0xd8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d106      	bne.n	80010ee <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <LL_TIM_Init+0xd4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <LL_TIM_Init+0x6a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d00f      	beq.n	800111e <LL_TIM_Init+0x6a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <LL_TIM_Init+0xd8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00b      	beq.n	800111e <LL_TIM_Init+0x6a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <LL_TIM_Init+0xdc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <LL_TIM_Init+0x6a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a20      	ldr	r2, [pc, #128]	; (8001194 <LL_TIM_Init+0xe0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d003      	beq.n	800111e <LL_TIM_Init+0x6a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <LL_TIM_Init+0xe4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d106      	bne.n	800112c <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff3b 	bl	8000fb4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff27 	bl	8000f98 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <LL_TIM_Init+0xd4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00b      	beq.n	800116a <LL_TIM_Init+0xb6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LL_TIM_Init+0xdc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <LL_TIM_Init+0xb6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LL_TIM_Init+0xe0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d003      	beq.n	800116a <LL_TIM_Init+0xb6>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <LL_TIM_Init+0xe4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d105      	bne.n	8001176 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	7c1b      	ldrb	r3, [r3, #16]
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff2d 	bl	8000fd0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff8c 	bl	8001094 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40012c00 	.word	0x40012c00
 800118c:	40000400 	.word	0x40000400
 8001190:	40014000 	.word	0x40014000
 8001194:	40014400 	.word	0x40014400
 8001198:	40014800 	.word	0x40014800

0800119c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b2:	d01f      	beq.n	80011f4 <LL_TIM_OC_Init+0x58>
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b8:	d804      	bhi.n	80011c4 <LL_TIM_OC_Init+0x28>
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d00c      	beq.n	80011d8 <LL_TIM_OC_Init+0x3c>
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d011      	beq.n	80011e6 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80011c2:	e033      	b.n	800122c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d022      	beq.n	8001210 <LL_TIM_OC_Init+0x74>
 80011ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011ce:	d026      	beq.n	800121e <LL_TIM_OC_Init+0x82>
 80011d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d4:	d015      	beq.n	8001202 <LL_TIM_OC_Init+0x66>
      break;
 80011d6:	e029      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f82c 	bl	8001238 <OC1Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]
      break;
 80011e4:	e022      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 f8a5 	bl	8001338 <OC2Config>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
      break;
 80011f2:	e01b      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f922 	bl	8001440 <OC3Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]
      break;
 8001200:	e014      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f99f 	bl	8001548 <OC4Config>
 800120a:	4603      	mov	r3, r0
 800120c:	75fb      	strb	r3, [r7, #23]
      break;
 800120e:	e00d      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fa04 	bl	8001620 <OC5Config>
 8001218:	4603      	mov	r3, r0
 800121a:	75fb      	strb	r3, [r7, #23]
      break;
 800121c:	e006      	b.n	800122c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fa5f 	bl	80016e4 <OC6Config>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
      break;
 800122a:	bf00      	nop
  }

  return result;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	f023 0201 	bic.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f023 0202 	bic.w	r2, r3, #2
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f023 0201 	bic.w	r2, r3, #1
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4313      	orrs	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <OC1Config+0xf0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00b      	beq.n	80012c2 <OC1Config+0x8a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <OC1Config+0xf4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <OC1Config+0x8a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <OC1Config+0xf8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <OC1Config+0x8a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <OC1Config+0xfc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11e      	bne.n	8001300 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f023 0208 	bic.w	r2, r3, #8
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4313      	orrs	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f023 0204 	bic.w	r2, r3, #4
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4313      	orrs	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe6a 	bl	8000fec <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40012c00 	.word	0x40012c00
 800132c:	40014000 	.word	0x40014000
 8001330:	40014400 	.word	0x40014400
 8001334:	40014800 	.word	0x40014800

08001338 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	f023 0210 	bic.w	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	0212      	lsls	r2, r2, #8
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f023 0220 	bic.w	r2, r3, #32
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f023 0210 	bic.w	r2, r3, #16
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <OC2Config+0xf8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00b      	beq.n	80013c8 <OC2Config+0x90>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <OC2Config+0xfc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <OC2Config+0x90>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <OC2Config+0x100>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d003      	beq.n	80013c8 <OC2Config+0x90>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <OC2Config+0x104>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d11f      	bne.n	8001408 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fdf4 	bl	8001008 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40012c00 	.word	0x40012c00
 8001434:	40014000 	.word	0x40014000
 8001438:	40014400 	.word	0x40014400
 800143c:	40014800 	.word	0x40014800

08001440 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4313      	orrs	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <OC3Config+0xf8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00b      	beq.n	80014ce <OC3Config+0x8e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a20      	ldr	r2, [pc, #128]	; (800153c <OC3Config+0xfc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <OC3Config+0x8e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <OC3Config+0x100>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d003      	beq.n	80014ce <OC3Config+0x8e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <OC3Config+0x104>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d11f      	bne.n	800150e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	029b      	lsls	r3, r3, #10
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fd7f 	bl	8001024 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	40014000 	.word	0x40014000
 8001540:	40014400 	.word	0x40014400
 8001544:	40014800 	.word	0x40014800

08001548 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001582:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	0212      	lsls	r2, r2, #8
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	031b      	lsls	r3, r3, #12
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	031b      	lsls	r3, r3, #12
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <OC4Config+0xc8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00b      	beq.n	80015d8 <OC4Config+0x90>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <OC4Config+0xcc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <OC4Config+0x90>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <OC4Config+0xd0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d003      	beq.n	80015d8 <OC4Config+0x90>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <OC4Config+0xd4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d107      	bne.n	80015e8 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	019b      	lsls	r3, r3, #6
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd20 	bl	8001040 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40014000 	.word	0x40014000
 8001618:	40014400 	.word	0x40014400
 800161c:	40014800 	.word	0x40014800

08001620 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	4313      	orrs	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <OC5Config+0xb4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00b      	beq.n	800169c <OC5Config+0x7c>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <OC5Config+0xb8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <OC5Config+0x7c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <OC5Config+0xbc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d003      	beq.n	800169c <OC5Config+0x7c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <OC5Config+0xc0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d109      	bne.n	80016b0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fccd 	bl	800105c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40014000 	.word	0x40014000
 80016dc:	40014400 	.word	0x40014400
 80016e0:	40014800 	.word	0x40014800

080016e4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	0212      	lsls	r2, r2, #8
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	051b      	lsls	r3, r3, #20
 800172e:	4313      	orrs	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	051b      	lsls	r3, r3, #20
 800173e:	4313      	orrs	r3, r2
 8001740:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <OC6Config+0xb4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00b      	beq.n	8001762 <OC6Config+0x7e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <OC6Config+0xb8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <OC6Config+0x7e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <OC6Config+0xbc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d003      	beq.n	8001762 <OC6Config+0x7e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <OC6Config+0xc0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d109      	bne.n	8001776 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fc78 	bl	8001078 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40014000 	.word	0x40014000
 80017a0:	40014400 	.word	0x40014400
 80017a4:	40014800 	.word	0x40014800

080017a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <LL_InitTick+0x30>)
 80017bc:	3b01      	subs	r3, #1
 80017be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <LL_InitTick+0x30>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <LL_InitTick+0x30>)
 80017c8:	2205      	movs	r2, #5
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e010 	.word	0xe000e010

080017dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80017e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffdd 	bl	80017a8 <LL_InitTick>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <LL_mDelay+0x44>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180e:	d00c      	beq.n	800182a <LL_mDelay+0x32>
  {
    Delay++;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001816:	e008      	b.n	800182a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <LL_mDelay+0x44>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <LL_mDelay+0x32>
    {
      Delay--;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
  while (Delay)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f3      	bne.n	8001818 <LL_mDelay+0x20>
    }
  }
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e010 	.word	0xe000e010

08001840 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <LL_SetSystemCoreClock+0x1c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000

08001860 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	619a      	str	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_TIM_ClearFlag_UPDATE>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f06f 0201 	mvn.w	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80018e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f7ff ffba 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f7ff ffb4 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80018f8:	2102      	movs	r1, #2
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <resetSegments+0x58>)
 80018fc:	f7ff ffb0 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001900:	2120      	movs	r1, #32
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <resetSegments+0x58>)
 8001904:	f7ff ffac 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001908:	2110      	movs	r1, #16
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <resetSegments+0x58>)
 800190c:	f7ff ffa8 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001910:	2101      	movs	r1, #1
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f7ff ffa3 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800191a:	2102      	movs	r1, #2
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f7ff ff9e 	bl	8001860 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001924:	2108      	movs	r1, #8
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f7ff ff99 	bl	8001860 <LL_GPIO_SetOutputPin>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	48000400 	.word	0x48000400

08001938 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800193c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f7ff ff9a 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f7ff ff94 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001954:	2102      	movs	r1, #2
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <setSegments+0x58>)
 8001958:	f7ff ff90 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800195c:	2120      	movs	r1, #32
 800195e:	480c      	ldr	r0, [pc, #48]	; (8001990 <setSegments+0x58>)
 8001960:	f7ff ff8c 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001964:	2110      	movs	r1, #16
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <setSegments+0x58>)
 8001968:	f7ff ff88 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800196c:	2101      	movs	r1, #1
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f7ff ff83 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001976:	2102      	movs	r1, #2
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f7ff ff7e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001980:	2108      	movs	r1, #8
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f7ff ff79 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	48000400 	.word	0x48000400

08001994 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001998:	2104      	movs	r1, #4
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f7ff ff6d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80019a2:	2101      	movs	r1, #1
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <resetDigits+0x3c>)
 80019a6:	f7ff ff69 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80019aa:	2110      	movs	r1, #16
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f7ff ff64 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80019b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f7ff ff5e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f7ff ff59 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	48000400 	.word	0x48000400

080019d4 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80019d8:	2101      	movs	r1, #1
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <setDigits+0x3c>)
 80019dc:	f7ff ff40 	bl	8001860 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80019e0:	2110      	movs	r1, #16
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e6:	f7ff ff3b 	bl	8001860 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80019ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f7ff ff35 	bl	8001860 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 80019f6:	2104      	movs	r1, #4
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fc:	f7ff ff30 	bl	8001860 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f7ff ff2b 	bl	8001860 <LL_GPIO_SetOutputPin>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	48000400 	.word	0x48000400

08001a14 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <setDecimalPoint+0x10>)
 8001a1c:	f7ff ff2e 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	48000400 	.word	0x48000400

08001a28 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f7ff ff23 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f7ff ff1d 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <setTwo>:

void setTwo(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f7ff ff13 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a56:	2102      	movs	r1, #2
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f7ff ff0e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a60:	2110      	movs	r1, #16
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <setTwo+0x38>)
 8001a64:	f7ff ff0a 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f7ff ff04 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a74:	2120      	movs	r1, #32
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <setTwo+0x38>)
 8001a78:	f7ff ff00 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	48000400 	.word	0x48000400

08001a84 <setThree>:

void setThree(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f7ff fef5 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a92:	2102      	movs	r1, #2
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f7ff fef0 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <setThree+0x38>)
 8001aa0:	f7ff feec 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f7ff fee6 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4802      	ldr	r0, [pc, #8]	; (8001abc <setThree+0x38>)
 8001ab4:	f7ff fee2 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	48000400 	.word	0x48000400

08001ac0 <setFour>:

void setFour(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f7ff fed7 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f7ff fed2 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <setFour+0x30>)
 8001adc:	f7ff fece 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f7ff fec8 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	48000400 	.word	0x48000400

08001af4 <setFive>:

void setFive(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001af8:	2108      	movs	r1, #8
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f7ff febd 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b02:	2120      	movs	r1, #32
 8001b04:	4809      	ldr	r0, [pc, #36]	; (8001b2c <setFive+0x38>)
 8001b06:	f7ff feb9 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <setFive+0x38>)
 8001b0e:	f7ff feb5 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f7ff feaf 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b1e:	2102      	movs	r1, #2
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f7ff feaa 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	48000400 	.word	0x48000400

08001b30 <setSix>:

void setSix(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b34:	2108      	movs	r1, #8
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f7ff fe9f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b3e:	2120      	movs	r1, #32
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <setSix+0x44>)
 8001b42:	f7ff fe9b 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b46:	2110      	movs	r1, #16
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <setSix+0x44>)
 8001b4a:	f7ff fe97 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f7ff fe91 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f7ff fe8c 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f7ff fe86 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	48000400 	.word	0x48000400

08001b78 <setSeven>:

void setSeven(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f7ff fe7b 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f7ff fe75 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b92:	2102      	movs	r1, #2
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f7ff fe70 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <setEight>:

void setEight(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f7ff fe67 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001bae:	2120      	movs	r1, #32
 8001bb0:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <setEight+0x50>)
 8001bb2:	f7ff fe63 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <setEight+0x50>)
 8001bba:	f7ff fe5f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f7ff fe59 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f7ff fe54 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f7ff fe4e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001be0:	2101      	movs	r1, #1
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f7ff fe49 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <setNine>:

void setNine(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfe:	f7ff fe3d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f7ff fe37 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c0e:	2102      	movs	r1, #2
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f7ff fe32 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001c18:	2110      	movs	r1, #16
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <setNine+0x3c>)
 8001c1c:	f7ff fe2e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c20:	2108      	movs	r1, #8
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f7ff fe29 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	48000400 	.word	0x48000400

08001c34 <setZero>:

void setZero(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c38:	2108      	movs	r1, #8
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3e:	f7ff fe1d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c42:	2120      	movs	r1, #32
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <setZero+0x48>)
 8001c46:	f7ff fe19 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f7ff fe13 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c56:	2102      	movs	r1, #2
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f7ff fe0e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f7ff fe08 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f7ff fe03 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	48000400 	.word	0x48000400

08001c80 <setA>:

void setA(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c84:	2108      	movs	r1, #8
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8a:	f7ff fdf7 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f7ff fdf1 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f7ff fdec 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cac:	f7ff fde6 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f7ff fde1 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001cba:	2110      	movs	r1, #16
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <setA+0x48>)
 8001cbe:	f7ff fddd 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	48000400 	.word	0x48000400

08001ccc <setB>:

void setB(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f7ff fdd0 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001cdc:	2120      	movs	r1, #32
 8001cde:	480a      	ldr	r0, [pc, #40]	; (8001d08 <setB+0x3c>)
 8001ce0:	f7ff fdcc 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cec:	f7ff fdc6 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf6:	f7ff fdc1 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <setB+0x3c>)
 8001cfe:	f7ff fdbd 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	48000400 	.word	0x48000400

08001d0c <setC>:

void setC(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d10:	2102      	movs	r1, #2
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d16:	f7ff fdb1 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <setC+0x30>)
 8001d1e:	f7ff fdad 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2a:	f7ff fda7 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d2e:	2108      	movs	r1, #8
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f7ff fda2 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	48000400 	.word	0x48000400

08001d40 <setD>:

void setD(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d44:	2101      	movs	r1, #1
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f7ff fd97 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f7ff fd91 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <setD+0x3c>)
 8001d5e:	f7ff fd8d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f7ff fd87 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <setD+0x3c>)
 8001d72:	f7ff fd83 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	48000400 	.word	0x48000400

08001d80 <setE>:

void setE(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d84:	2102      	movs	r1, #2
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f7ff fd77 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d8e:	2120      	movs	r1, #32
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <setE+0x38>)
 8001d92:	f7ff fd73 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9e:	f7ff fd6d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001da2:	2108      	movs	r1, #8
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f7ff fd68 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001dac:	2110      	movs	r1, #16
 8001dae:	4802      	ldr	r0, [pc, #8]	; (8001db8 <setE+0x38>)
 8001db0:	f7ff fd64 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	48000400 	.word	0x48000400

08001dbc <setF>:

void setF(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f7ff fd59 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f7ff fd53 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f7ff fd4e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001de0:	2110      	movs	r1, #16
 8001de2:	4802      	ldr	r0, [pc, #8]	; (8001dec <setF+0x30>)
 8001de4:	f7ff fd4a 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	48000400 	.word	0x48000400

08001df0 <setG>:

void setG(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001df4:	2102      	movs	r1, #2
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f7ff fd3f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f7ff fd39 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <setG+0x3c>)
 8001e0e:	f7ff fd35 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1a:	f7ff fd2f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e1e:	2108      	movs	r1, #8
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e24:	f7ff fd2a 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	48000400 	.word	0x48000400

08001e30 <setH>:

void setH(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001e34:	2101      	movs	r1, #1
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f7ff fd1f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f7ff fd19 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f7ff fd13 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e56:	2108      	movs	r1, #8
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f7ff fd0e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001e60:	2110      	movs	r1, #16
 8001e62:	4802      	ldr	r0, [pc, #8]	; (8001e6c <setH+0x3c>)
 8001e64:	f7ff fd0a 	bl	800187c <LL_GPIO_ResetOutputPin>

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	48000400 	.word	0x48000400

08001e70 <setI>:

void setI(void){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f7ff fcfe 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001e80:	2108      	movs	r1, #8
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e86:	f7ff fcf9 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <setJ>:

void setJ(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001e94:	2101      	movs	r1, #1
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f7ff fcef 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea6:	f7ff fce9 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001eaa:	2120      	movs	r1, #32
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <setJ+0x34>)
 8001eae:	f7ff fce5 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f7ff fcdf 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <setL>:

void setL(void){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ecc:	2120      	movs	r1, #32
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <setL+0x28>)
 8001ed0:	f7ff fcd4 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f7ff fcce 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f7ff fcc9 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <setN>:

void setN(void){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f00:	f7ff fcbc 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f7ff fcb6 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f10:	2110      	movs	r1, #16
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <setN+0x28>)
 8001f14:	f7ff fcb2 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	48000400 	.word	0x48000400

08001f20 <setO>:

void setO(void){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f24:	2102      	movs	r1, #2
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f7ff fca7 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f7ff fca2 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f7ff fc9c 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f44:	2120      	movs	r1, #32
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <setO+0x48>)
 8001f48:	f7ff fc98 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f7ff fc92 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f58:	2108      	movs	r1, #8
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f7ff fc8d 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	48000400 	.word	0x48000400

08001f6c <setP>:

void setP(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f70:	2102      	movs	r1, #2
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f7ff fc81 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f7ff fc7c 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8c:	f7ff fc76 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f90:	2108      	movs	r1, #8
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f7ff fc71 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <setP+0x3c>)
 8001f9e:	f7ff fc6d 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	48000400 	.word	0x48000400

08001fac <setQ>:

void setQ(void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f7ff fc61 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001fba:	2101      	movs	r1, #1
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f7ff fc5c 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f7ff fc56 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f7ff fc51 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001fda:	2110      	movs	r1, #16
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <setQ+0x3c>)
 8001fde:	f7ff fc4d 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	48000400 	.word	0x48000400

08001fec <setR>:

void setR(void){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f7ff fc40 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <setR+0x1c>)
 8002000:	f7ff fc3c 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	48000400 	.word	0x48000400

0800200c <setS>:

void setS(void){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002010:	2102      	movs	r1, #2
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f7ff fc31 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800201a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002022:	f7ff fc2b 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002026:	2120      	movs	r1, #32
 8002028:	4806      	ldr	r0, [pc, #24]	; (8002044 <setS+0x38>)
 800202a:	f7ff fc27 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800202e:	2108      	movs	r1, #8
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7ff fc22 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002038:	2110      	movs	r1, #16
 800203a:	4802      	ldr	r0, [pc, #8]	; (8002044 <setS+0x38>)
 800203c:	f7ff fc1e 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	48000400 	.word	0x48000400

08002048 <setT>:

void setT(void){
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800204c:	2120      	movs	r1, #32
 800204e:	480a      	ldr	r0, [pc, #40]	; (8002078 <setT+0x30>)
 8002050:	f7ff fc14 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f7ff fc0e 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002060:	2108      	movs	r1, #8
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f7ff fc09 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800206a:	2110      	movs	r1, #16
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <setT+0x30>)
 800206e:	f7ff fc05 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	48000400 	.word	0x48000400

0800207c <setU>:

void setU(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002080:	2101      	movs	r1, #1
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f7ff fbf9 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800208a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f7ff fbf3 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002096:	2120      	movs	r1, #32
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <setU+0x3c>)
 800209a:	f7ff fbef 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f7ff fbe9 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020aa:	2108      	movs	r1, #8
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f7ff fbe4 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	48000400 	.word	0x48000400

080020bc <setY>:

void setY(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80020c0:	2101      	movs	r1, #1
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f7ff fbd9 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f7ff fbd3 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020d6:	2120      	movs	r1, #32
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <setY+0x38>)
 80020da:	f7ff fbcf 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020de:	2108      	movs	r1, #8
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f7ff fbca 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020e8:	2110      	movs	r1, #16
 80020ea:	4802      	ldr	r0, [pc, #8]	; (80020f4 <setY+0x38>)
 80020ec:	f7ff fbc6 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	48000400 	.word	0x48000400

080020f8 <setK>:

void setK(void){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	// B,C,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80020fc:	2101      	movs	r1, #1
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f7ff fbbb 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210e:	f7ff fbb5 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002112:	2110      	movs	r1, #16
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <setK+0x28>)
 8002116:	f7ff fbb1 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	48000400 	.word	0x48000400

08002124 <setM>:

void setM(void){
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	// A,C,E
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002128:	2102      	movs	r1, #2
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f7ff fba5 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f7ff fb9f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800213e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002146:	f7ff fb99 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <setV>:

void setV(void){
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002154:	2101      	movs	r1, #1
 8002156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215a:	f7ff fb8f 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800215e:	2120      	movs	r1, #32
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <setV+0x24>)
 8002162:	f7ff fb8b 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002166:	2108      	movs	r1, #8
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f7ff fb86 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	48000400 	.word	0x48000400

08002178 <setW>:

void setW(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800217c:	2108      	movs	r1, #8
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f7ff fb7b 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002186:	2120      	movs	r1, #32
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <setW+0x44>)
 800218a:	f7ff fb77 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800218e:	2110      	movs	r1, #16
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <setW+0x44>)
 8002192:	f7ff fb73 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f7ff fb6d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f7ff fb67 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021ae:	2101      	movs	r1, #1
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f7ff fb62 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	48000400 	.word	0x48000400

080021c0 <setX>:

void setX(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	// A,D,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021c4:	2102      	movs	r1, #2
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f7ff fb57 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021ce:	2120      	movs	r1, #32
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <setX+0x24>)
 80021d2:	f7ff fb53 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021d6:	2110      	movs	r1, #16
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <setX+0x24>)
 80021da:	f7ff fb4f 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	48000400 	.word	0x48000400

080021e8 <setZ>:

void setZ(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	// B,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f7ff fb42 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021f8:	2101      	movs	r1, #1
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f7ff fb3d 	bl	800187c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002202:	2110      	movs	r1, #16
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <setZ+0x28>)
 8002206:	f7ff fb39 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	48000400 	.word	0x48000400

08002214 <set_>:

void set_(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002218:	2120      	movs	r1, #32
 800221a:	4802      	ldr	r0, [pc, #8]	; (8002224 <set_+0x10>)
 800221c:	f7ff fb2e 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	48000400 	.word	0x48000400

08002228 <displayString>:
	        i++;
	    }
	}
}

void displayString(uint8_t str[4]){
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    dDisplayData.digit_num = 4;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <displayString+0x54>)
 8002232:	2204      	movs	r2, #4
 8002234:	711a      	strb	r2, [r3, #4]
    dDisplayData.negative = 0;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <displayString+0x54>)
 8002238:	2200      	movs	r2, #0
 800223a:	715a      	strb	r2, [r3, #5]
    dDisplayData.resolution = 0;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <displayString+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	719a      	strb	r2, [r3, #6]

    int j = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 8002246:	2303      	movs	r3, #3
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	e00e      	b.n	800226a <displayString+0x42>
        dDisplayData.digit[i] = str[j];
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	7819      	ldrb	r1, [r3, #0]
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <displayString+0x54>)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4413      	add	r3, r2
 800225a:	460a      	mov	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
        j++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	3b01      	subs	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	daed      	bge.n	800224c <displayString+0x24>
    }
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	2000008c 	.word	0x2000008c

08002280 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d823      	bhi.n	80022d8 <setDigit+0x58>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <setDigit+0x18>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022b5 	.word	0x080022b5
 80022a0:	080022c3 	.word	0x080022c3
 80022a4:	080022cf 	.word	0x080022cf
	{
		case 0:
			DIGIT_4_ON;
 80022a8:	2104      	movs	r1, #4
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ae:	f7ff fad7 	bl	8001860 <LL_GPIO_SetOutputPin>
			break;
 80022b2:	e011      	b.n	80022d8 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 80022b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f7ff fad0 	bl	8001860 <LL_GPIO_SetOutputPin>
			break;
 80022c0:	e00a      	b.n	80022d8 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 80022c2:	2110      	movs	r1, #16
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f7ff faca 	bl	8001860 <LL_GPIO_SetOutputPin>
			break;
 80022cc:	e004      	b.n	80022d8 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 80022ce:	2101      	movs	r1, #1
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <setDigit+0x60>)
 80022d2:	f7ff fac5 	bl	8001860 <LL_GPIO_SetOutputPin>
			break;
 80022d6:	bf00      	nop
	}
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	48000400 	.word	0x48000400

080022e4 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	e1c6      	b.n	800267e <updateDisplay+0x39a>
	{
		switch(dDisplayData.digit[i])
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4acd      	ldr	r2, [pc, #820]	; (8002628 <updateDisplay+0x344>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	3b30      	subs	r3, #48	; 0x30
 80022f8:	2b4a      	cmp	r3, #74	; 0x4a
 80022fa:	f200 819e 	bhi.w	800263a <updateDisplay+0x356>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <updateDisplay+0x20>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	08002431 	.word	0x08002431
 8002308:	0800243f 	.word	0x0800243f
 800230c:	0800244d 	.word	0x0800244d
 8002310:	0800245b 	.word	0x0800245b
 8002314:	08002469 	.word	0x08002469
 8002318:	08002477 	.word	0x08002477
 800231c:	08002485 	.word	0x08002485
 8002320:	08002493 	.word	0x08002493
 8002324:	080024a1 	.word	0x080024a1
 8002328:	080024af 	.word	0x080024af
 800232c:	0800263b 	.word	0x0800263b
 8002330:	0800263b 	.word	0x0800263b
 8002334:	0800263b 	.word	0x0800263b
 8002338:	0800263b 	.word	0x0800263b
 800233c:	0800263b 	.word	0x0800263b
 8002340:	0800263b 	.word	0x0800263b
 8002344:	0800263b 	.word	0x0800263b
 8002348:	0800263b 	.word	0x0800263b
 800234c:	0800263b 	.word	0x0800263b
 8002350:	0800263b 	.word	0x0800263b
 8002354:	0800263b 	.word	0x0800263b
 8002358:	0800263b 	.word	0x0800263b
 800235c:	0800263b 	.word	0x0800263b
 8002360:	0800263b 	.word	0x0800263b
 8002364:	0800263b 	.word	0x0800263b
 8002368:	0800263b 	.word	0x0800263b
 800236c:	0800263b 	.word	0x0800263b
 8002370:	0800263b 	.word	0x0800263b
 8002374:	0800263b 	.word	0x0800263b
 8002378:	0800263b 	.word	0x0800263b
 800237c:	0800263b 	.word	0x0800263b
 8002380:	0800263b 	.word	0x0800263b
 8002384:	0800263b 	.word	0x0800263b
 8002388:	0800263b 	.word	0x0800263b
 800238c:	0800263b 	.word	0x0800263b
 8002390:	0800263b 	.word	0x0800263b
 8002394:	0800263b 	.word	0x0800263b
 8002398:	0800263b 	.word	0x0800263b
 800239c:	0800263b 	.word	0x0800263b
 80023a0:	0800263b 	.word	0x0800263b
 80023a4:	0800263b 	.word	0x0800263b
 80023a8:	0800263b 	.word	0x0800263b
 80023ac:	0800263b 	.word	0x0800263b
 80023b0:	0800263b 	.word	0x0800263b
 80023b4:	0800263b 	.word	0x0800263b
 80023b8:	0800263b 	.word	0x0800263b
 80023bc:	0800263b 	.word	0x0800263b
 80023c0:	0800262d 	.word	0x0800262d
 80023c4:	0800263b 	.word	0x0800263b
 80023c8:	080024bd 	.word	0x080024bd
 80023cc:	080024cb 	.word	0x080024cb
 80023d0:	080024d9 	.word	0x080024d9
 80023d4:	080024e7 	.word	0x080024e7
 80023d8:	080024f5 	.word	0x080024f5
 80023dc:	08002503 	.word	0x08002503
 80023e0:	08002511 	.word	0x08002511
 80023e4:	0800251f 	.word	0x0800251f
 80023e8:	0800252d 	.word	0x0800252d
 80023ec:	0800253b 	.word	0x0800253b
 80023f0:	08002549 	.word	0x08002549
 80023f4:	08002557 	.word	0x08002557
 80023f8:	08002565 	.word	0x08002565
 80023fc:	08002573 	.word	0x08002573
 8002400:	08002581 	.word	0x08002581
 8002404:	0800258f 	.word	0x0800258f
 8002408:	0800259d 	.word	0x0800259d
 800240c:	080025ab 	.word	0x080025ab
 8002410:	080025b9 	.word	0x080025b9
 8002414:	080025c7 	.word	0x080025c7
 8002418:	080025d5 	.word	0x080025d5
 800241c:	080025e3 	.word	0x080025e3
 8002420:	080025f1 	.word	0x080025f1
 8002424:	080025ff 	.word	0x080025ff
 8002428:	0800260d 	.word	0x0800260d
 800242c:	0800261b 	.word	0x0800261b
		{
			case 48:
			  setDigit(i);
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff24 	bl	8002280 <setDigit>
			  setZero();
 8002438:	f7ff fbfc 	bl	8001c34 <setZero>
			  break;
 800243c:	e0fd      	b.n	800263a <updateDisplay+0x356>
			case 49:
			  setDigit(i);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff1d 	bl	8002280 <setDigit>
			  setOne();
 8002446:	f7ff faef 	bl	8001a28 <setOne>
			  break;
 800244a:	e0f6      	b.n	800263a <updateDisplay+0x356>
			case 50:
			  setDigit(i);
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff16 	bl	8002280 <setDigit>
			  setTwo();
 8002454:	f7ff faf8 	bl	8001a48 <setTwo>
			  break;
 8002458:	e0ef      	b.n	800263a <updateDisplay+0x356>
			case 51:
			  setDigit(i);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff0f 	bl	8002280 <setDigit>
			  setThree();
 8002462:	f7ff fb0f 	bl	8001a84 <setThree>
			  break;
 8002466:	e0e8      	b.n	800263a <updateDisplay+0x356>
			case 52:
			  setDigit(i);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff08 	bl	8002280 <setDigit>
			  setFour();
 8002470:	f7ff fb26 	bl	8001ac0 <setFour>
			  break;
 8002474:	e0e1      	b.n	800263a <updateDisplay+0x356>
			case 53:
			  setDigit(i);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff01 	bl	8002280 <setDigit>
			  setFive();
 800247e:	f7ff fb39 	bl	8001af4 <setFive>
			  break;
 8002482:	e0da      	b.n	800263a <updateDisplay+0x356>
			case 54:
			  setDigit(i);
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fefa 	bl	8002280 <setDigit>
			  setSix();
 800248c:	f7ff fb50 	bl	8001b30 <setSix>
			  break;
 8002490:	e0d3      	b.n	800263a <updateDisplay+0x356>
			case 55:
			  setDigit(i);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fef3 	bl	8002280 <setDigit>
			  setSeven();
 800249a:	f7ff fb6d 	bl	8001b78 <setSeven>
			  break;
 800249e:	e0cc      	b.n	800263a <updateDisplay+0x356>
			case 56:
			  setDigit(i);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff feec 	bl	8002280 <setDigit>
			  setEight();
 80024a8:	f7ff fb7a 	bl	8001ba0 <setEight>
			  break;
 80024ac:	e0c5      	b.n	800263a <updateDisplay+0x356>
			case 57:
			  setDigit(i);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fee5 	bl	8002280 <setDigit>
			  setNine();
 80024b6:	f7ff fb9d 	bl	8001bf4 <setNine>
			  break;
 80024ba:	e0be      	b.n	800263a <updateDisplay+0x356>

			// Letters - ASCII code of small letter

			case 97:
			  setDigit(i);
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fede 	bl	8002280 <setDigit>
			  setA();
 80024c4:	f7ff fbdc 	bl	8001c80 <setA>
			  break;
 80024c8:	e0b7      	b.n	800263a <updateDisplay+0x356>
			case 98:
			  setDigit(i);
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fed7 	bl	8002280 <setDigit>
		      setB();
 80024d2:	f7ff fbfb 	bl	8001ccc <setB>
		      break;
 80024d6:	e0b0      	b.n	800263a <updateDisplay+0x356>
			case 99:
			  setDigit(i);
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fed0 	bl	8002280 <setDigit>
			  setC();
 80024e0:	f7ff fc14 	bl	8001d0c <setC>
			  break;
 80024e4:	e0a9      	b.n	800263a <updateDisplay+0x356>
			case 100:
			  setDigit(i);
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fec9 	bl	8002280 <setDigit>
			  setD();
 80024ee:	f7ff fc27 	bl	8001d40 <setD>
		      break;
 80024f2:	e0a2      	b.n	800263a <updateDisplay+0x356>
			case 101:
			  setDigit(i);
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fec2 	bl	8002280 <setDigit>
		      setE();
 80024fc:	f7ff fc40 	bl	8001d80 <setE>
		      break;
 8002500:	e09b      	b.n	800263a <updateDisplay+0x356>
			case 102:
			  setDigit(i);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff febb 	bl	8002280 <setDigit>
			  setF();
 800250a:	f7ff fc57 	bl	8001dbc <setF>
			  break;
 800250e:	e094      	b.n	800263a <updateDisplay+0x356>
			case 103:
			  setDigit(i);
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff feb4 	bl	8002280 <setDigit>
			  setG();
 8002518:	f7ff fc6a 	bl	8001df0 <setG>
			  break;
 800251c:	e08d      	b.n	800263a <updateDisplay+0x356>
			case 104:
			  setDigit(i);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fead 	bl	8002280 <setDigit>
			  setH();
 8002526:	f7ff fc83 	bl	8001e30 <setH>
			  break;
 800252a:	e086      	b.n	800263a <updateDisplay+0x356>
			case 105:
			  setDigit(i);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fea6 	bl	8002280 <setDigit>
			  setI();
 8002534:	f7ff fc9c 	bl	8001e70 <setI>
			  break;
 8002538:	e07f      	b.n	800263a <updateDisplay+0x356>
			case 106:
			  setDigit(i);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fe9f 	bl	8002280 <setDigit>
			  setJ();
 8002542:	f7ff fca5 	bl	8001e90 <setJ>
			  break;
 8002546:	e078      	b.n	800263a <updateDisplay+0x356>
			case 107:
			  setDigit(i);
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fe98 	bl	8002280 <setDigit>
			  setK();
 8002550:	f7ff fdd2 	bl	80020f8 <setK>
			  break;
 8002554:	e071      	b.n	800263a <updateDisplay+0x356>
			case 108:
			  setDigit(i);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe91 	bl	8002280 <setDigit>
			  setL();
 800255e:	f7ff fcb3 	bl	8001ec8 <setL>
			  break;
 8002562:	e06a      	b.n	800263a <updateDisplay+0x356>
			case 109:
			  setDigit(i);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe8a 	bl	8002280 <setDigit>
			  setM();
 800256c:	f7ff fdda 	bl	8002124 <setM>
			  break;
 8002570:	e063      	b.n	800263a <updateDisplay+0x356>
			case 110:
			  setDigit(i);
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe83 	bl	8002280 <setDigit>
			  setN();
 800257a:	f7ff fcbb 	bl	8001ef4 <setN>
			  break;
 800257e:	e05c      	b.n	800263a <updateDisplay+0x356>
			case 111:
			  setDigit(i);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fe7c 	bl	8002280 <setDigit>
			  setO();
 8002588:	f7ff fcca 	bl	8001f20 <setO>
			  break;
 800258c:	e055      	b.n	800263a <updateDisplay+0x356>
			case 112:
			  setDigit(i);
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe75 	bl	8002280 <setDigit>
			  setP();
 8002596:	f7ff fce9 	bl	8001f6c <setP>
			  break;
 800259a:	e04e      	b.n	800263a <updateDisplay+0x356>
			case 113:
    		  setDigit(i);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fe6e 	bl	8002280 <setDigit>
    		  setQ();
 80025a4:	f7ff fd02 	bl	8001fac <setQ>
    		  break;
 80025a8:	e047      	b.n	800263a <updateDisplay+0x356>
			case 114:
			  setDigit(i);
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe67 	bl	8002280 <setDigit>
			  setR();
 80025b2:	f7ff fd1b 	bl	8001fec <setR>
			  break;
 80025b6:	e040      	b.n	800263a <updateDisplay+0x356>
			case 115:
			  setDigit(i);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fe60 	bl	8002280 <setDigit>
			  setS();
 80025c0:	f7ff fd24 	bl	800200c <setS>
			  break;
 80025c4:	e039      	b.n	800263a <updateDisplay+0x356>
			case 116:
			  setDigit(i);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe59 	bl	8002280 <setDigit>
			  setT();
 80025ce:	f7ff fd3b 	bl	8002048 <setT>
			  break;
 80025d2:	e032      	b.n	800263a <updateDisplay+0x356>
			case 117:
     		  setDigit(i);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fe52 	bl	8002280 <setDigit>
     		  setU();
 80025dc:	f7ff fd4e 	bl	800207c <setU>
     		  break;
 80025e0:	e02b      	b.n	800263a <updateDisplay+0x356>
			case 118:
			  setDigit(i);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe4b 	bl	8002280 <setDigit>
			  setV();
 80025ea:	f7ff fdb1 	bl	8002150 <setV>
			  break;
 80025ee:	e024      	b.n	800263a <updateDisplay+0x356>
			case 119:
			  setDigit(i);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fe44 	bl	8002280 <setDigit>
			  setW();
 80025f8:	f7ff fdbe 	bl	8002178 <setW>
			  break;
 80025fc:	e01d      	b.n	800263a <updateDisplay+0x356>
			case 120:
			  setDigit(i);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fe3d 	bl	8002280 <setDigit>
			  setX();
 8002606:	f7ff fddb 	bl	80021c0 <setX>
			  break;
 800260a:	e016      	b.n	800263a <updateDisplay+0x356>
			case 121:
			  setDigit(i);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fe36 	bl	8002280 <setDigit>
			  setY();
 8002614:	f7ff fd52 	bl	80020bc <setY>
			  break;
 8002618:	e00f      	b.n	800263a <updateDisplay+0x356>
			case 122:
			  setDigit(i);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe2f 	bl	8002280 <setDigit>
			  setZ();
 8002622:	f7ff fde1 	bl	80021e8 <setZ>
			  break;
 8002626:	e008      	b.n	800263a <updateDisplay+0x356>
 8002628:	2000008c 	.word	0x2000008c
			case 95:
    		  setDigit(i);
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fe26 	bl	8002280 <setDigit>
    		  set_();
 8002634:	f7ff fdee 	bl	8002214 <set_>
    		  break;
 8002638:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <updateDisplay+0x3ac>)
 800263c:	799b      	ldrb	r3, [r3, #6]
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	429a      	cmp	r2, r3
 8002642:	d101      	bne.n	8002648 <updateDisplay+0x364>
		{
			setDecimalPoint();
 8002644:	f7ff f9e6 	bl	8001a14 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <updateDisplay+0x3b0>)
 800264a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <updateDisplay+0x3b4>)
 8002650:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8002654:	bf00      	nop
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <updateDisplay+0x3b4>)
 8002658:	e9d3 1200 	ldrd	r1, r2, [r3]
 800265c:	1c8b      	adds	r3, r1, #2
 800265e:	f142 0400 	adc.w	r4, r2, #0
 8002662:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <updateDisplay+0x3b0>)
 8002664:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002668:	42a2      	cmp	r2, r4
 800266a:	bf08      	it	eq
 800266c:	4299      	cmpeq	r1, r3
 800266e:	d3f2      	bcc.n	8002656 <updateDisplay+0x372>

		resetDigits();
 8002670:	f7ff f990 	bl	8001994 <resetDigits>
		resetSegments();
 8002674:	f7ff f932 	bl	80018dc <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	3301      	adds	r3, #1
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b03      	cmp	r3, #3
 8002682:	f67f ae35 	bls.w	80022f0 <updateDisplay+0xc>
	}
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	2000008c 	.word	0x2000008c
 8002694:	20000098 	.word	0x20000098
 8002698:	200000a0 	.word	0x200000a0

0800269c <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80026a0:	4806      	ldr	r0, [pc, #24]	; (80026bc <TIM3_IRQHandler+0x20>)
 80026a2:	f7ff f907 	bl	80018b4 <LL_TIM_IsActiveFlag_UPDATE>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 80026ac:	f7ff fe1a 	bl	80022e4 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM3_IRQHandler+0x20>)
 80026b2:	f7ff f8f1 	bl	8001898 <LL_TIM_ClearFlag_UPDATE>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40000400 	.word	0x40000400

080026c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <LL_GPIO_ResetOutputPin>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
 8002720:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002722:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002726:	f7ff ffcb 	bl	80026c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800272a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800272e:	f7ff ffc7 	bl	80026c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002732:	f640 111b 	movw	r1, #2331	; 0x91b
 8002736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273a:	f7ff ffd9 	bl	80026f0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800273e:	2132      	movs	r1, #50	; 0x32
 8002740:	4813      	ldr	r0, [pc, #76]	; (8002790 <MX_GPIO_Init+0x84>)
 8002742:	f7ff ffd5 	bl	80026f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002746:	f641 139f 	movw	r3, #6559	; 0x199f
 800274a:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800274c:	2301      	movs	r3, #1
 800274e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f7fe fabf 	bl	8000ce6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 8002768:	2333      	movs	r3, #51	; 0x33
 800276a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800276c:	2301      	movs	r3, #1
 800276e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <MX_GPIO_Init+0x84>)
 8002782:	f7fe fab0 	bl	8000ce6 <LL_GPIO_Init>

}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	48000400 	.word	0x48000400

08002794 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <NVIC_EnableIRQ+0x30>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da0b      	bge.n	8002810 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <NVIC_SetPriority+0x4c>)
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	3b04      	subs	r3, #4
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280e:	e009      	b.n	8002824 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <NVIC_SetPriority+0x50>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00
 8002834:	e000e100 	.word	0xe000e100

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_I2C_Enable>:
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_I2C_EnableClockStretching>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_I2C_DisableGeneralCall>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_I2C_SetOwnAddress2>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002912:	f023 0306 	bic.w	r3, r3, #6
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	430a      	orrs	r2, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	60da      	str	r2, [r3, #12]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_I2C_DisableOwnAddress2>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60da      	str	r2, [r3, #12]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_I2C_EnableIT_RX>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_I2C_DisableIT_RX>:
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0204 	bic.w	r2, r3, #4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_I2C_IsActiveFlag_TXIS>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_I2C_IsActiveFlag_RXNE>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_I2C_IsActiveFlag_STOP>:
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_I2C_ClearFlag_STOP>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	61da      	str	r2, [r3, #28]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_I2C_EnableAutoEndMode>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	0d5b      	lsrs	r3, r3, #21
 8002a56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <LL_I2C_HandleTransfer+0x48>)
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4319      	orrs	r1, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	4319      	orrs	r1, r3
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4319      	orrs	r1, r3
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	03ff7bff 	.word	0x03ff7bff

08002a8c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	b2db      	uxtb	r3, r3
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_AHB1_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	4907      	ldr	r1, [pc, #28]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000

08002af4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000

08002b24 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002b4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b52:	f7ff ffb7 	bl	8002ac4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002b62:	2301      	movs	r3, #1
 8002b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <MX_I2C1_Init+0xd4>)
 8002b74:	f7fe f8b7 	bl	8000ce6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002b78:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b7c:	f7ff ffba 	bl	8002af4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b80:	f7ff fe08 	bl	8002794 <NVIC_GetPriorityGrouping>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fe54 	bl	8002838 <NVIC_EncodePriority>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	201f      	movs	r0, #31
 8002b96:	f7ff fe25 	bl	80027e4 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b9a:	201f      	movs	r0, #31
 8002b9c:	f7ff fe08 	bl	80027b0 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002ba0:	4816      	ldr	r0, [pc, #88]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002ba2:	f7ff ff3d 	bl	8002a20 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002ba6:	4815      	ldr	r0, [pc, #84]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002ba8:	f7ff fec1 	bl	800292e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002bac:	4813      	ldr	r0, [pc, #76]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002bae:	f7ff fe96 	bl	80028de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002bb2:	4812      	ldr	r0, [pc, #72]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002bb4:	f7ff fe83 	bl	80028be <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <MX_I2C1_Init+0xdc>)
 8002bbe:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002bdc:	f7fe f9a0 	bl	8000f20 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002be6:	f7ff fe8a 	bl	80028fe <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002bea:	4804      	ldr	r0, [pc, #16]	; (8002bfc <MX_I2C1_Init+0xd8>)
 8002bec:	f7ff fe57 	bl	800289e <LL_I2C_Enable>
}
 8002bf0:	bf00      	nop
 8002bf2:	3738      	adds	r7, #56	; 0x38
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	40005400 	.word	0x40005400
 8002c00:	2000090e 	.word	0x2000090e

08002c04 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	71fb      	strb	r3, [r7, #7]
 8002c16:	4603      	mov	r3, r0
 8002c18:	71bb      	strb	r3, [r7, #6]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	717b      	strb	r3, [r7, #5]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002c22:	793b      	ldrb	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002c28:	79bb      	ldrb	r3, [r7, #6]
 8002c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c2e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002c30:	7979      	ldrb	r1, [r7, #5]
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <i2c_master_write+0x80>)
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4811      	ldr	r0, [pc, #68]	; (8002c88 <i2c_master_write+0x84>)
 8002c42:	f7ff fefd 	bl	8002a40 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480f      	ldr	r0, [pc, #60]	; (8002c88 <i2c_master_write+0x84>)
 8002c4c:	f7ff ff2b 	bl	8002aa6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c50:	e00a      	b.n	8002c68 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <i2c_master_write+0x84>)
 8002c54:	f7ff fe9b 	bl	800298e <LL_I2C_IsActiveFlag_TXIS>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4809      	ldr	r0, [pc, #36]	; (8002c88 <i2c_master_write+0x84>)
 8002c64:	f7ff ff1f 	bl	8002aa6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c68:	4807      	ldr	r0, [pc, #28]	; (8002c88 <i2c_master_write+0x84>)
 8002c6a:	f7ff feb6 	bl	80029da <LL_I2C_IsActiveFlag_STOP>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c74:	4804      	ldr	r0, [pc, #16]	; (8002c88 <i2c_master_write+0x84>)
 8002c76:	f7ff fec3 	bl	8002a00 <LL_I2C_ClearFlag_STOP>
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	80002000 	.word	0x80002000
 8002c88:	40005400 	.word	0x40005400

08002c8c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	70fb      	strb	r3, [r7, #3]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70bb      	strb	r3, [r7, #2]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002ca6:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <i2c_master_read+0xe0>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002cac:	7c3b      	ldrb	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002cb2:	78bb      	ldrb	r3, [r7, #2]
 8002cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cb8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <i2c_master_read+0xe4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002cc0:	482c      	ldr	r0, [pc, #176]	; (8002d74 <i2c_master_read+0xe8>)
 8002cc2:	f7ff fe44 	bl	800294e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002cc6:	7879      	ldrb	r1, [r7, #1]
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <i2c_master_read+0xec>)
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4827      	ldr	r0, [pc, #156]	; (8002d74 <i2c_master_read+0xe8>)
 8002cd8:	f7ff feb2 	bl	8002a40 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002cdc:	e00a      	b.n	8002cf4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002cde:	4825      	ldr	r0, [pc, #148]	; (8002d74 <i2c_master_read+0xe8>)
 8002ce0:	f7ff fe55 	bl	800298e <LL_I2C_IsActiveFlag_TXIS>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002cea:	78bb      	ldrb	r3, [r7, #2]
 8002cec:	4619      	mov	r1, r3
 8002cee:	4821      	ldr	r0, [pc, #132]	; (8002d74 <i2c_master_read+0xe8>)
 8002cf0:	f7ff fed9 	bl	8002aa6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002cf4:	481f      	ldr	r0, [pc, #124]	; (8002d74 <i2c_master_read+0xe8>)
 8002cf6:	f7ff fe70 	bl	80029da <LL_I2C_IsActiveFlag_STOP>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002d00:	481c      	ldr	r0, [pc, #112]	; (8002d74 <i2c_master_read+0xe8>)
 8002d02:	f7ff fe7d 	bl	8002a00 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002d06:	bf00      	nop
 8002d08:	481a      	ldr	r0, [pc, #104]	; (8002d74 <i2c_master_read+0xe8>)
 8002d0a:	f7ff fe66 	bl	80029da <LL_I2C_IsActiveFlag_STOP>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002d14:	7879      	ldrb	r1, [r7, #1]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <i2c_master_read+0xf0>)
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	2200      	movs	r2, #0
 8002d26:	4813      	ldr	r0, [pc, #76]	; (8002d74 <i2c_master_read+0xe8>)
 8002d28:	f7ff fe8a 	bl	8002a40 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002d2c:	bf00      	nop
 8002d2e:	4811      	ldr	r0, [pc, #68]	; (8002d74 <i2c_master_read+0xe8>)
 8002d30:	f7ff fe53 	bl	80029da <LL_I2C_IsActiveFlag_STOP>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f9      	beq.n	8002d2e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <i2c_master_read+0xe8>)
 8002d3c:	f7ff fe60 	bl	8002a00 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <i2c_master_read+0xe8>)
 8002d42:	f7ff fe14 	bl	800296e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <i2c_master_read+0xe8>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <i2c_master_read+0xe8>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <i2c_master_read+0xf4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <i2c_master_read+0xe4>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002d5e:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <i2c_master_read+0xe0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200000ac 	.word	0x200000ac
 8002d70:	200000a8 	.word	0x200000a8
 8002d74:	40005400 	.word	0x40005400
 8002d78:	80002000 	.word	0x80002000
 8002d7c:	80002400 	.word	0x80002400
 8002d80:	200000a9 	.word	0x200000a9

08002d84 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8002d84:	b598      	push	{r3, r4, r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002d88:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <I2C1_EV_IRQHandler+0x50>)
 8002d8a:	f7ff fe13 	bl	80029b4 <LL_I2C_IsActiveFlag_RXNE>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <I2C1_EV_IRQHandler+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <I2C1_EV_IRQHandler+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	1c59      	adds	r1, r3, #1
 8002da0:	b2c8      	uxtb	r0, r1
 8002da2:	490e      	ldr	r1, [pc, #56]	; (8002ddc <I2C1_EV_IRQHandler+0x58>)
 8002da4:	7008      	strb	r0, [r1, #0]
 8002da6:	18d4      	adds	r4, r2, r3
 8002da8:	480a      	ldr	r0, [pc, #40]	; (8002dd4 <I2C1_EV_IRQHandler+0x50>)
 8002daa:	f7ff fe6f 	bl	8002a8c <LL_I2C_ReceiveData8>
 8002dae:	4603      	mov	r3, r0
 8002db0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <I2C1_EV_IRQHandler+0x58>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b13      	cmp	r3, #19
 8002dba:	d903      	bls.n	8002dc4 <I2C1_EV_IRQHandler+0x40>
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <I2C1_EV_IRQHandler+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e001      	b.n	8002dc8 <I2C1_EV_IRQHandler+0x44>
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <I2C1_EV_IRQHandler+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <I2C1_EV_IRQHandler+0x5c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
	}
}
 8002dce:	bf00      	nop
 8002dd0:	bd98      	pop	{r3, r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	200000ac 	.word	0x200000ac
 8002ddc:	200000a9 	.word	0x200000a9
 8002de0:	200000a8 	.word	0x200000a8

08002de4 <NVIC_SetPriorityGrouping>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <LL_RCC_HSI_Enable+0x1c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <LL_RCC_HSI_Enable+0x1c>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000

08002e4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <LL_RCC_HSI_IsReady+0x20>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40021000 	.word	0x40021000

08002e70 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <LL_RCC_SetSysClkSource+0x24>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <LL_RCC_SetSysClkSource+0x24>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <LL_RCC_GetSysClkSource+0x18>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <LL_RCC_SetAHBPrescaler+0x24>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	4904      	ldr	r1, [pc, #16]	; (8002f04 <LL_RCC_SetAHBPrescaler+0x24>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000

08002f08 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	4904      	ldr	r1, [pc, #16]	; (8002f2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000

08002f30 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f40:	4904      	ldr	r1, [pc, #16]	; (8002f54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <LL_RCC_SetI2CClockSource+0x2c>)
 8002f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <LL_RCC_SetI2CClockSource+0x2c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40021000 	.word	0x40021000

08002f88 <LL_APB1_GRP1_EnableClock>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <LL_FLASH_SetLatency+0x24>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 0207 	bic.w	r2, r3, #7
 8002ff8:	4904      	ldr	r1, [pc, #16]	; (800300c <LL_FLASH_SetLatency+0x24>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40022000 	.word	0x40022000

08003010 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <LL_FLASH_GetLatency+0x18>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40022000 	.word	0x40022000

0800302c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d106      	bne.n	8003048 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <LL_SYSTICK_SetClkSource+0x34>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <LL_SYSTICK_SetClkSource+0x34>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8003046:	e005      	b.n	8003054 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <LL_SYSTICK_SetClkSource+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <LL_SYSTICK_SetClkSource+0x34>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e010 	.word	0xe000e010

08003064 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <LL_SYSTICK_EnableIT+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <LL_SYSTICK_EnableIT+0x1c>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010
 8003084:	00000000 	.word	0x00000000

08003088 <get_altitude>:

extern uint64_t disp_time;
uint64_t saved_time;
double num_to_display = 10;

int get_altitude(int8_t temp, int16_t press){
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	460a      	mov	r2, r1
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	4613      	mov	r3, r2
 8003096:	80bb      	strh	r3, [r7, #4]
    double tmp1 = 1013/(double)press;
 8003098:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd f9e5 	bl	800046c <__aeabi_i2d>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	a124      	add	r1, pc, #144	; (adr r1, 800313c <get_altitude+0xb4>)
 80030ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030b0:	f7fd fb70 	bl	8000794 <__aeabi_ddiv>
 80030b4:	4603      	mov	r3, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
    double tmp2 = pow(tmp1, (1/5.257));
 80030bc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8003128 <get_altitude+0xa0>
 80030c0:	ed97 0b06 	vldr	d0, [r7, #24]
 80030c4:	f000 fdec 	bl	8003ca0 <pow>
 80030c8:	ed87 0b04 	vstr	d0, [r7, #16]
    int alti = ((tmp2 - 1)*(temp + 273))/0.0065;
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <get_altitude+0xb0>)
 80030d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030d6:	f7fd f87b 	bl	80001d0 <__aeabi_dsub>
 80030da:	4603      	mov	r3, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	4625      	mov	r5, r4
 80030e0:	461c      	mov	r4, r3
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	f203 1311 	addw	r3, r3, #273	; 0x111
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f9be 	bl	800046c <__aeabi_i2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd fa22 	bl	8000540 <__aeabi_dmul>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	4618      	mov	r0, r3
 8003102:	4621      	mov	r1, r4
 8003104:	a30a      	add	r3, pc, #40	; (adr r3, 8003130 <get_altitude+0xa8>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd fb43 	bl	8000794 <__aeabi_ddiv>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	4618      	mov	r0, r3
 8003114:	4621      	mov	r1, r4
 8003116:	f7fd fcc3 	bl	8000aa0 <__aeabi_d2iz>
 800311a:	4603      	mov	r3, r0
 800311c:	60fb      	str	r3, [r7, #12]
    return alti;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	7dee2d4a 	.word	0x7dee2d4a
 800312c:	3fc85936 	.word	0x3fc85936
 8003130:	76c8b439 	.word	0x76c8b439
 8003134:	3f7a9fbe 	.word	0x3f7a9fbe
 8003138:	3ff00000 	.word	0x3ff00000
 800313c:	00000000 	.word	0x00000000
 8003140:	408fa800 	.word	0x408fa800

08003144 <main>:

int main(void)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b08e      	sub	sp, #56	; 0x38
 8003148:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800314a:	2001      	movs	r0, #1
 800314c:	f7ff ff34 	bl	8002fb8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003150:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003154:	f7ff ff18 	bl	8002f88 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003158:	2003      	movs	r0, #3
 800315a:	f7ff fe43 	bl	8002de4 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 800315e:	f000 f8a9 	bl	80032b4 <SystemClock_Config>

  MX_GPIO_Init();
 8003162:	f7ff fad3 	bl	800270c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003166:	f7ff fcdd 	bl	8002b24 <MX_I2C1_Init>

  setSegments();
 800316a:	f7fe fbe5 	bl	8001938 <setSegments>
  setDigits();
 800316e:	f7fe fc31 	bl	80019d4 <setDigits>

  LL_mDelay(2000);
 8003172:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003176:	f7fe fb3f 	bl	80017f8 <LL_mDelay>

  resetDigits();
 800317a:	f7fe fc0b 	bl	8001994 <resetDigits>
  resetSegments();
 800317e:	f7fe fbad 	bl	80018dc <resetSegments>

  MX_TIM3_Init();
 8003182:	f000 fab3 	bl	80036ec <MX_TIM3_Init>
  uint8_t lps = lps25hb_init();
 8003186:	f000 fd25 	bl	8003bd4 <lps25hb_init>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t hts = hts221_init();
 8003190:	f000 fc68 	bl	8003a64 <hts221_init>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t lsm = lsm6ds0_init();
 800319a:	f000 fb95 	bl	80038c8 <lsm6ds0_init>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t text[21] = "branislav_kutas_98344";
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <main+0x164>)
 80031a6:	f107 0408 	add.w	r4, r7, #8
 80031aa:	461d      	mov	r5, r3
 80031ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b4:	6020      	str	r0, [r4, #0]
 80031b6:	3404      	adds	r4, #4
 80031b8:	7021      	strb	r1, [r4, #0]
  uint8_t txtIndex = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t cycleRight = 1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  while (1)
  {
	  int16_t lps_press = lps25hb_get_press();
 80031c6:	f000 fce9 	bl	8003b9c <lps25hb_get_press>
 80031ca:	4603      	mov	r3, r0
 80031cc:	857b      	strh	r3, [r7, #42]	; 0x2a
	  int8_t lps_temp = lps25hb_get_temp();
 80031ce:	f000 fcb3 	bl	8003b38 <lps25hb_get_temp>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  int8_t lsm_temp = lsm6ds0_get_temp();
 80031d8:	f000 fb5c 	bl	8003894 <lsm6ds0_get_temp>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  int8_t hts_temp = hts221_get_temp();
 80031e2:	f000 fbeb 	bl	80039bc <hts221_get_temp>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  int8_t hts_humi = hts221_get_humi();
 80031ec:	f000 fc10 	bl	8003a10 <hts221_get_humi>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int alt = get_altitude(lps_temp, lps_press);
 80031f6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80031fa:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff41 	bl	8003088 <get_altitude>
 8003206:	6238      	str	r0, [r7, #32]

	  if(disp_time > (saved_time + 500))
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <main+0x168>)
 800320a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800320e:	f513 71fa 	adds.w	r1, r3, #500	; 0x1f4
 8003212:	f144 0200 	adc.w	r2, r4, #0
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <main+0x16c>)
 8003218:	e9d3 3400 	ldrd	r3, r4, [r3]
 800321c:	42a2      	cmp	r2, r4
 800321e:	bf08      	it	eq
 8003220:	4299      	cmpeq	r1, r3
 8003222:	d2d0      	bcs.n	80031c6 <main+0x82>
	         {
	             uint8_t toDisplay[4] = "";
 8003224:	2300      	movs	r3, #0
 8003226:	607b      	str	r3, [r7, #4]

	             if (txtIndex >= 17){
 8003228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800322c:	2b10      	cmp	r3, #16
 800322e:	d903      	bls.n	8003238 <main+0xf4>
	                 cycleRight = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003236:	e006      	b.n	8003246 <main+0x102>
	             }
	             else if (txtIndex <= 0){
 8003238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <main+0x102>
	                 cycleRight = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	             }

	             for (int i = 0; i<4; i++){
 8003246:	2300      	movs	r3, #0
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
 800324a:	e010      	b.n	800326e <main+0x12a>
	                 toDisplay[i] = text[i + txtIndex];
 800324c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	4413      	add	r3, r2
 8003254:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003258:	4413      	add	r3, r2
 800325a:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 800325e:	1d3a      	adds	r2, r7, #4
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	4413      	add	r3, r2
 8003264:	460a      	mov	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]
	             for (int i = 0; i<4; i++){
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	3301      	adds	r3, #1
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2b03      	cmp	r3, #3
 8003272:	ddeb      	ble.n	800324c <main+0x108>
	             }

	             if (cycleRight){
 8003274:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <main+0x144>
	                 txtIndex++;
 800327c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003280:	3301      	adds	r3, #1
 8003282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003286:	e004      	b.n	8003292 <main+0x14e>
	             }
	             else {
	                 txtIndex--;
 8003288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800328c:	3b01      	subs	r3, #1
 800328e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	             }

	             displayString(toDisplay);
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe ffc7 	bl	8002228 <displayString>

	             saved_time = disp_time;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <main+0x16c>)
 800329c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032a0:	4a02      	ldr	r2, [pc, #8]	; (80032ac <main+0x168>)
 80032a2:	e9c2 3400 	strd	r3, r4, [r2]
  {
 80032a6:	e78e      	b.n	80031c6 <main+0x82>
 80032a8:	08004d68 	.word	0x08004d68
 80032ac:	200000c0 	.word	0x200000c0
 80032b0:	20000098 	.word	0x20000098

080032b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7ff fe95 	bl	8002fe8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80032be:	f7ff fea7 	bl	8003010 <LL_FLASH_GetLatency>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80032c8:	f000 f830 	bl	800332c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80032cc:	f7ff fdae 	bl	8002e2c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80032d0:	bf00      	nop
 80032d2:	f7ff fdbb 	bl	8002e4c <LL_RCC_HSI_IsReady>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d1fa      	bne.n	80032d2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80032dc:	2010      	movs	r0, #16
 80032de:	f7ff fdc7 	bl	8002e70 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7ff fdfc 	bl	8002ee0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7ff fe0d 	bl	8002f08 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7ff fe1e 	bl	8002f30 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7ff fdd1 	bl	8002e9c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80032fa:	bf00      	nop
 80032fc:	f7ff fde2 	bl	8002ec4 <LL_RCC_GetSysClkSource>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1fa      	bne.n	80032fc <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8003306:	4808      	ldr	r0, [pc, #32]	; (8003328 <SystemClock_Config+0x74>)
 8003308:	f7fe fa68 	bl	80017dc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800330c:	2004      	movs	r0, #4
 800330e:	f7ff fe8d 	bl	800302c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <SystemClock_Config+0x74>)
 8003314:	f7fe fa94 	bl	8001840 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003318:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800331c:	f7ff fe1c 	bl	8002f58 <LL_RCC_SetI2CClockSource>
  LL_SYSTICK_EnableIT();
 8003320:	f7ff fea0 	bl	8003064 <LL_SYSTICK_EnableIT>
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	007a1200 	.word	0x007a1200

0800332c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <HardFault_Handler+0x4>

0800334e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <MemManage_Handler+0x4>

08003354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <BusFault_Handler+0x4>

0800335a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <UsageFault_Handler+0x4>

08003360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338c:	b490      	push	{r4, r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <SysTick_Handler+0x20>)
 8003392:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003396:	1c4b      	adds	r3, r1, #1
 8003398:	f142 0400 	adc.w	r4, r2, #0
 800339c:	4a03      	ldr	r2, [pc, #12]	; (80033ac <SysTick_Handler+0x20>)
 800339e:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc90      	pop	{r4, r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000098 	.word	0x20000098

080033b0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <SystemInit+0x84>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <SystemInit+0x84>)
 80033bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033c4:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <SystemInit+0x88>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <SystemInit+0x88>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <SystemInit+0x88>)
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4918      	ldr	r1, [pc, #96]	; (8003438 <SystemInit+0x88>)
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <SystemInit+0x8c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <SystemInit+0x88>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <SystemInit+0x88>)
 80033e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <SystemInit+0x88>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a11      	ldr	r2, [pc, #68]	; (8003438 <SystemInit+0x88>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <SystemInit+0x88>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <SystemInit+0x88>)
 80033fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003402:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <SystemInit+0x88>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <SystemInit+0x88>)
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <SystemInit+0x88>)
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	4908      	ldr	r1, [pc, #32]	; (8003438 <SystemInit+0x88>)
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <SystemInit+0x90>)
 8003418:	4013      	ands	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <SystemInit+0x88>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <SystemInit+0x84>)
 8003424:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003428:	609a      	str	r2, [r3, #8]
#endif
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	40021000 	.word	0x40021000
 800343c:	f87fc00c 	.word	0xf87fc00c
 8003440:	ff00fccc 	.word	0xff00fccc

08003444 <NVIC_GetPriorityGrouping>:
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EnableIRQ>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <NVIC_EnableIRQ+0x30>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <NVIC_SetPriority>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da0b      	bge.n	80034c0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <NVIC_SetPriority+0x4c>)
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	3b04      	subs	r3, #4
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	761a      	strb	r2, [r3, #24]
}
 80034be:	e009      	b.n	80034d4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <NVIC_SetPriority+0x50>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <NVIC_EncodePriority>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <LL_APB1_GRP1_EnableClock>:
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <LL_APB1_GRP1_EnableClock+0x2c>)
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <LL_APB1_GRP1_EnableClock+0x2c>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4313      	orrs	r3, r2
 8003562:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4013      	ands	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40021000 	.word	0x40021000

08003580 <LL_TIM_EnableCounter>:
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_TIM_EnableARRPreload>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_TIM_OC_DisableFast>:
{
 80035c0:	b4b0      	push	{r4, r5, r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d028      	beq.n	8003622 <LL_TIM_OC_DisableFast+0x62>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d023      	beq.n	800361e <LL_TIM_OC_DisableFast+0x5e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d01e      	beq.n	800361a <LL_TIM_OC_DisableFast+0x5a>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d019      	beq.n	8003616 <LL_TIM_OC_DisableFast+0x56>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d013      	beq.n	8003612 <LL_TIM_OC_DisableFast+0x52>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d00d      	beq.n	800360e <LL_TIM_OC_DisableFast+0x4e>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d007      	beq.n	800360a <LL_TIM_OC_DisableFast+0x4a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d101      	bne.n	8003606 <LL_TIM_OC_DisableFast+0x46>
 8003602:	2307      	movs	r3, #7
 8003604:	e00e      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 8003606:	2308      	movs	r3, #8
 8003608:	e00c      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 800360a:	2306      	movs	r3, #6
 800360c:	e00a      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <LL_TIM_OC_DisableFast+0x64>
 8003622:	2300      	movs	r3, #0
 8003624:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3318      	adds	r3, #24
 800362a:	461a      	mov	r2, r3
 800362c:	4629      	mov	r1, r5
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <LL_TIM_OC_DisableFast+0x94>)
 8003630:	5c5b      	ldrb	r3, [r3, r1]
 8003632:	4413      	add	r3, r2
 8003634:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	4629      	mov	r1, r5
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <LL_TIM_OC_DisableFast+0x98>)
 800363c:	5c5b      	ldrb	r3, [r3, r1]
 800363e:	4619      	mov	r1, r3
 8003640:	2304      	movs	r3, #4
 8003642:	408b      	lsls	r3, r1
 8003644:	43db      	mvns	r3, r3
 8003646:	4013      	ands	r3, r2
 8003648:	6023      	str	r3, [r4, #0]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bcb0      	pop	{r4, r5, r7}
 8003652:	4770      	bx	lr
 8003654:	08004d80 	.word	0x08004d80
 8003658:	08004d8c 	.word	0x08004d8c

0800365c <LL_TIM_SetClockSource>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_TIM_SetTriggerOutput>:
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_TIM_DisableMasterSlaveMode>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_TIM_EnableIT_UPDATE>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08e      	sub	sp, #56	; 0x38
 80036f0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80036f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	2220      	movs	r2, #32
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fac1 	bl	8003c90 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800370e:	2002      	movs	r0, #2
 8003710:	f7ff ff1e 	bl	8003550 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8003714:	f7ff fe96 	bl	8003444 <NVIC_GetPriorityGrouping>
 8003718:	4603      	mov	r3, r0
 800371a:	2202      	movs	r2, #2
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fee2 	bl	80034e8 <NVIC_EncodePriority>
 8003724:	4603      	mov	r3, r0
 8003726:	4619      	mov	r1, r3
 8003728:	201d      	movs	r0, #29
 800372a:	f7ff feb3 	bl	8003494 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800372e:	201d      	movs	r0, #29
 8003730:	f7ff fe96 	bl	8003460 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8003734:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8003738:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800373e:	2313      	movs	r3, #19
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374a:	4619      	mov	r1, r3
 800374c:	4817      	ldr	r0, [pc, #92]	; (80037ac <MX_TIM3_Init+0xc0>)
 800374e:	f7fd fcb1 	bl	80010b4 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8003752:	4816      	ldr	r0, [pc, #88]	; (80037ac <MX_TIM3_Init+0xc0>)
 8003754:	f7ff ff24 	bl	80035a0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003758:	2100      	movs	r1, #0
 800375a:	4814      	ldr	r0, [pc, #80]	; (80037ac <MX_TIM3_Init+0xc0>)
 800375c:	f7ff ff7e 	bl	800365c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8003760:	2310      	movs	r3, #16
 8003762:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	461a      	mov	r2, r3
 8003778:	2101      	movs	r1, #1
 800377a:	480c      	ldr	r0, [pc, #48]	; (80037ac <MX_TIM3_Init+0xc0>)
 800377c:	f7fd fd0e 	bl	800119c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003780:	2101      	movs	r1, #1
 8003782:	480a      	ldr	r0, [pc, #40]	; (80037ac <MX_TIM3_Init+0xc0>)
 8003784:	f7ff ff1c 	bl	80035c0 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003788:	2100      	movs	r1, #0
 800378a:	4808      	ldr	r0, [pc, #32]	; (80037ac <MX_TIM3_Init+0xc0>)
 800378c:	f7ff ff7b 	bl	8003686 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003790:	4806      	ldr	r0, [pc, #24]	; (80037ac <MX_TIM3_Init+0xc0>)
 8003792:	f7ff ff8b 	bl	80036ac <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_TIM3_Init+0xc0>)
 8003798:	f7ff ff98 	bl	80036cc <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 800379c:	4803      	ldr	r0, [pc, #12]	; (80037ac <MX_TIM3_Init+0xc0>)
 800379e:	f7ff feef 	bl	8003580 <LL_TIM_EnableCounter>

}
 80037a2:	bf00      	nop
 80037a4:	3738      	adds	r7, #56	; 0x38
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40000400 	.word	0x40000400

080037b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037b6:	e003      	b.n	80037c0 <LoopCopyDataInit>

080037b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80037bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80037be:	3104      	adds	r1, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80037c0:	480b      	ldr	r0, [pc, #44]	; (80037f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80037c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80037c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80037c8:	d3f6      	bcc.n	80037b8 <CopyDataInit>
	ldr	r2, =_sbss
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80037cc:	e002      	b.n	80037d4 <LoopFillZerobss>

080037ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80037ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037d0:	f842 3b04 	str.w	r3, [r2], #4

080037d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <LoopForever+0x16>)
	cmp	r2, r3
 80037d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037d8:	d3f9      	bcc.n	80037ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037da:	f7ff fde9 	bl	80033b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037de:	f000 fa33 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037e2:	f7ff fcaf 	bl	8003144 <main>

080037e6 <LoopForever>:

LoopForever:
    b LoopForever
 80037e6:	e7fe      	b.n	80037e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037e8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80037ec:	08004de8 	.word	0x08004de8
	ldr	r0, =_sdata
 80037f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037f4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80037f8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80037fc:	200000d4 	.word	0x200000d4

08003800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC1_2_IRQHandler>
	...

08003804 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t adress_acc = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, adress_acc, 0));
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <lsm6ds0_read_byte+0x30>)
 8003814:	7819      	ldrb	r1, [r3, #0]
 8003816:	79fa      	ldrb	r2, [r7, #7]
 8003818:	f107 000f 	add.w	r0, r7, #15
 800381c:	2300      	movs	r3, #0
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	2101      	movs	r1, #1
 8003824:	f7ff fa32 	bl	8002c8c <i2c_master_read>
 8003828:	4603      	mov	r3, r0
 800382a:	781b      	ldrb	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000004 	.word	0x20000004

08003838 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	460a      	mov	r2, r1
 8003842:	71fb      	strb	r3, [r7, #7]
 8003844:	4613      	mov	r3, r2
 8003846:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, adress_acc, 0);
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <lsm6ds0_write_byte+0x28>)
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	79f9      	ldrb	r1, [r7, #7]
 800384e:	79b8      	ldrb	r0, [r7, #6]
 8003850:	2300      	movs	r3, #0
 8003852:	f7ff f9d7 	bl	8002c04 <i2c_master_write>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000004 	.word	0x20000004

08003864 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	4613      	mov	r3, r2
 8003872:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, adress_acc, 1);
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <lsm6ds0_readArray+0x2c>)
 8003876:	7818      	ldrb	r0, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	78b9      	ldrb	r1, [r7, #2]
 800387c:	2301      	movs	r3, #1
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4603      	mov	r3, r0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fa02 	bl	8002c8c <i2c_master_read>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000004 	.word	0x20000004

08003894 <lsm6ds0_get_temp>:


int8_t lsm6ds0_get_temp()
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	lsm6ds0_readArray(temp, LSM6DS0_ADDRESS_TEMP_L, 2);
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2202      	movs	r2, #2
 800389e:	2120      	movs	r1, #32
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ffdf 	bl	8003864 <lsm6ds0_readArray>

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
 80038a6:	797b      	ldrb	r3, [r7, #5]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b21a      	sxth	r2, r3
 80038ac:	793b      	ldrb	r3, [r7, #4]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b21b      	sxth	r3, r3
 80038b4:	10db      	asrs	r3, r3, #3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3319      	adds	r3, #25
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	b25b      	sxtb	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80038d2:	2064      	movs	r0, #100	; 0x64
 80038d4:	f7fd ff90 	bl	80017f8 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80038d8:	200f      	movs	r0, #15
 80038da:	f7ff ff93 	bl	8003804 <lsm6ds0_read_byte>
 80038de:	4603      	mov	r3, r0
 80038e0:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	2b68      	cmp	r3, #104	; 0x68
 80038e6:	d102      	bne.n	80038ee <lsm6ds0_init+0x26>
	{
		status = 1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	71fb      	strb	r3, [r7, #7]
 80038ec:	e00f      	b.n	800390e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		adress_acc = LSM6DS0_DEVICE_ADDRESS_1;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <lsm6ds0_init+0x60>)
 80038f0:	22d6      	movs	r2, #214	; 0xd6
 80038f2:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80038f4:	200f      	movs	r0, #15
 80038f6:	f7ff ff85 	bl	8003804 <lsm6ds0_read_byte>
 80038fa:	4603      	mov	r3, r0
 80038fc:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	2b68      	cmp	r3, #104	; 0x68
 8003902:	d102      	bne.n	800390a <lsm6ds0_init+0x42>
		{
			status = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	e001      	b.n	800390e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8003912:	797b      	ldrb	r3, [r7, #5]
 8003914:	4619      	mov	r1, r3
 8003916:	2010      	movs	r0, #16
 8003918:	f7ff ff8e 	bl	8003838 <lsm6ds0_write_byte>

	return status;
 800391c:	79fb      	ldrb	r3, [r7, #7]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000004 	.word	0x20000004

0800392c <hts221_read_byte>:
#include "hts221.h"

uint8_t addres = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <hts221_read_byte+0x30>)
 800393c:	7819      	ldrb	r1, [r3, #0]
 800393e:	79fa      	ldrb	r2, [r7, #7]
 8003940:	f107 000f 	add.w	r0, r7, #15
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	2101      	movs	r1, #1
 800394c:	f7ff f99e 	bl	8002c8c <i2c_master_read>
 8003950:	4603      	mov	r3, r0
 8003952:	781b      	ldrb	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000005 	.word	0x20000005

08003960 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	460a      	mov	r2, r1
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	4613      	mov	r3, r2
 800396e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <hts221_write_byte+0x28>)
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	79f9      	ldrb	r1, [r7, #7]
 8003976:	79b8      	ldrb	r0, [r7, #6]
 8003978:	2300      	movs	r3, #0
 800397a:	f7ff f943 	bl	8002c04 <i2c_master_write>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000005 	.word	0x20000005

0800398c <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
 8003998:	4613      	mov	r3, r2
 800399a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <hts221_readArray+0x2c>)
 800399e:	7818      	ldrb	r0, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	78b9      	ldrb	r1, [r7, #2]
 80039a4:	2301      	movs	r3, #1
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff f96e 	bl	8002c8c <i2c_master_read>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000005 	.word	0x20000005

080039bc <hts221_get_temp>:


int8_t hts221_get_temp()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
    uint8_t temp[2];
    hts221_readArray(temp, HTS221_ADDRESS_TEMP_L, 2);
 80039c2:	463b      	mov	r3, r7
 80039c4:	2202      	movs	r2, #2
 80039c6:	212a      	movs	r1, #42	; 0x2a
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ffdf 	bl	800398c <hts221_readArray>
    uint16_t tmp = ((temp[1] << 8) | temp[0]);
 80039ce:	787b      	ldrb	r3, [r7, #1]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b21a      	sxth	r2, r3
 80039d4:	783b      	ldrb	r3, [r7, #0]
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	4313      	orrs	r3, r2
 80039da:	b21b      	sxth	r3, r3
 80039dc:	80fb      	strh	r3, [r7, #6]
    int8_t temperature = (10*(tmp - 300))/(200) + 10;
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <hts221_get_temp+0x50>)
 80039ee:	fb82 1203 	smull	r1, r2, r2, r3
 80039f2:	1192      	asrs	r2, r2, #6
 80039f4:	17db      	asrs	r3, r3, #31
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	330a      	adds	r3, #10
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	717b      	strb	r3, [r7, #5]

    return temperature;
 8003a00:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <hts221_get_humi>:

int8_t hts221_get_humi()
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
    uint8_t temp[2];

    hts221_readArray(temp, HTS221_ADDRESS_HUMI_L, 2);
 8003a16:	463b      	mov	r3, r7
 8003a18:	2202      	movs	r2, #2
 8003a1a:	2128      	movs	r1, #40	; 0x28
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ffb5 	bl	800398c <hts221_readArray>
    uint16_t tmp = ((temp[1] << 8) | temp[0]);
 8003a22:	787b      	ldrb	r3, [r7, #1]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	b21a      	sxth	r2, r3
 8003a28:	783b      	ldrb	r3, [r7, #0]
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	80fb      	strh	r3, [r7, #6]
    int8_t humi = (20*(tmp - 4000))/(2000) + 20;
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <hts221_get_humi+0x50>)
 8003a42:	fb82 1203 	smull	r1, r2, r2, r3
 8003a46:	11d2      	asrs	r2, r2, #7
 8003a48:	17db      	asrs	r3, r3, #31
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	3314      	adds	r3, #20
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	717b      	strb	r3, [r7, #5]
    return humi;
 8003a54:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <hts221_init>:


uint8_t hts221_init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8003a6e:	2064      	movs	r0, #100	; 0x64
 8003a70:	f7fd fec2 	bl	80017f8 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8003a74:	200f      	movs	r0, #15
 8003a76:	f7ff ff59 	bl	800392c <hts221_read_byte>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8003a7e:	79bb      	ldrb	r3, [r7, #6]
 8003a80:	2bbc      	cmp	r3, #188	; 0xbc
 8003a82:	d10a      	bne.n	8003a9a <hts221_init+0x36>
	{
		status = 1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	71fb      	strb	r3, [r7, #7]
	{
		status = 0;
		return status;
	}

	uint8_t ctrl1 = (8 << 4) | 1;
 8003a88:	2381      	movs	r3, #129	; 0x81
 8003a8a:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8003a8c:	797b      	ldrb	r3, [r7, #5]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	2020      	movs	r0, #32
 8003a92:	f7ff ff65 	bl	8003960 <hts221_write_byte>

	return status;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	e002      	b.n	8003aa0 <hts221_init+0x3c>
		status = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	71fb      	strb	r3, [r7, #7]
		return status;
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_press = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_press, 0));
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <lps25hb_read_byte+0x30>)
 8003ab8:	7819      	ldrb	r1, [r3, #0]
 8003aba:	79fa      	ldrb	r2, [r7, #7]
 8003abc:	f107 000f 	add.w	r0, r7, #15
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f7ff f8e0 	bl	8002c8c <i2c_master_read>
 8003acc:	4603      	mov	r3, r0
 8003ace:	781b      	ldrb	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000006 	.word	0x20000006

08003adc <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	71fb      	strb	r3, [r7, #7]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_press, 0);
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <lps25hb_write_byte+0x28>)
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	79f9      	ldrb	r1, [r7, #7]
 8003af2:	79b8      	ldrb	r0, [r7, #6]
 8003af4:	2300      	movs	r3, #0
 8003af6:	f7ff f885 	bl	8002c04 <i2c_master_write>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000006 	.word	0x20000006

08003b08 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_press, 1);
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <lps25hb_readArray+0x2c>)
 8003b1a:	7818      	ldrb	r0, [r3, #0]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	78b9      	ldrb	r1, [r7, #2]
 8003b20:	2301      	movs	r3, #1
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4603      	mov	r3, r0
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff f8b0 	bl	8002c8c <i2c_master_read>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000006 	.word	0x20000006

08003b38 <lps25hb_get_temp>:


int8_t lps25hb_get_temp()
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
    uint8_t temp[2];
    lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP_L, 2);
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	2202      	movs	r2, #2
 8003b42:	212b      	movs	r1, #43	; 0x2b
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ffdf 	bl	8003b08 <lps25hb_readArray>
    int16_t temperature = ((temp[1] << 8) | temp[0]);
 8003b4a:	797b      	ldrb	r3, [r7, #5]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	793b      	ldrb	r3, [r7, #4]
 8003b52:	b21b      	sxth	r3, r3
 8003b54:	4313      	orrs	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]

    return (42.5 + (temperature/480));
 8003b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <lps25hb_get_temp+0x5c>)
 8003b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8003b62:	441a      	add	r2, r3
 8003b64:	1212      	asrs	r2, r2, #8
 8003b66:	17db      	asrs	r3, r3, #31
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fc7d 	bl	800046c <__aeabi_i2d>
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <lps25hb_get_temp+0x60>)
 8003b78:	f7fc fb2c 	bl	80001d4 <__adddf3>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	f7fc ff8c 	bl	8000aa0 <__aeabi_d2iz>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b25b      	sxtb	r3, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	88888889 	.word	0x88888889
 8003b98:	40454000 	.word	0x40454000

08003b9c <lps25hb_get_press>:

int16_t lps25hb_get_press()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
	uint8_t data[3];

	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS_XL, 3);
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	2128      	movs	r1, #40	; 0x28
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ffad 	bl	8003b08 <lps25hb_readArray>

	uint32_t press = ((data[2] << 16) | (data[1] << 8) | data[0])/4096;
 8003bae:	78bb      	ldrb	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	787b      	ldrb	r3, [r7, #1]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	783a      	ldrb	r2, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da01      	bge.n	8003bc4 <lps25hb_get_press+0x28>
 8003bc0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003bc4:	131b      	asrs	r3, r3, #12
 8003bc6:	607b      	str	r3, [r7, #4]

	return ((int16_t)(press));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b21b      	sxth	r3, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8003bde:	2064      	movs	r0, #100	; 0x64
 8003be0:	f7fd fe0a 	bl	80017f8 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8003be4:	200f      	movs	r0, #15
 8003be6:	f7ff ff5f 	bl	8003aa8 <lps25hb_read_byte>
 8003bea:	4603      	mov	r3, r0
 8003bec:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8003bee:	79bb      	ldrb	r3, [r7, #6]
 8003bf0:	2bbd      	cmp	r3, #189	; 0xbd
 8003bf2:	d102      	bne.n	8003bfa <lps25hb_init+0x26>
	{
		status = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	71fb      	strb	r3, [r7, #7]
 8003bf8:	e011      	b.n	8003c1e <lps25hb_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		address_press = LPS25HB_DEVICE_ADDRESS_1;
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <lps25hb_init+0x64>)
 8003bfc:	22ba      	movs	r2, #186	; 0xba
 8003bfe:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8003c00:	200f      	movs	r0, #15
 8003c02:	f7ff ff51 	bl	8003aa8 <lps25hb_read_byte>
 8003c06:	4603      	mov	r3, r0
 8003c08:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8003c0a:	79bb      	ldrb	r3, [r7, #6]
 8003c0c:	2bbd      	cmp	r3, #189	; 0xbd
 8003c0e:	d102      	bne.n	8003c16 <lps25hb_init+0x42>
		{
			status = 1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	71fb      	strb	r3, [r7, #7]
 8003c14:	e003      	b.n	8003c1e <lps25hb_init+0x4a>
		}
		else
		{
			status = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	71fb      	strb	r3, [r7, #7]
			return status;
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	e007      	b.n	8003c2e <lps25hb_init+0x5a>
		}
	}

	//acc device init

	uint8_t ctrl1 = 9 << 4;
 8003c1e:	2390      	movs	r3, #144	; 0x90
 8003c20:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8003c22:	797b      	ldrb	r3, [r7, #5]
 8003c24:	4619      	mov	r1, r3
 8003c26:	2020      	movs	r0, #32
 8003c28:	f7ff ff58 	bl	8003adc <lps25hb_write_byte>

	return status;
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000006 	.word	0x20000006

08003c3c <__errno>:
 8003c3c:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <__errno+0x8>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000008 	.word	0x20000008

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4e0d      	ldr	r6, [pc, #52]	; (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1ba4      	subs	r4, r4, r6
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2500      	movs	r5, #0
 8003c54:	42a5      	cmp	r5, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4e0b      	ldr	r6, [pc, #44]	; (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	; (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f001 f876 	bl	8004d4c <_init>
 8003c60:	1ba4      	subs	r4, r4, r6
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2500      	movs	r5, #0
 8003c66:	42a5      	cmp	r5, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c70:	4798      	blx	r3
 8003c72:	3501      	adds	r5, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c7a:	4798      	blx	r3
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08004de0 	.word	0x08004de0
 8003c84:	08004de0 	.word	0x08004de0
 8003c88:	08004de0 	.word	0x08004de0
 8003c8c:	08004de4 	.word	0x08004de4

08003c90 <memset>:
 8003c90:	4402      	add	r2, r0
 8003c92:	4603      	mov	r3, r0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <pow>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	ed2d 8b04 	vpush	{d8-d9}
 8003ca8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003f7c <pow+0x2dc>
 8003cac:	b08d      	sub	sp, #52	; 0x34
 8003cae:	ec57 6b10 	vmov	r6, r7, d0
 8003cb2:	ec55 4b11 	vmov	r4, r5, d1
 8003cb6:	f000 f963 	bl	8003f80 <__ieee754_pow>
 8003cba:	f999 3000 	ldrsb.w	r3, [r9]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8003cc6:	eef0 8a60 	vmov.f32	s17, s1
 8003cca:	46c8      	mov	r8, r9
 8003ccc:	d05f      	beq.n	8003d8e <pow+0xee>
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f7fc fecd 	bl	8000a74 <__aeabi_dcmpun>
 8003cda:	4683      	mov	fp, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d156      	bne.n	8003d8e <pow+0xee>
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f7fc fec4 	bl	8000a74 <__aeabi_dcmpun>
 8003cec:	9001      	str	r0, [sp, #4]
 8003cee:	b1e8      	cbz	r0, 8003d2c <pow+0x8c>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	f7fc fe8a 	bl	8000a10 <__aeabi_dcmpeq>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d046      	beq.n	8003d8e <pow+0xee>
 8003d00:	2301      	movs	r3, #1
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	4b96      	ldr	r3, [pc, #600]	; (8003f60 <pow+0x2c0>)
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	4b96      	ldr	r3, [pc, #600]	; (8003f64 <pow+0x2c4>)
 8003d0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003d0e:	2200      	movs	r2, #0
 8003d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d14:	9b00      	ldr	r3, [sp, #0]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d20:	d033      	beq.n	8003d8a <pow+0xea>
 8003d22:	a802      	add	r0, sp, #8
 8003d24:	f000 fefb 	bl	8004b1e <matherr>
 8003d28:	bb48      	cbnz	r0, 8003d7e <pow+0xde>
 8003d2a:	e05d      	b.n	8003de8 <pow+0x148>
 8003d2c:	f04f 0a00 	mov.w	sl, #0
 8003d30:	f04f 0b00 	mov.w	fp, #0
 8003d34:	4652      	mov	r2, sl
 8003d36:	465b      	mov	r3, fp
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fe68 	bl	8000a10 <__aeabi_dcmpeq>
 8003d40:	ec4b ab19 	vmov	d9, sl, fp
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d054      	beq.n	8003df2 <pow+0x152>
 8003d48:	4652      	mov	r2, sl
 8003d4a:	465b      	mov	r3, fp
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7fc fe5e 	bl	8000a10 <__aeabi_dcmpeq>
 8003d54:	4680      	mov	r8, r0
 8003d56:	b318      	cbz	r0, 8003da0 <pow+0x100>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9302      	str	r3, [sp, #8]
 8003d5c:	4b80      	ldr	r3, [pc, #512]	; (8003f60 <pow+0x2c0>)
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	9b01      	ldr	r3, [sp, #4]
 8003d62:	930a      	str	r3, [sp, #40]	; 0x28
 8003d64:	9b00      	ldr	r3, [sp, #0]
 8003d66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0d5      	beq.n	8003d22 <pow+0x82>
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <pow+0x2c4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d80:	b11b      	cbz	r3, 8003d8a <pow+0xea>
 8003d82:	f7ff ff5b 	bl	8003c3c <__errno>
 8003d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d88:	6003      	str	r3, [r0, #0]
 8003d8a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003d8e:	eeb0 0a48 	vmov.f32	s0, s16
 8003d92:	eef0 0a68 	vmov.f32	s1, s17
 8003d96:	b00d      	add	sp, #52	; 0x34
 8003d98:	ecbd 8b04 	vpop	{d8-d9}
 8003d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da0:	ec45 4b10 	vmov	d0, r4, r5
 8003da4:	f000 feb3 	bl	8004b0e <finite>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d0f0      	beq.n	8003d8e <pow+0xee>
 8003dac:	4652      	mov	r2, sl
 8003dae:	465b      	mov	r3, fp
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	f7fc fe36 	bl	8000a24 <__aeabi_dcmplt>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d0e8      	beq.n	8003d8e <pow+0xee>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <pow+0x2c0>)
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	f999 3000 	ldrsb.w	r3, [r9]
 8003dc8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003dcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003dd4:	b913      	cbnz	r3, 8003ddc <pow+0x13c>
 8003dd6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003dda:	e7a2      	b.n	8003d22 <pow+0x82>
 8003ddc:	4962      	ldr	r1, [pc, #392]	; (8003f68 <pow+0x2c8>)
 8003dde:	2000      	movs	r0, #0
 8003de0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d19c      	bne.n	8003d22 <pow+0x82>
 8003de8:	f7ff ff28 	bl	8003c3c <__errno>
 8003dec:	2321      	movs	r3, #33	; 0x21
 8003dee:	6003      	str	r3, [r0, #0]
 8003df0:	e7c5      	b.n	8003d7e <pow+0xde>
 8003df2:	eeb0 0a48 	vmov.f32	s0, s16
 8003df6:	eef0 0a68 	vmov.f32	s1, s17
 8003dfa:	f000 fe88 	bl	8004b0e <finite>
 8003dfe:	9000      	str	r0, [sp, #0]
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f040 8081 	bne.w	8003f08 <pow+0x268>
 8003e06:	ec47 6b10 	vmov	d0, r6, r7
 8003e0a:	f000 fe80 	bl	8004b0e <finite>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d07a      	beq.n	8003f08 <pow+0x268>
 8003e12:	ec45 4b10 	vmov	d0, r4, r5
 8003e16:	f000 fe7a 	bl	8004b0e <finite>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d074      	beq.n	8003f08 <pow+0x268>
 8003e1e:	ec53 2b18 	vmov	r2, r3, d8
 8003e22:	ee18 0a10 	vmov	r0, s16
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fc fe24 	bl	8000a74 <__aeabi_dcmpun>
 8003e2c:	f999 9000 	ldrsb.w	r9, [r9]
 8003e30:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <pow+0x2c0>)
 8003e32:	b1b0      	cbz	r0, 8003e62 <pow+0x1c2>
 8003e34:	2201      	movs	r2, #1
 8003e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e3a:	9b00      	ldr	r3, [sp, #0]
 8003e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e46:	f1b9 0f00 	cmp.w	r9, #0
 8003e4a:	d0c4      	beq.n	8003dd6 <pow+0x136>
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	465b      	mov	r3, fp
 8003e50:	4650      	mov	r0, sl
 8003e52:	4659      	mov	r1, fp
 8003e54:	f7fc fc9e 	bl	8000794 <__aeabi_ddiv>
 8003e58:	f1b9 0f02 	cmp.w	r9, #2
 8003e5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e60:	e7c1      	b.n	8003de6 <pow+0x146>
 8003e62:	2203      	movs	r2, #3
 8003e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e68:	900a      	str	r0, [sp, #40]	; 0x28
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <pow+0x2cc>)
 8003e72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e7a:	f7fc fb61 	bl	8000540 <__aeabi_dmul>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	f1b9 0f00 	cmp.w	r9, #0
 8003e86:	d124      	bne.n	8003ed2 <pow+0x232>
 8003e88:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <pow+0x2d0>)
 8003e8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e92:	4630      	mov	r0, r6
 8003e94:	4652      	mov	r2, sl
 8003e96:	465b      	mov	r3, fp
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc fdc3 	bl	8000a24 <__aeabi_dcmplt>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d056      	beq.n	8003f50 <pow+0x2b0>
 8003ea2:	ec45 4b10 	vmov	d0, r4, r5
 8003ea6:	f000 fe47 	bl	8004b38 <rint>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	ec51 0b10 	vmov	r0, r1, d0
 8003eb2:	f7fc fdad 	bl	8000a10 <__aeabi_dcmpeq>
 8003eb6:	b920      	cbnz	r0, 8003ec2 <pow+0x222>
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <pow+0x2d4>)
 8003eba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ebe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ec2:	f998 3000 	ldrsb.w	r3, [r8]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d142      	bne.n	8003f50 <pow+0x2b0>
 8003eca:	f7ff feb7 	bl	8003c3c <__errno>
 8003ece:	2322      	movs	r3, #34	; 0x22
 8003ed0:	e78d      	b.n	8003dee <pow+0x14e>
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <pow+0x2d8>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003eda:	4630      	mov	r0, r6
 8003edc:	4652      	mov	r2, sl
 8003ede:	465b      	mov	r3, fp
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	f7fc fd9f 	bl	8000a24 <__aeabi_dcmplt>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d0eb      	beq.n	8003ec2 <pow+0x222>
 8003eea:	ec45 4b10 	vmov	d0, r4, r5
 8003eee:	f000 fe23 	bl	8004b38 <rint>
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	ec51 0b10 	vmov	r0, r1, d0
 8003efa:	f7fc fd89 	bl	8000a10 <__aeabi_dcmpeq>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d1df      	bne.n	8003ec2 <pow+0x222>
 8003f02:	2200      	movs	r2, #0
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <pow+0x2c8>)
 8003f06:	e7da      	b.n	8003ebe <pow+0x21e>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	ec51 0b18 	vmov	r0, r1, d8
 8003f10:	f7fc fd7e 	bl	8000a10 <__aeabi_dcmpeq>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f43f af3a 	beq.w	8003d8e <pow+0xee>
 8003f1a:	ec47 6b10 	vmov	d0, r6, r7
 8003f1e:	f000 fdf6 	bl	8004b0e <finite>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f43f af33 	beq.w	8003d8e <pow+0xee>
 8003f28:	ec45 4b10 	vmov	d0, r4, r5
 8003f2c:	f000 fdef 	bl	8004b0e <finite>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f43f af2c 	beq.w	8003d8e <pow+0xee>
 8003f36:	2304      	movs	r3, #4
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <pow+0x2c0>)
 8003f3c:	9303      	str	r3, [sp, #12]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	930a      	str	r3, [sp, #40]	; 0x28
 8003f42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f4a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8003f4e:	e7b8      	b.n	8003ec2 <pow+0x222>
 8003f50:	a802      	add	r0, sp, #8
 8003f52:	f000 fde4 	bl	8004b1e <matherr>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f47f af11 	bne.w	8003d7e <pow+0xde>
 8003f5c:	e7b5      	b.n	8003eca <pow+0x22a>
 8003f5e:	bf00      	nop
 8003f60:	08004d95 	.word	0x08004d95
 8003f64:	3ff00000 	.word	0x3ff00000
 8003f68:	fff00000 	.word	0xfff00000
 8003f6c:	3fe00000 	.word	0x3fe00000
 8003f70:	47efffff 	.word	0x47efffff
 8003f74:	c7efffff 	.word	0xc7efffff
 8003f78:	7ff00000 	.word	0x7ff00000
 8003f7c:	2000006c 	.word	0x2000006c

08003f80 <__ieee754_pow>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	b091      	sub	sp, #68	; 0x44
 8003f86:	ed8d 1b00 	vstr	d1, [sp]
 8003f8a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003f8e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003f92:	ea58 0302 	orrs.w	r3, r8, r2
 8003f96:	ec57 6b10 	vmov	r6, r7, d0
 8003f9a:	f000 84be 	beq.w	800491a <__ieee754_pow+0x99a>
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <__ieee754_pow+0x208>)
 8003fa0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	463d      	mov	r5, r7
 8003fa8:	ee10 aa10 	vmov	sl, s0
 8003fac:	dc09      	bgt.n	8003fc2 <__ieee754_pow+0x42>
 8003fae:	d103      	bne.n	8003fb8 <__ieee754_pow+0x38>
 8003fb0:	b93e      	cbnz	r6, 8003fc2 <__ieee754_pow+0x42>
 8003fb2:	45a0      	cmp	r8, r4
 8003fb4:	dc0d      	bgt.n	8003fd2 <__ieee754_pow+0x52>
 8003fb6:	e001      	b.n	8003fbc <__ieee754_pow+0x3c>
 8003fb8:	4598      	cmp	r8, r3
 8003fba:	dc02      	bgt.n	8003fc2 <__ieee754_pow+0x42>
 8003fbc:	4598      	cmp	r8, r3
 8003fbe:	d10e      	bne.n	8003fde <__ieee754_pow+0x5e>
 8003fc0:	b16a      	cbz	r2, 8003fde <__ieee754_pow+0x5e>
 8003fc2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003fc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003fca:	ea54 030a 	orrs.w	r3, r4, sl
 8003fce:	f000 84a4 	beq.w	800491a <__ieee754_pow+0x99a>
 8003fd2:	486e      	ldr	r0, [pc, #440]	; (800418c <__ieee754_pow+0x20c>)
 8003fd4:	b011      	add	sp, #68	; 0x44
 8003fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	f000 bda5 	b.w	8004b28 <nan>
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	da53      	bge.n	800408a <__ieee754_pow+0x10a>
 8003fe2:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <__ieee754_pow+0x210>)
 8003fe4:	4598      	cmp	r8, r3
 8003fe6:	dc4d      	bgt.n	8004084 <__ieee754_pow+0x104>
 8003fe8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003fec:	4598      	cmp	r8, r3
 8003fee:	dd4c      	ble.n	800408a <__ieee754_pow+0x10a>
 8003ff0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003ff4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ff8:	2b14      	cmp	r3, #20
 8003ffa:	dd26      	ble.n	800404a <__ieee754_pow+0xca>
 8003ffc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004000:	fa22 f103 	lsr.w	r1, r2, r3
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	4293      	cmp	r3, r2
 800400a:	d13e      	bne.n	800408a <__ieee754_pow+0x10a>
 800400c:	f001 0101 	and.w	r1, r1, #1
 8004010:	f1c1 0b02 	rsb	fp, r1, #2
 8004014:	2a00      	cmp	r2, #0
 8004016:	d15b      	bne.n	80040d0 <__ieee754_pow+0x150>
 8004018:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <__ieee754_pow+0x208>)
 800401a:	4598      	cmp	r8, r3
 800401c:	d124      	bne.n	8004068 <__ieee754_pow+0xe8>
 800401e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004022:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004026:	ea53 030a 	orrs.w	r3, r3, sl
 800402a:	f000 8476 	beq.w	800491a <__ieee754_pow+0x99a>
 800402e:	4b59      	ldr	r3, [pc, #356]	; (8004194 <__ieee754_pow+0x214>)
 8004030:	429c      	cmp	r4, r3
 8004032:	dd2d      	ble.n	8004090 <__ieee754_pow+0x110>
 8004034:	f1b9 0f00 	cmp.w	r9, #0
 8004038:	f280 8473 	bge.w	8004922 <__ieee754_pow+0x9a2>
 800403c:	2000      	movs	r0, #0
 800403e:	2100      	movs	r1, #0
 8004040:	ec41 0b10 	vmov	d0, r0, r1
 8004044:	b011      	add	sp, #68	; 0x44
 8004046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404a:	2a00      	cmp	r2, #0
 800404c:	d13e      	bne.n	80040cc <__ieee754_pow+0x14c>
 800404e:	f1c3 0314 	rsb	r3, r3, #20
 8004052:	fa48 f103 	asr.w	r1, r8, r3
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	4543      	cmp	r3, r8
 800405c:	f040 8469 	bne.w	8004932 <__ieee754_pow+0x9b2>
 8004060:	f001 0101 	and.w	r1, r1, #1
 8004064:	f1c1 0b02 	rsb	fp, r1, #2
 8004068:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <__ieee754_pow+0x218>)
 800406a:	4598      	cmp	r8, r3
 800406c:	d118      	bne.n	80040a0 <__ieee754_pow+0x120>
 800406e:	f1b9 0f00 	cmp.w	r9, #0
 8004072:	f280 845a 	bge.w	800492a <__ieee754_pow+0x9aa>
 8004076:	4948      	ldr	r1, [pc, #288]	; (8004198 <__ieee754_pow+0x218>)
 8004078:	4632      	mov	r2, r6
 800407a:	463b      	mov	r3, r7
 800407c:	2000      	movs	r0, #0
 800407e:	f7fc fb89 	bl	8000794 <__aeabi_ddiv>
 8004082:	e7dd      	b.n	8004040 <__ieee754_pow+0xc0>
 8004084:	f04f 0b02 	mov.w	fp, #2
 8004088:	e7c4      	b.n	8004014 <__ieee754_pow+0x94>
 800408a:	f04f 0b00 	mov.w	fp, #0
 800408e:	e7c1      	b.n	8004014 <__ieee754_pow+0x94>
 8004090:	f1b9 0f00 	cmp.w	r9, #0
 8004094:	dad2      	bge.n	800403c <__ieee754_pow+0xbc>
 8004096:	e9dd 0300 	ldrd	r0, r3, [sp]
 800409a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800409e:	e7cf      	b.n	8004040 <__ieee754_pow+0xc0>
 80040a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80040a4:	d106      	bne.n	80040b4 <__ieee754_pow+0x134>
 80040a6:	4632      	mov	r2, r6
 80040a8:	463b      	mov	r3, r7
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fc fa47 	bl	8000540 <__aeabi_dmul>
 80040b2:	e7c5      	b.n	8004040 <__ieee754_pow+0xc0>
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <__ieee754_pow+0x21c>)
 80040b6:	4599      	cmp	r9, r3
 80040b8:	d10a      	bne.n	80040d0 <__ieee754_pow+0x150>
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	db08      	blt.n	80040d0 <__ieee754_pow+0x150>
 80040be:	ec47 6b10 	vmov	d0, r6, r7
 80040c2:	b011      	add	sp, #68	; 0x44
 80040c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	f000 bc68 	b.w	800499c <__ieee754_sqrt>
 80040cc:	f04f 0b00 	mov.w	fp, #0
 80040d0:	ec47 6b10 	vmov	d0, r6, r7
 80040d4:	f000 fd12 	bl	8004afc <fabs>
 80040d8:	ec51 0b10 	vmov	r0, r1, d0
 80040dc:	f1ba 0f00 	cmp.w	sl, #0
 80040e0:	d127      	bne.n	8004132 <__ieee754_pow+0x1b2>
 80040e2:	b124      	cbz	r4, 80040ee <__ieee754_pow+0x16e>
 80040e4:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <__ieee754_pow+0x218>)
 80040e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d121      	bne.n	8004132 <__ieee754_pow+0x1b2>
 80040ee:	f1b9 0f00 	cmp.w	r9, #0
 80040f2:	da05      	bge.n	8004100 <__ieee754_pow+0x180>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	2000      	movs	r0, #0
 80040fa:	4927      	ldr	r1, [pc, #156]	; (8004198 <__ieee754_pow+0x218>)
 80040fc:	f7fc fb4a 	bl	8000794 <__aeabi_ddiv>
 8004100:	2d00      	cmp	r5, #0
 8004102:	da9d      	bge.n	8004040 <__ieee754_pow+0xc0>
 8004104:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004108:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800410c:	ea54 030b 	orrs.w	r3, r4, fp
 8004110:	d108      	bne.n	8004124 <__ieee754_pow+0x1a4>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	f7fc f859 	bl	80001d0 <__aeabi_dsub>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e7ac      	b.n	800407e <__ieee754_pow+0xfe>
 8004124:	f1bb 0f01 	cmp.w	fp, #1
 8004128:	d18a      	bne.n	8004040 <__ieee754_pow+0xc0>
 800412a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800412e:	4619      	mov	r1, r3
 8004130:	e786      	b.n	8004040 <__ieee754_pow+0xc0>
 8004132:	0fed      	lsrs	r5, r5, #31
 8004134:	1e6b      	subs	r3, r5, #1
 8004136:	930d      	str	r3, [sp, #52]	; 0x34
 8004138:	ea5b 0303 	orrs.w	r3, fp, r3
 800413c:	d102      	bne.n	8004144 <__ieee754_pow+0x1c4>
 800413e:	4632      	mov	r2, r6
 8004140:	463b      	mov	r3, r7
 8004142:	e7e8      	b.n	8004116 <__ieee754_pow+0x196>
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <__ieee754_pow+0x220>)
 8004146:	4598      	cmp	r8, r3
 8004148:	f340 80fe 	ble.w	8004348 <__ieee754_pow+0x3c8>
 800414c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004150:	4598      	cmp	r8, r3
 8004152:	dd0a      	ble.n	800416a <__ieee754_pow+0x1ea>
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <__ieee754_pow+0x214>)
 8004156:	429c      	cmp	r4, r3
 8004158:	dc0d      	bgt.n	8004176 <__ieee754_pow+0x1f6>
 800415a:	f1b9 0f00 	cmp.w	r9, #0
 800415e:	f6bf af6d 	bge.w	800403c <__ieee754_pow+0xbc>
 8004162:	a307      	add	r3, pc, #28	; (adr r3, 8004180 <__ieee754_pow+0x200>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	e79f      	b.n	80040aa <__ieee754_pow+0x12a>
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <__ieee754_pow+0x224>)
 800416c:	429c      	cmp	r4, r3
 800416e:	ddf4      	ble.n	800415a <__ieee754_pow+0x1da>
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <__ieee754_pow+0x218>)
 8004172:	429c      	cmp	r4, r3
 8004174:	dd18      	ble.n	80041a8 <__ieee754_pow+0x228>
 8004176:	f1b9 0f00 	cmp.w	r9, #0
 800417a:	dcf2      	bgt.n	8004162 <__ieee754_pow+0x1e2>
 800417c:	e75e      	b.n	800403c <__ieee754_pow+0xbc>
 800417e:	bf00      	nop
 8004180:	8800759c 	.word	0x8800759c
 8004184:	7e37e43c 	.word	0x7e37e43c
 8004188:	7ff00000 	.word	0x7ff00000
 800418c:	08004d98 	.word	0x08004d98
 8004190:	433fffff 	.word	0x433fffff
 8004194:	3fefffff 	.word	0x3fefffff
 8004198:	3ff00000 	.word	0x3ff00000
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	41e00000 	.word	0x41e00000
 80041a4:	3feffffe 	.word	0x3feffffe
 80041a8:	2200      	movs	r2, #0
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <__ieee754_pow+0x3b8>)
 80041ac:	f7fc f810 	bl	80001d0 <__aeabi_dsub>
 80041b0:	a355      	add	r3, pc, #340	; (adr r3, 8004308 <__ieee754_pow+0x388>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	4604      	mov	r4, r0
 80041b8:	460d      	mov	r5, r1
 80041ba:	f7fc f9c1 	bl	8000540 <__aeabi_dmul>
 80041be:	a354      	add	r3, pc, #336	; (adr r3, 8004310 <__ieee754_pow+0x390>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	4606      	mov	r6, r0
 80041c6:	460f      	mov	r7, r1
 80041c8:	4620      	mov	r0, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	f7fc f9b8 	bl	8000540 <__aeabi_dmul>
 80041d0:	2200      	movs	r2, #0
 80041d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041d6:	4b59      	ldr	r3, [pc, #356]	; (800433c <__ieee754_pow+0x3bc>)
 80041d8:	4620      	mov	r0, r4
 80041da:	4629      	mov	r1, r5
 80041dc:	f7fc f9b0 	bl	8000540 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	a14c      	add	r1, pc, #304	; (adr r1, 8004318 <__ieee754_pow+0x398>)
 80041e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041ea:	f7fb fff1 	bl	80001d0 <__aeabi_dsub>
 80041ee:	4622      	mov	r2, r4
 80041f0:	462b      	mov	r3, r5
 80041f2:	f7fc f9a5 	bl	8000540 <__aeabi_dmul>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	2000      	movs	r0, #0
 80041fc:	4950      	ldr	r1, [pc, #320]	; (8004340 <__ieee754_pow+0x3c0>)
 80041fe:	f7fb ffe7 	bl	80001d0 <__aeabi_dsub>
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	4680      	mov	r8, r0
 8004208:	4689      	mov	r9, r1
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fc f997 	bl	8000540 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f7fc f991 	bl	8000540 <__aeabi_dmul>
 800421e:	a340      	add	r3, pc, #256	; (adr r3, 8004320 <__ieee754_pow+0x3a0>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fc f98c 	bl	8000540 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004230:	f7fb ffce 	bl	80001d0 <__aeabi_dsub>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fb ffc8 	bl	80001d4 <__adddf3>
 8004244:	2000      	movs	r0, #0
 8004246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800424a:	4632      	mov	r2, r6
 800424c:	463b      	mov	r3, r7
 800424e:	f7fb ffbf 	bl	80001d0 <__aeabi_dsub>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f7fb ffb9 	bl	80001d0 <__aeabi_dsub>
 800425e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004260:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004264:	4313      	orrs	r3, r2
 8004266:	4606      	mov	r6, r0
 8004268:	460f      	mov	r7, r1
 800426a:	f040 81eb 	bne.w	8004644 <__ieee754_pow+0x6c4>
 800426e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004328 <__ieee754_pow+0x3a8>
 8004272:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004276:	2400      	movs	r4, #0
 8004278:	4622      	mov	r2, r4
 800427a:	462b      	mov	r3, r5
 800427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004284:	f7fb ffa4 	bl	80001d0 <__aeabi_dsub>
 8004288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800428c:	f7fc f958 	bl	8000540 <__aeabi_dmul>
 8004290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004294:	4680      	mov	r8, r0
 8004296:	4689      	mov	r9, r1
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc f950 	bl	8000540 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4640      	mov	r0, r8
 80042a6:	4649      	mov	r1, r9
 80042a8:	f7fb ff94 	bl	80001d4 <__adddf3>
 80042ac:	4622      	mov	r2, r4
 80042ae:	462b      	mov	r3, r5
 80042b0:	4680      	mov	r8, r0
 80042b2:	4689      	mov	r9, r1
 80042b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042b8:	f7fc f942 	bl	8000540 <__aeabi_dmul>
 80042bc:	460b      	mov	r3, r1
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	4602      	mov	r2, r0
 80042c4:	4649      	mov	r1, r9
 80042c6:	4640      	mov	r0, r8
 80042c8:	e9cd 4500 	strd	r4, r5, [sp]
 80042cc:	f7fb ff82 	bl	80001d4 <__adddf3>
 80042d0:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <__ieee754_pow+0x3c4>)
 80042d2:	4299      	cmp	r1, r3
 80042d4:	4606      	mov	r6, r0
 80042d6:	460f      	mov	r7, r1
 80042d8:	468b      	mov	fp, r1
 80042da:	f340 82f7 	ble.w	80048cc <__ieee754_pow+0x94c>
 80042de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80042e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80042e6:	4303      	orrs	r3, r0
 80042e8:	f000 81ea 	beq.w	80046c0 <__ieee754_pow+0x740>
 80042ec:	a310      	add	r3, pc, #64	; (adr r3, 8004330 <__ieee754_pow+0x3b0>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042f6:	f7fc f923 	bl	8000540 <__aeabi_dmul>
 80042fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004330 <__ieee754_pow+0x3b0>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	e6d5      	b.n	80040ae <__ieee754_pow+0x12e>
 8004302:	bf00      	nop
 8004304:	f3af 8000 	nop.w
 8004308:	60000000 	.word	0x60000000
 800430c:	3ff71547 	.word	0x3ff71547
 8004310:	f85ddf44 	.word	0xf85ddf44
 8004314:	3e54ae0b 	.word	0x3e54ae0b
 8004318:	55555555 	.word	0x55555555
 800431c:	3fd55555 	.word	0x3fd55555
 8004320:	652b82fe 	.word	0x652b82fe
 8004324:	3ff71547 	.word	0x3ff71547
 8004328:	00000000 	.word	0x00000000
 800432c:	bff00000 	.word	0xbff00000
 8004330:	8800759c 	.word	0x8800759c
 8004334:	7e37e43c 	.word	0x7e37e43c
 8004338:	3ff00000 	.word	0x3ff00000
 800433c:	3fd00000 	.word	0x3fd00000
 8004340:	3fe00000 	.word	0x3fe00000
 8004344:	408fffff 	.word	0x408fffff
 8004348:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	da05      	bge.n	800435e <__ieee754_pow+0x3de>
 8004352:	4bd3      	ldr	r3, [pc, #844]	; (80046a0 <__ieee754_pow+0x720>)
 8004354:	f7fc f8f4 	bl	8000540 <__aeabi_dmul>
 8004358:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800435c:	460c      	mov	r4, r1
 800435e:	1523      	asrs	r3, r4, #20
 8004360:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004364:	4413      	add	r3, r2
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	4bce      	ldr	r3, [pc, #824]	; (80046a4 <__ieee754_pow+0x724>)
 800436a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800436e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004372:	429c      	cmp	r4, r3
 8004374:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004378:	dd08      	ble.n	800438c <__ieee754_pow+0x40c>
 800437a:	4bcb      	ldr	r3, [pc, #812]	; (80046a8 <__ieee754_pow+0x728>)
 800437c:	429c      	cmp	r4, r3
 800437e:	f340 815e 	ble.w	800463e <__ieee754_pow+0x6be>
 8004382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004384:	3301      	adds	r3, #1
 8004386:	9309      	str	r3, [sp, #36]	; 0x24
 8004388:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800438c:	f04f 0a00 	mov.w	sl, #0
 8004390:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004394:	930c      	str	r3, [sp, #48]	; 0x30
 8004396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004398:	4bc4      	ldr	r3, [pc, #784]	; (80046ac <__ieee754_pow+0x72c>)
 800439a:	4413      	add	r3, r2
 800439c:	ed93 7b00 	vldr	d7, [r3]
 80043a0:	4629      	mov	r1, r5
 80043a2:	ec53 2b17 	vmov	r2, r3, d7
 80043a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80043aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043ae:	f7fb ff0f 	bl	80001d0 <__aeabi_dsub>
 80043b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043b6:	4606      	mov	r6, r0
 80043b8:	460f      	mov	r7, r1
 80043ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043be:	f7fb ff09 	bl	80001d4 <__adddf3>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	2000      	movs	r0, #0
 80043c8:	49b9      	ldr	r1, [pc, #740]	; (80046b0 <__ieee754_pow+0x730>)
 80043ca:	f7fc f9e3 	bl	8000794 <__aeabi_ddiv>
 80043ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4630      	mov	r0, r6
 80043d8:	4639      	mov	r1, r7
 80043da:	f7fc f8b1 	bl	8000540 <__aeabi_dmul>
 80043de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9302      	str	r3, [sp, #8]
 80043ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80043f2:	106d      	asrs	r5, r5, #1
 80043f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80043f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80043fc:	2200      	movs	r2, #0
 80043fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004402:	4640      	mov	r0, r8
 8004404:	4649      	mov	r1, r9
 8004406:	4614      	mov	r4, r2
 8004408:	461d      	mov	r5, r3
 800440a:	f7fc f899 	bl	8000540 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4630      	mov	r0, r6
 8004414:	4639      	mov	r1, r7
 8004416:	f7fb fedb 	bl	80001d0 <__aeabi_dsub>
 800441a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800441e:	4606      	mov	r6, r0
 8004420:	460f      	mov	r7, r1
 8004422:	4620      	mov	r0, r4
 8004424:	4629      	mov	r1, r5
 8004426:	f7fb fed3 	bl	80001d0 <__aeabi_dsub>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004432:	f7fb fecd 	bl	80001d0 <__aeabi_dsub>
 8004436:	4642      	mov	r2, r8
 8004438:	464b      	mov	r3, r9
 800443a:	f7fc f881 	bl	8000540 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4630      	mov	r0, r6
 8004444:	4639      	mov	r1, r7
 8004446:	f7fb fec3 	bl	80001d0 <__aeabi_dsub>
 800444a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800444e:	f7fc f877 	bl	8000540 <__aeabi_dmul>
 8004452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f7fc f86f 	bl	8000540 <__aeabi_dmul>
 8004462:	a37b      	add	r3, pc, #492	; (adr r3, 8004650 <__ieee754_pow+0x6d0>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	4604      	mov	r4, r0
 800446a:	460d      	mov	r5, r1
 800446c:	f7fc f868 	bl	8000540 <__aeabi_dmul>
 8004470:	a379      	add	r3, pc, #484	; (adr r3, 8004658 <__ieee754_pow+0x6d8>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fb fead 	bl	80001d4 <__adddf3>
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	f7fc f85f 	bl	8000540 <__aeabi_dmul>
 8004482:	a377      	add	r3, pc, #476	; (adr r3, 8004660 <__ieee754_pow+0x6e0>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fb fea4 	bl	80001d4 <__adddf3>
 800448c:	4622      	mov	r2, r4
 800448e:	462b      	mov	r3, r5
 8004490:	f7fc f856 	bl	8000540 <__aeabi_dmul>
 8004494:	a374      	add	r3, pc, #464	; (adr r3, 8004668 <__ieee754_pow+0x6e8>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fb fe9b 	bl	80001d4 <__adddf3>
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f7fc f84d 	bl	8000540 <__aeabi_dmul>
 80044a6:	a372      	add	r3, pc, #456	; (adr r3, 8004670 <__ieee754_pow+0x6f0>)
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f7fb fe92 	bl	80001d4 <__adddf3>
 80044b0:	4622      	mov	r2, r4
 80044b2:	462b      	mov	r3, r5
 80044b4:	f7fc f844 	bl	8000540 <__aeabi_dmul>
 80044b8:	a36f      	add	r3, pc, #444	; (adr r3, 8004678 <__ieee754_pow+0x6f8>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fb fe89 	bl	80001d4 <__adddf3>
 80044c2:	4622      	mov	r2, r4
 80044c4:	4606      	mov	r6, r0
 80044c6:	460f      	mov	r7, r1
 80044c8:	462b      	mov	r3, r5
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fc f837 	bl	8000540 <__aeabi_dmul>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4630      	mov	r0, r6
 80044d8:	4639      	mov	r1, r7
 80044da:	f7fc f831 	bl	8000540 <__aeabi_dmul>
 80044de:	4642      	mov	r2, r8
 80044e0:	4604      	mov	r4, r0
 80044e2:	460d      	mov	r5, r1
 80044e4:	464b      	mov	r3, r9
 80044e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ea:	f7fb fe73 	bl	80001d4 <__adddf3>
 80044ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044f2:	f7fc f825 	bl	8000540 <__aeabi_dmul>
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f7fb fe6b 	bl	80001d4 <__adddf3>
 80044fe:	4642      	mov	r2, r8
 8004500:	4606      	mov	r6, r0
 8004502:	460f      	mov	r7, r1
 8004504:	464b      	mov	r3, r9
 8004506:	4640      	mov	r0, r8
 8004508:	4649      	mov	r1, r9
 800450a:	f7fc f819 	bl	8000540 <__aeabi_dmul>
 800450e:	2200      	movs	r2, #0
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <__ieee754_pow+0x734>)
 8004512:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004516:	f7fb fe5d 	bl	80001d4 <__adddf3>
 800451a:	4632      	mov	r2, r6
 800451c:	463b      	mov	r3, r7
 800451e:	f7fb fe59 	bl	80001d4 <__adddf3>
 8004522:	9802      	ldr	r0, [sp, #8]
 8004524:	460d      	mov	r5, r1
 8004526:	4604      	mov	r4, r0
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4640      	mov	r0, r8
 800452e:	4649      	mov	r1, r9
 8004530:	f7fc f806 	bl	8000540 <__aeabi_dmul>
 8004534:	2200      	movs	r2, #0
 8004536:	4680      	mov	r8, r0
 8004538:	4689      	mov	r9, r1
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <__ieee754_pow+0x734>)
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fb fe46 	bl	80001d0 <__aeabi_dsub>
 8004544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004548:	f7fb fe42 	bl	80001d0 <__aeabi_dsub>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4630      	mov	r0, r6
 8004552:	4639      	mov	r1, r7
 8004554:	f7fb fe3c 	bl	80001d0 <__aeabi_dsub>
 8004558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800455c:	f7fb fff0 	bl	8000540 <__aeabi_dmul>
 8004560:	4622      	mov	r2, r4
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	462b      	mov	r3, r5
 8004568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800456c:	f7fb ffe8 	bl	8000540 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4630      	mov	r0, r6
 8004576:	4639      	mov	r1, r7
 8004578:	f7fb fe2c 	bl	80001d4 <__adddf3>
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fb fe24 	bl	80001d4 <__adddf3>
 800458c:	9802      	ldr	r0, [sp, #8]
 800458e:	a33c      	add	r3, pc, #240	; (adr r3, 8004680 <__ieee754_pow+0x700>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	4604      	mov	r4, r0
 8004596:	460d      	mov	r5, r1
 8004598:	f7fb ffd2 	bl	8000540 <__aeabi_dmul>
 800459c:	4642      	mov	r2, r8
 800459e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045a2:	464b      	mov	r3, r9
 80045a4:	4620      	mov	r0, r4
 80045a6:	4629      	mov	r1, r5
 80045a8:	f7fb fe12 	bl	80001d0 <__aeabi_dsub>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4630      	mov	r0, r6
 80045b2:	4639      	mov	r1, r7
 80045b4:	f7fb fe0c 	bl	80001d0 <__aeabi_dsub>
 80045b8:	a333      	add	r3, pc, #204	; (adr r3, 8004688 <__ieee754_pow+0x708>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fb ffbf 	bl	8000540 <__aeabi_dmul>
 80045c2:	a333      	add	r3, pc, #204	; (adr r3, 8004690 <__ieee754_pow+0x710>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	4606      	mov	r6, r0
 80045ca:	460f      	mov	r7, r1
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fb ffb6 	bl	8000540 <__aeabi_dmul>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4630      	mov	r0, r6
 80045da:	4639      	mov	r1, r7
 80045dc:	f7fb fdfa 	bl	80001d4 <__adddf3>
 80045e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045e2:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <__ieee754_pow+0x738>)
 80045e4:	4413      	add	r3, r2
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fb fdf3 	bl	80001d4 <__adddf3>
 80045ee:	4604      	mov	r4, r0
 80045f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f2:	460d      	mov	r5, r1
 80045f4:	f7fb ff3a 	bl	800046c <__aeabi_i2d>
 80045f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <__ieee754_pow+0x73c>)
 80045fc:	4413      	add	r3, r2
 80045fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004602:	4606      	mov	r6, r0
 8004604:	460f      	mov	r7, r1
 8004606:	4622      	mov	r2, r4
 8004608:	462b      	mov	r3, r5
 800460a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800460e:	f7fb fde1 	bl	80001d4 <__adddf3>
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	f7fb fddd 	bl	80001d4 <__adddf3>
 800461a:	4632      	mov	r2, r6
 800461c:	463b      	mov	r3, r7
 800461e:	f7fb fdd9 	bl	80001d4 <__adddf3>
 8004622:	9802      	ldr	r0, [sp, #8]
 8004624:	4632      	mov	r2, r6
 8004626:	463b      	mov	r3, r7
 8004628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800462c:	f7fb fdd0 	bl	80001d0 <__aeabi_dsub>
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	f7fb fdcc 	bl	80001d0 <__aeabi_dsub>
 8004638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800463c:	e607      	b.n	800424e <__ieee754_pow+0x2ce>
 800463e:	f04f 0a01 	mov.w	sl, #1
 8004642:	e6a5      	b.n	8004390 <__ieee754_pow+0x410>
 8004644:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004698 <__ieee754_pow+0x718>
 8004648:	e613      	b.n	8004272 <__ieee754_pow+0x2f2>
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
 8004650:	4a454eef 	.word	0x4a454eef
 8004654:	3fca7e28 	.word	0x3fca7e28
 8004658:	93c9db65 	.word	0x93c9db65
 800465c:	3fcd864a 	.word	0x3fcd864a
 8004660:	a91d4101 	.word	0xa91d4101
 8004664:	3fd17460 	.word	0x3fd17460
 8004668:	518f264d 	.word	0x518f264d
 800466c:	3fd55555 	.word	0x3fd55555
 8004670:	db6fabff 	.word	0xdb6fabff
 8004674:	3fdb6db6 	.word	0x3fdb6db6
 8004678:	33333303 	.word	0x33333303
 800467c:	3fe33333 	.word	0x3fe33333
 8004680:	e0000000 	.word	0xe0000000
 8004684:	3feec709 	.word	0x3feec709
 8004688:	dc3a03fd 	.word	0xdc3a03fd
 800468c:	3feec709 	.word	0x3feec709
 8004690:	145b01f5 	.word	0x145b01f5
 8004694:	be3e2fe0 	.word	0xbe3e2fe0
 8004698:	00000000 	.word	0x00000000
 800469c:	3ff00000 	.word	0x3ff00000
 80046a0:	43400000 	.word	0x43400000
 80046a4:	0003988e 	.word	0x0003988e
 80046a8:	000bb679 	.word	0x000bb679
 80046ac:	08004da0 	.word	0x08004da0
 80046b0:	3ff00000 	.word	0x3ff00000
 80046b4:	40080000 	.word	0x40080000
 80046b8:	08004dc0 	.word	0x08004dc0
 80046bc:	08004db0 	.word	0x08004db0
 80046c0:	a3b4      	add	r3, pc, #720	; (adr r3, 8004994 <__ieee754_pow+0xa14>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	4640      	mov	r0, r8
 80046c8:	4649      	mov	r1, r9
 80046ca:	f7fb fd83 	bl	80001d4 <__adddf3>
 80046ce:	4622      	mov	r2, r4
 80046d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d4:	462b      	mov	r3, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	4639      	mov	r1, r7
 80046da:	f7fb fd79 	bl	80001d0 <__aeabi_dsub>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046e6:	f7fc f9bb 	bl	8000a60 <__aeabi_dcmpgt>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f47f adfe 	bne.w	80042ec <__ieee754_pow+0x36c>
 80046f0:	4aa3      	ldr	r2, [pc, #652]	; (8004980 <__ieee754_pow+0xa00>)
 80046f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80046f6:	4293      	cmp	r3, r2
 80046f8:	f340 810a 	ble.w	8004910 <__ieee754_pow+0x990>
 80046fc:	151b      	asrs	r3, r3, #20
 80046fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004702:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004706:	fa4a f303 	asr.w	r3, sl, r3
 800470a:	445b      	add	r3, fp
 800470c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004710:	4e9c      	ldr	r6, [pc, #624]	; (8004984 <__ieee754_pow+0xa04>)
 8004712:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004716:	4116      	asrs	r6, r2
 8004718:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800471c:	2000      	movs	r0, #0
 800471e:	ea23 0106 	bic.w	r1, r3, r6
 8004722:	f1c2 0214 	rsb	r2, r2, #20
 8004726:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800472a:	fa4a fa02 	asr.w	sl, sl, r2
 800472e:	f1bb 0f00 	cmp.w	fp, #0
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	bfb8      	it	lt
 800473c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004740:	f7fb fd46 	bl	80001d0 <__aeabi_dsub>
 8004744:	e9cd 0100 	strd	r0, r1, [sp]
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004750:	f7fb fd40 	bl	80001d4 <__adddf3>
 8004754:	2000      	movs	r0, #0
 8004756:	a378      	add	r3, pc, #480	; (adr r3, 8004938 <__ieee754_pow+0x9b8>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	f7fb feee 	bl	8000540 <__aeabi_dmul>
 8004764:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004768:	4606      	mov	r6, r0
 800476a:	460f      	mov	r7, r1
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fd2e 	bl	80001d0 <__aeabi_dsub>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4640      	mov	r0, r8
 800477a:	4649      	mov	r1, r9
 800477c:	f7fb fd28 	bl	80001d0 <__aeabi_dsub>
 8004780:	a36f      	add	r3, pc, #444	; (adr r3, 8004940 <__ieee754_pow+0x9c0>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fedb 	bl	8000540 <__aeabi_dmul>
 800478a:	a36f      	add	r3, pc, #444	; (adr r3, 8004948 <__ieee754_pow+0x9c8>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	4680      	mov	r8, r0
 8004792:	4689      	mov	r9, r1
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fb fed2 	bl	8000540 <__aeabi_dmul>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4640      	mov	r0, r8
 80047a2:	4649      	mov	r1, r9
 80047a4:	f7fb fd16 	bl	80001d4 <__adddf3>
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fb fd0e 	bl	80001d4 <__adddf3>
 80047b8:	4632      	mov	r2, r6
 80047ba:	463b      	mov	r3, r7
 80047bc:	4680      	mov	r8, r0
 80047be:	4689      	mov	r9, r1
 80047c0:	f7fb fd06 	bl	80001d0 <__aeabi_dsub>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4620      	mov	r0, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	f7fb fd00 	bl	80001d0 <__aeabi_dsub>
 80047d0:	4642      	mov	r2, r8
 80047d2:	4606      	mov	r6, r0
 80047d4:	460f      	mov	r7, r1
 80047d6:	464b      	mov	r3, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	f7fb feb0 	bl	8000540 <__aeabi_dmul>
 80047e0:	a35b      	add	r3, pc, #364	; (adr r3, 8004950 <__ieee754_pow+0x9d0>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	4604      	mov	r4, r0
 80047e8:	460d      	mov	r5, r1
 80047ea:	f7fb fea9 	bl	8000540 <__aeabi_dmul>
 80047ee:	a35a      	add	r3, pc, #360	; (adr r3, 8004958 <__ieee754_pow+0x9d8>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fb fcec 	bl	80001d0 <__aeabi_dsub>
 80047f8:	4622      	mov	r2, r4
 80047fa:	462b      	mov	r3, r5
 80047fc:	f7fb fea0 	bl	8000540 <__aeabi_dmul>
 8004800:	a357      	add	r3, pc, #348	; (adr r3, 8004960 <__ieee754_pow+0x9e0>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb fce5 	bl	80001d4 <__adddf3>
 800480a:	4622      	mov	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f7fb fe97 	bl	8000540 <__aeabi_dmul>
 8004812:	a355      	add	r3, pc, #340	; (adr r3, 8004968 <__ieee754_pow+0x9e8>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fcda 	bl	80001d0 <__aeabi_dsub>
 800481c:	4622      	mov	r2, r4
 800481e:	462b      	mov	r3, r5
 8004820:	f7fb fe8e 	bl	8000540 <__aeabi_dmul>
 8004824:	a352      	add	r3, pc, #328	; (adr r3, 8004970 <__ieee754_pow+0x9f0>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fb fcd3 	bl	80001d4 <__adddf3>
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	f7fb fe85 	bl	8000540 <__aeabi_dmul>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4640      	mov	r0, r8
 800483c:	4649      	mov	r1, r9
 800483e:	f7fb fcc7 	bl	80001d0 <__aeabi_dsub>
 8004842:	4604      	mov	r4, r0
 8004844:	460d      	mov	r5, r1
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4640      	mov	r0, r8
 800484c:	4649      	mov	r1, r9
 800484e:	f7fb fe77 	bl	8000540 <__aeabi_dmul>
 8004852:	2200      	movs	r2, #0
 8004854:	e9cd 0100 	strd	r0, r1, [sp]
 8004858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800485c:	4620      	mov	r0, r4
 800485e:	4629      	mov	r1, r5
 8004860:	f7fb fcb6 	bl	80001d0 <__aeabi_dsub>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800486c:	f7fb ff92 	bl	8000794 <__aeabi_ddiv>
 8004870:	4632      	mov	r2, r6
 8004872:	4604      	mov	r4, r0
 8004874:	460d      	mov	r5, r1
 8004876:	463b      	mov	r3, r7
 8004878:	4640      	mov	r0, r8
 800487a:	4649      	mov	r1, r9
 800487c:	f7fb fe60 	bl	8000540 <__aeabi_dmul>
 8004880:	4632      	mov	r2, r6
 8004882:	463b      	mov	r3, r7
 8004884:	f7fb fca6 	bl	80001d4 <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	f7fb fc9e 	bl	80001d0 <__aeabi_dsub>
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	f7fb fc9a 	bl	80001d0 <__aeabi_dsub>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	2000      	movs	r0, #0
 80048a2:	4939      	ldr	r1, [pc, #228]	; (8004988 <__ieee754_pow+0xa08>)
 80048a4:	f7fb fc94 	bl	80001d0 <__aeabi_dsub>
 80048a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80048ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	da2f      	bge.n	8004916 <__ieee754_pow+0x996>
 80048b6:	4650      	mov	r0, sl
 80048b8:	ec43 2b10 	vmov	d0, r2, r3
 80048bc:	f000 f9c0 	bl	8004c40 <scalbn>
 80048c0:	ec51 0b10 	vmov	r0, r1, d0
 80048c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c8:	f7ff bbf1 	b.w	80040ae <__ieee754_pow+0x12e>
 80048cc:	4b2f      	ldr	r3, [pc, #188]	; (800498c <__ieee754_pow+0xa0c>)
 80048ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80048d2:	429e      	cmp	r6, r3
 80048d4:	f77f af0c 	ble.w	80046f0 <__ieee754_pow+0x770>
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <__ieee754_pow+0xa10>)
 80048da:	440b      	add	r3, r1
 80048dc:	4303      	orrs	r3, r0
 80048de:	d00b      	beq.n	80048f8 <__ieee754_pow+0x978>
 80048e0:	a325      	add	r3, pc, #148	; (adr r3, 8004978 <__ieee754_pow+0x9f8>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ea:	f7fb fe29 	bl	8000540 <__aeabi_dmul>
 80048ee:	a322      	add	r3, pc, #136	; (adr r3, 8004978 <__ieee754_pow+0x9f8>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7ff bbdb 	b.w	80040ae <__ieee754_pow+0x12e>
 80048f8:	4622      	mov	r2, r4
 80048fa:	462b      	mov	r3, r5
 80048fc:	f7fb fc68 	bl	80001d0 <__aeabi_dsub>
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	f7fc f8a2 	bl	8000a4c <__aeabi_dcmpge>
 8004908:	2800      	cmp	r0, #0
 800490a:	f43f aef1 	beq.w	80046f0 <__ieee754_pow+0x770>
 800490e:	e7e7      	b.n	80048e0 <__ieee754_pow+0x960>
 8004910:	f04f 0a00 	mov.w	sl, #0
 8004914:	e718      	b.n	8004748 <__ieee754_pow+0x7c8>
 8004916:	4621      	mov	r1, r4
 8004918:	e7d4      	b.n	80048c4 <__ieee754_pow+0x944>
 800491a:	2000      	movs	r0, #0
 800491c:	491a      	ldr	r1, [pc, #104]	; (8004988 <__ieee754_pow+0xa08>)
 800491e:	f7ff bb8f 	b.w	8004040 <__ieee754_pow+0xc0>
 8004922:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004926:	f7ff bb8b 	b.w	8004040 <__ieee754_pow+0xc0>
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	f7ff bb87 	b.w	8004040 <__ieee754_pow+0xc0>
 8004932:	4693      	mov	fp, r2
 8004934:	f7ff bb98 	b.w	8004068 <__ieee754_pow+0xe8>
 8004938:	00000000 	.word	0x00000000
 800493c:	3fe62e43 	.word	0x3fe62e43
 8004940:	fefa39ef 	.word	0xfefa39ef
 8004944:	3fe62e42 	.word	0x3fe62e42
 8004948:	0ca86c39 	.word	0x0ca86c39
 800494c:	be205c61 	.word	0xbe205c61
 8004950:	72bea4d0 	.word	0x72bea4d0
 8004954:	3e663769 	.word	0x3e663769
 8004958:	c5d26bf1 	.word	0xc5d26bf1
 800495c:	3ebbbd41 	.word	0x3ebbbd41
 8004960:	af25de2c 	.word	0xaf25de2c
 8004964:	3f11566a 	.word	0x3f11566a
 8004968:	16bebd93 	.word	0x16bebd93
 800496c:	3f66c16c 	.word	0x3f66c16c
 8004970:	5555553e 	.word	0x5555553e
 8004974:	3fc55555 	.word	0x3fc55555
 8004978:	c2f8f359 	.word	0xc2f8f359
 800497c:	01a56e1f 	.word	0x01a56e1f
 8004980:	3fe00000 	.word	0x3fe00000
 8004984:	000fffff 	.word	0x000fffff
 8004988:	3ff00000 	.word	0x3ff00000
 800498c:	4090cbff 	.word	0x4090cbff
 8004990:	3f6f3400 	.word	0x3f6f3400
 8004994:	652b82fe 	.word	0x652b82fe
 8004998:	3c971547 	.word	0x3c971547

0800499c <__ieee754_sqrt>:
 800499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a0:	4955      	ldr	r1, [pc, #340]	; (8004af8 <__ieee754_sqrt+0x15c>)
 80049a2:	ec55 4b10 	vmov	r4, r5, d0
 80049a6:	43a9      	bics	r1, r5
 80049a8:	462b      	mov	r3, r5
 80049aa:	462a      	mov	r2, r5
 80049ac:	d112      	bne.n	80049d4 <__ieee754_sqrt+0x38>
 80049ae:	ee10 2a10 	vmov	r2, s0
 80049b2:	ee10 0a10 	vmov	r0, s0
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fdc2 	bl	8000540 <__aeabi_dmul>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	f7fb fc06 	bl	80001d4 <__adddf3>
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
 80049cc:	ec45 4b10 	vmov	d0, r4, r5
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	ee10 0a10 	vmov	r0, s0
 80049da:	4621      	mov	r1, r4
 80049dc:	dc0f      	bgt.n	80049fe <__ieee754_sqrt+0x62>
 80049de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80049e2:	4330      	orrs	r0, r6
 80049e4:	d0f2      	beq.n	80049cc <__ieee754_sqrt+0x30>
 80049e6:	b155      	cbz	r5, 80049fe <__ieee754_sqrt+0x62>
 80049e8:	ee10 2a10 	vmov	r2, s0
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fbee 	bl	80001d0 <__aeabi_dsub>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	f7fb fecc 	bl	8000794 <__aeabi_ddiv>
 80049fc:	e7e4      	b.n	80049c8 <__ieee754_sqrt+0x2c>
 80049fe:	151b      	asrs	r3, r3, #20
 8004a00:	d073      	beq.n	8004aea <__ieee754_sqrt+0x14e>
 8004a02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a06:	07dd      	lsls	r5, r3, #31
 8004a08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004a0c:	bf48      	it	mi
 8004a0e:	0fc8      	lsrmi	r0, r1, #31
 8004a10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a14:	bf44      	itt	mi
 8004a16:	0049      	lslmi	r1, r1, #1
 8004a18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004a1c:	2500      	movs	r5, #0
 8004a1e:	1058      	asrs	r0, r3, #1
 8004a20:	0fcb      	lsrs	r3, r1, #31
 8004a22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004a26:	0049      	lsls	r1, r1, #1
 8004a28:	2316      	movs	r3, #22
 8004a2a:	462c      	mov	r4, r5
 8004a2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004a30:	19a7      	adds	r7, r4, r6
 8004a32:	4297      	cmp	r7, r2
 8004a34:	bfde      	ittt	le
 8004a36:	19bc      	addle	r4, r7, r6
 8004a38:	1bd2      	suble	r2, r2, r7
 8004a3a:	19ad      	addle	r5, r5, r6
 8004a3c:	0fcf      	lsrs	r7, r1, #31
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004a44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004a48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004a4c:	d1f0      	bne.n	8004a30 <__ieee754_sqrt+0x94>
 8004a4e:	f04f 0c20 	mov.w	ip, #32
 8004a52:	469e      	mov	lr, r3
 8004a54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004a58:	42a2      	cmp	r2, r4
 8004a5a:	eb06 070e 	add.w	r7, r6, lr
 8004a5e:	dc02      	bgt.n	8004a66 <__ieee754_sqrt+0xca>
 8004a60:	d112      	bne.n	8004a88 <__ieee754_sqrt+0xec>
 8004a62:	428f      	cmp	r7, r1
 8004a64:	d810      	bhi.n	8004a88 <__ieee754_sqrt+0xec>
 8004a66:	2f00      	cmp	r7, #0
 8004a68:	eb07 0e06 	add.w	lr, r7, r6
 8004a6c:	da42      	bge.n	8004af4 <__ieee754_sqrt+0x158>
 8004a6e:	f1be 0f00 	cmp.w	lr, #0
 8004a72:	db3f      	blt.n	8004af4 <__ieee754_sqrt+0x158>
 8004a74:	f104 0801 	add.w	r8, r4, #1
 8004a78:	1b12      	subs	r2, r2, r4
 8004a7a:	428f      	cmp	r7, r1
 8004a7c:	bf88      	it	hi
 8004a7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004a82:	1bc9      	subs	r1, r1, r7
 8004a84:	4433      	add	r3, r6
 8004a86:	4644      	mov	r4, r8
 8004a88:	0052      	lsls	r2, r2, #1
 8004a8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004a8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004a92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004a96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004a9a:	d1dd      	bne.n	8004a58 <__ieee754_sqrt+0xbc>
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	d006      	beq.n	8004aae <__ieee754_sqrt+0x112>
 8004aa0:	1c5c      	adds	r4, r3, #1
 8004aa2:	bf13      	iteet	ne
 8004aa4:	3301      	addne	r3, #1
 8004aa6:	3501      	addeq	r5, #1
 8004aa8:	4663      	moveq	r3, ip
 8004aaa:	f023 0301 	bicne.w	r3, r3, #1
 8004aae:	106a      	asrs	r2, r5, #1
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	07e9      	lsls	r1, r5, #31
 8004ab4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004ab8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004abc:	bf48      	it	mi
 8004abe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	e780      	b.n	80049cc <__ieee754_sqrt+0x30>
 8004aca:	0aca      	lsrs	r2, r1, #11
 8004acc:	3815      	subs	r0, #21
 8004ace:	0549      	lsls	r1, r1, #21
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	d0fa      	beq.n	8004aca <__ieee754_sqrt+0x12e>
 8004ad4:	02d6      	lsls	r6, r2, #11
 8004ad6:	d50a      	bpl.n	8004aee <__ieee754_sqrt+0x152>
 8004ad8:	f1c3 0420 	rsb	r4, r3, #32
 8004adc:	fa21 f404 	lsr.w	r4, r1, r4
 8004ae0:	1e5d      	subs	r5, r3, #1
 8004ae2:	4099      	lsls	r1, r3
 8004ae4:	4322      	orrs	r2, r4
 8004ae6:	1b43      	subs	r3, r0, r5
 8004ae8:	e78b      	b.n	8004a02 <__ieee754_sqrt+0x66>
 8004aea:	4618      	mov	r0, r3
 8004aec:	e7f0      	b.n	8004ad0 <__ieee754_sqrt+0x134>
 8004aee:	0052      	lsls	r2, r2, #1
 8004af0:	3301      	adds	r3, #1
 8004af2:	e7ef      	b.n	8004ad4 <__ieee754_sqrt+0x138>
 8004af4:	46a0      	mov	r8, r4
 8004af6:	e7bf      	b.n	8004a78 <__ieee754_sqrt+0xdc>
 8004af8:	7ff00000 	.word	0x7ff00000

08004afc <fabs>:
 8004afc:	ec51 0b10 	vmov	r0, r1, d0
 8004b00:	ee10 2a10 	vmov	r2, s0
 8004b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	ec43 2b10 	vmov	d0, r2, r3
 8004b0c:	4770      	bx	lr

08004b0e <finite>:
 8004b0e:	ee10 3a90 	vmov	r3, s1
 8004b12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004b16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004b1a:	0fc0      	lsrs	r0, r0, #31
 8004b1c:	4770      	bx	lr

08004b1e <matherr>:
 8004b1e:	2000      	movs	r0, #0
 8004b20:	4770      	bx	lr
 8004b22:	0000      	movs	r0, r0
 8004b24:	0000      	movs	r0, r0
	...

08004b28 <nan>:
 8004b28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004b30 <nan+0x8>
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	00000000 	.word	0x00000000
 8004b34:	7ff80000 	.word	0x7ff80000

08004b38 <rint>:
 8004b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3a:	ec51 0b10 	vmov	r0, r1, d0
 8004b3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004b46:	2e13      	cmp	r6, #19
 8004b48:	460b      	mov	r3, r1
 8004b4a:	ee10 4a10 	vmov	r4, s0
 8004b4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004b52:	dc56      	bgt.n	8004c02 <rint+0xca>
 8004b54:	2e00      	cmp	r6, #0
 8004b56:	da2b      	bge.n	8004bb0 <rint+0x78>
 8004b58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004b5c:	4302      	orrs	r2, r0
 8004b5e:	d023      	beq.n	8004ba8 <rint+0x70>
 8004b60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004b64:	4302      	orrs	r2, r0
 8004b66:	4254      	negs	r4, r2
 8004b68:	4314      	orrs	r4, r2
 8004b6a:	0c4b      	lsrs	r3, r1, #17
 8004b6c:	0b24      	lsrs	r4, r4, #12
 8004b6e:	045b      	lsls	r3, r3, #17
 8004b70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004b74:	ea44 0103 	orr.w	r1, r4, r3
 8004b78:	460b      	mov	r3, r1
 8004b7a:	492f      	ldr	r1, [pc, #188]	; (8004c38 <rint+0x100>)
 8004b7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004b80:	e9d1 6700 	ldrd	r6, r7, [r1]
 8004b84:	4602      	mov	r2, r0
 8004b86:	4639      	mov	r1, r7
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7fb fb23 	bl	80001d4 <__adddf3>
 8004b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8004b92:	463b      	mov	r3, r7
 8004b94:	4632      	mov	r2, r6
 8004b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b9a:	f7fb fb19 	bl	80001d0 <__aeabi_dsub>
 8004b9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ba2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	ec41 0b10 	vmov	d0, r0, r1
 8004bac:	b003      	add	sp, #12
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <rint+0x104>)
 8004bb2:	4132      	asrs	r2, r6
 8004bb4:	ea01 0702 	and.w	r7, r1, r2
 8004bb8:	4307      	orrs	r7, r0
 8004bba:	d0f5      	beq.n	8004ba8 <rint+0x70>
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	4011      	ands	r1, r2
 8004bc0:	430c      	orrs	r4, r1
 8004bc2:	d00b      	beq.n	8004bdc <rint+0xa4>
 8004bc4:	ea23 0202 	bic.w	r2, r3, r2
 8004bc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bcc:	2e13      	cmp	r6, #19
 8004bce:	fa43 f306 	asr.w	r3, r3, r6
 8004bd2:	bf0c      	ite	eq
 8004bd4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004bd8:	2400      	movne	r4, #0
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <rint+0x100>)
 8004bde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004be2:	4622      	mov	r2, r4
 8004be4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004be8:	4620      	mov	r0, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	f7fb faf2 	bl	80001d4 <__adddf3>
 8004bf0:	e9cd 0100 	strd	r0, r1, [sp]
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bfc:	f7fb fae8 	bl	80001d0 <__aeabi_dsub>
 8004c00:	e7d2      	b.n	8004ba8 <rint+0x70>
 8004c02:	2e33      	cmp	r6, #51	; 0x33
 8004c04:	dd07      	ble.n	8004c16 <rint+0xde>
 8004c06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c0a:	d1cd      	bne.n	8004ba8 <rint+0x70>
 8004c0c:	ee10 2a10 	vmov	r2, s0
 8004c10:	f7fb fae0 	bl	80001d4 <__adddf3>
 8004c14:	e7c8      	b.n	8004ba8 <rint+0x70>
 8004c16:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	40f2      	lsrs	r2, r6
 8004c20:	4210      	tst	r0, r2
 8004c22:	d0c1      	beq.n	8004ba8 <rint+0x70>
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	4210      	tst	r0, r2
 8004c28:	bf1f      	itttt	ne
 8004c2a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004c2e:	ea20 0202 	bicne.w	r2, r0, r2
 8004c32:	4134      	asrne	r4, r6
 8004c34:	4314      	orrne	r4, r2
 8004c36:	e7d1      	b.n	8004bdc <rint+0xa4>
 8004c38:	08004dd0 	.word	0x08004dd0
 8004c3c:	000fffff 	.word	0x000fffff

08004c40 <scalbn>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	ec55 4b10 	vmov	r4, r5, d0
 8004c46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	b9aa      	cbnz	r2, 8004c7c <scalbn+0x3c>
 8004c50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004c54:	4323      	orrs	r3, r4
 8004c56:	d03b      	beq.n	8004cd0 <scalbn+0x90>
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <scalbn+0xe0>)
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	ee10 0a10 	vmov	r0, s0
 8004c62:	f7fb fc6d 	bl	8000540 <__aeabi_dmul>
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <scalbn+0xe4>)
 8004c68:	429e      	cmp	r6, r3
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	da12      	bge.n	8004c96 <scalbn+0x56>
 8004c70:	a327      	add	r3, pc, #156	; (adr r3, 8004d10 <scalbn+0xd0>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fc63 	bl	8000540 <__aeabi_dmul>
 8004c7a:	e009      	b.n	8004c90 <scalbn+0x50>
 8004c7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004c80:	428a      	cmp	r2, r1
 8004c82:	d10c      	bne.n	8004c9e <scalbn+0x5e>
 8004c84:	ee10 2a10 	vmov	r2, s0
 8004c88:	4620      	mov	r0, r4
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f7fb faa2 	bl	80001d4 <__adddf3>
 8004c90:	4604      	mov	r4, r0
 8004c92:	460d      	mov	r5, r1
 8004c94:	e01c      	b.n	8004cd0 <scalbn+0x90>
 8004c96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	3a36      	subs	r2, #54	; 0x36
 8004c9e:	4432      	add	r2, r6
 8004ca0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	dd0b      	ble.n	8004cc0 <scalbn+0x80>
 8004ca8:	ec45 4b11 	vmov	d1, r4, r5
 8004cac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004d18 <scalbn+0xd8>
 8004cb0:	f000 f83c 	bl	8004d2c <copysign>
 8004cb4:	a318      	add	r3, pc, #96	; (adr r3, 8004d18 <scalbn+0xd8>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	ec51 0b10 	vmov	r0, r1, d0
 8004cbe:	e7da      	b.n	8004c76 <scalbn+0x36>
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	dd08      	ble.n	8004cd6 <scalbn+0x96>
 8004cc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ccc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004cd0:	ec45 4b10 	vmov	d0, r4, r5
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004cda:	da0d      	bge.n	8004cf8 <scalbn+0xb8>
 8004cdc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ce0:	429e      	cmp	r6, r3
 8004ce2:	ec45 4b11 	vmov	d1, r4, r5
 8004ce6:	dce1      	bgt.n	8004cac <scalbn+0x6c>
 8004ce8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004d10 <scalbn+0xd0>
 8004cec:	f000 f81e 	bl	8004d2c <copysign>
 8004cf0:	a307      	add	r3, pc, #28	; (adr r3, 8004d10 <scalbn+0xd0>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	e7e0      	b.n	8004cba <scalbn+0x7a>
 8004cf8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cfc:	3236      	adds	r2, #54	; 0x36
 8004cfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <scalbn+0xe8>)
 8004d0e:	e7b2      	b.n	8004c76 <scalbn+0x36>
 8004d10:	c2f8f359 	.word	0xc2f8f359
 8004d14:	01a56e1f 	.word	0x01a56e1f
 8004d18:	8800759c 	.word	0x8800759c
 8004d1c:	7e37e43c 	.word	0x7e37e43c
 8004d20:	43500000 	.word	0x43500000
 8004d24:	ffff3cb0 	.word	0xffff3cb0
 8004d28:	3c900000 	.word	0x3c900000

08004d2c <copysign>:
 8004d2c:	ec51 0b10 	vmov	r0, r1, d0
 8004d30:	ee11 0a90 	vmov	r0, s3
 8004d34:	ee10 2a10 	vmov	r2, s0
 8004d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004d3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004d40:	ea41 0300 	orr.w	r3, r1, r0
 8004d44:	ec43 2b10 	vmov	d0, r2, r3
 8004d48:	4770      	bx	lr
	...

08004d4c <_init>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr

08004d58 <_fini>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr
