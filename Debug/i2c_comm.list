
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000539c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005528  08005528  00015528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e8  080055e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055e8  080055e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055e8  080055e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08005660  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08005660  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001984  00000000  00000000  0002836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049f0  00000000  00000000  0002af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006825  00000000  00000000  0002f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ed9  00000000  00000000  0003611d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aeff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  000af074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800550c 	.word	0x0800550c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800550c 	.word	0x0800550c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <LL_EXTI_EnableIT_0_31+0x20>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_EXTI_EnableIT_0_31+0x20>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	600b      	str	r3, [r1, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b6e:	6a1a      	ldr	r2, [r3, #32]
 8000b70:	4904      	ldr	r1, [pc, #16]	; (8000b84 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	620b      	str	r3, [r1, #32]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400

08000b88 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <LL_EXTI_DisableIT_0_31+0x24>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4904      	ldr	r1, [pc, #16]	; (8000bac <LL_EXTI_DisableIT_0_31+0x24>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010400 	.word	0x40010400

08000bb0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000bba:	6a1a      	ldr	r2, [r3, #32]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	620b      	str	r3, [r1, #32]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4904      	ldr	r1, [pc, #16]	; (8000bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]

}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40010400 	.word	0x40010400

08000bfc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40010400 	.word	0x40010400

08000c20 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	604b      	str	r3, [r1, #4]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40010400 	.word	0x40010400

08000c48 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010400 	.word	0x40010400

08000c70 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	4904      	ldr	r1, [pc, #16]	; (8000c90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]

}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40010400 	.word	0x40010400

08000c94 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]

}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4904      	ldr	r1, [pc, #16]	; (8000d04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40010400 	.word	0x40010400

08000d08 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60cb      	str	r3, [r1, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40010400 	.word	0x40010400

08000d2c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	60cb      	str	r3, [r1, #12]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	4904      	ldr	r1, [pc, #16]	; (8000d9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40010400 	.word	0x40010400

08000da0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7a1b      	ldrb	r3, [r3, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80c2 	beq.w	8000f3a <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d05b      	beq.n	8000e76 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d00e      	beq.n	8000de4 <LL_EXTI_Init+0x44>
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d017      	beq.n	8000dfa <LL_EXTI_Init+0x5a>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d120      	bne.n	8000e10 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff24 	bl	8000c20 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff feaf 	bl	8000b40 <LL_EXTI_EnableIT_0_31>
          break;
 8000de2:	e018      	b.n	8000e16 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fecd 	bl	8000b88 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fef0 	bl	8000bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000df8:	e00d      	b.n	8000e16 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe9e 	bl	8000b40 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fee5 	bl	8000bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000e0e:	e002      	b.n	8000e16 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
          break;
 8000e14:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a9b      	ldrb	r3, [r3, #10]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d02b      	beq.n	8000e76 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7a9b      	ldrb	r3, [r3, #10]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d00e      	beq.n	8000e44 <LL_EXTI_Init+0xa4>
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <LL_EXTI_Init+0xba>
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d120      	bne.n	8000e70 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff8c 	bl	8000d50 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff17 	bl	8000c70 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000e42:	e019      	b.n	8000e78 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff35 	bl	8000cb8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff58 	bl	8000d08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e58:	e00e      	b.n	8000e78 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff06 	bl	8000c70 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff4d 	bl	8000d08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e6e:	e003      	b.n	8000e78 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
            break;
 8000e74:	e000      	b.n	8000e78 <LL_EXTI_Init+0xd8>
        }
      }
 8000e76:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d071      	beq.n	8000f64 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7a5b      	ldrb	r3, [r3, #9]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d00e      	beq.n	8000ea6 <LL_EXTI_Init+0x106>
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d017      	beq.n	8000ebc <LL_EXTI_Init+0x11c>
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d120      	bne.n	8000ed2 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fed7 	bl	8000c48 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe60 	bl	8000b64 <LL_EXTI_EnableIT_32_63>
          break;
 8000ea4:	e018      	b.n	8000ed8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe80 	bl	8000bb0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fea1 	bl	8000bfc <LL_EXTI_EnableEvent_32_63>
          break;
 8000eba:	e00d      	b.n	8000ed8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe4f 	bl	8000b64 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe96 	bl	8000bfc <LL_EXTI_EnableEvent_32_63>
          break;
 8000ed0:	e002      	b.n	8000ed8 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
          break;
 8000ed6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d041      	beq.n	8000f64 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7a9b      	ldrb	r3, [r3, #10]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d00e      	beq.n	8000f06 <LL_EXTI_Init+0x166>
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <LL_EXTI_Init+0x17c>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d120      	bne.n	8000f32 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff3f 	bl	8000d78 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fec8 	bl	8000c94 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000f04:	e02f      	b.n	8000f66 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fee8 	bl	8000ce0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff09 	bl	8000d2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000f1a:	e024      	b.n	8000f66 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff feb7 	bl	8000c94 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fefe 	bl	8000d2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000f30:	e019      	b.n	8000f66 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
            break;
 8000f36:	bf00      	nop
 8000f38:	e015      	b.n	8000f66 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe22 	bl	8000b88 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe69 	bl	8000c20 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe2c 	bl	8000bb0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe73 	bl	8000c48 <LL_EXTI_DisableEvent_32_63>
 8000f62:	e000      	b.n	8000f66 <LL_EXTI_Init+0x1c6>
      }
 8000f64:	bf00      	nop
#endif
  }
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2103      	movs	r1, #3
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	605a      	str	r2, [r3, #4]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b089      	sub	sp, #36	; 0x24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	613b      	str	r3, [r7, #16]
  return(result);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	fab3 f383 	clz	r3, r3
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2103      	movs	r1, #3
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	61bb      	str	r3, [r7, #24]
  return(result);
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	431a      	orrs	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001048:	bf00      	nop
 800104a:	3724      	adds	r7, #36	; 0x24
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	613b      	str	r3, [r7, #16]
  return(result);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2103      	movs	r1, #3
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	61bb      	str	r3, [r7, #24]
  return(result);
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	60da      	str	r2, [r3, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b089      	sub	sp, #36	; 0x24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a1a      	ldr	r2, [r3, #32]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	613b      	str	r3, [r7, #16]
  return(result);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	210f      	movs	r1, #15
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80010fc:	bf00      	nop
 80010fe:	3724      	adds	r7, #36	; 0x24
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	613b      	str	r3, [r7, #16]
  return(result);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	210f      	movs	r1, #15
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	61bb      	str	r3, [r7, #24]
  return(result);
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	431a      	orrs	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800115a:	bf00      	nop
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b088      	sub	sp, #32
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	613b      	str	r3, [r7, #16]
  return(result);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800118e:	e048      	b.n	8001222 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03a      	beq.n	800121c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	69b9      	ldr	r1, [r7, #24]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fede 	bl	8000f70 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d003      	beq.n	80011c4 <LL_GPIO_Init+0x5e>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d106      	bne.n	80011d2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	461a      	mov	r2, r3
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff14 	bl	8000ffa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	461a      	mov	r2, r3
 80011d8:	69b9      	ldr	r1, [r7, #24]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff3a 	bl	8001054 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d119      	bne.n	800121c <LL_GPIO_Init+0xb6>
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80011f4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	d807      	bhi.n	800120e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	461a      	mov	r2, r3
 8001204:	69b9      	ldr	r1, [r7, #24]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff51 	bl	80010ae <LL_GPIO_SetAFPin_0_7>
 800120c:	e006      	b.n	800121c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	461a      	mov	r2, r3
 8001214:	69b9      	ldr	r1, [r7, #24]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff76 	bl	8001108 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3301      	adds	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1af      	bne.n	8001190 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <LL_GPIO_Init+0xda>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d107      	bne.n	8001250 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6819      	ldr	r1, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	461a      	mov	r2, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff febd 	bl	8000fca <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0201 	bic.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0219      	lsls	r1, r3, #8
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012dc:	f023 0307 	bic.w	r3, r3, #7
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	609a      	str	r2, [r3, #8]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	611a      	str	r2, [r3, #16]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff65 	bl	800127a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6899      	ldr	r1, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	461a      	mov	r2, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff6d 	bl	800129a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffb6 	bl	8001338 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff44 	bl	800125a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffa0 	bl	8001318 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	6919      	ldr	r1, [r3, #16]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	461a      	mov	r2, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff70 	bl	80012c8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff81 	bl	80012f8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffa9 	bl	8001354 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffb6 	bl	800137a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	659a      	str	r2, [r3, #88]	; 0x58
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	615a      	str	r2, [r3, #20]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <LL_TIM_Init+0xd4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <LL_TIM_Init+0x2c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001556:	d003      	beq.n	8001560 <LL_TIM_Init+0x2c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <LL_TIM_Init+0xd8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d106      	bne.n	800156e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a25      	ldr	r2, [pc, #148]	; (8001608 <LL_TIM_Init+0xd4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <LL_TIM_Init+0x6a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d00f      	beq.n	800159e <LL_TIM_Init+0x6a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <LL_TIM_Init+0xd8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00b      	beq.n	800159e <LL_TIM_Init+0x6a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <LL_TIM_Init+0xdc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <LL_TIM_Init+0x6a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <LL_TIM_Init+0xe0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <LL_TIM_Init+0x6a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <LL_TIM_Init+0xe4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d106      	bne.n	80015ac <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff3b 	bl	8001434 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff27 	bl	8001418 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LL_TIM_Init+0xd4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00b      	beq.n	80015ea <LL_TIM_Init+0xb6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LL_TIM_Init+0xdc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <LL_TIM_Init+0xb6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LL_TIM_Init+0xe0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <LL_TIM_Init+0xb6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <LL_TIM_Init+0xe4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d105      	bne.n	80015f6 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	7c1b      	ldrb	r3, [r3, #16]
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff2d 	bl	8001450 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff8c 	bl	8001514 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40000400 	.word	0x40000400
 8001610:	40014000 	.word	0x40014000
 8001614:	40014400 	.word	0x40014400
 8001618:	40014800 	.word	0x40014800

0800161c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001632:	d01f      	beq.n	8001674 <LL_TIM_OC_Init+0x58>
 8001634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001638:	d804      	bhi.n	8001644 <LL_TIM_OC_Init+0x28>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d00c      	beq.n	8001658 <LL_TIM_OC_Init+0x3c>
 800163e:	2b10      	cmp	r3, #16
 8001640:	d011      	beq.n	8001666 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001642:	e033      	b.n	80016ac <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d022      	beq.n	8001690 <LL_TIM_OC_Init+0x74>
 800164a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800164e:	d026      	beq.n	800169e <LL_TIM_OC_Init+0x82>
 8001650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001654:	d015      	beq.n	8001682 <LL_TIM_OC_Init+0x66>
      break;
 8001656:	e029      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f82c 	bl	80016b8 <OC1Config>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]
      break;
 8001664:	e022      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f8a5 	bl	80017b8 <OC2Config>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
      break;
 8001672:	e01b      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f922 	bl	80018c0 <OC3Config>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
      break;
 8001680:	e014      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f99f 	bl	80019c8 <OC4Config>
 800168a:	4603      	mov	r3, r0
 800168c:	75fb      	strb	r3, [r7, #23]
      break;
 800168e:	e00d      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa04 	bl	8001aa0 <OC5Config>
 8001698:	4603      	mov	r3, r0
 800169a:	75fb      	strb	r3, [r7, #23]
      break;
 800169c:	e006      	b.n	80016ac <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fa5f 	bl	8001b64 <OC6Config>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
      break;
 80016aa:	bf00      	nop
  }

  return result;
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	f023 0201 	bic.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f023 0202 	bic.w	r2, r3, #2
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f023 0201 	bic.w	r2, r3, #1
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <OC1Config+0xf0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00b      	beq.n	8001742 <OC1Config+0x8a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <OC1Config+0xf4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <OC1Config+0x8a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <OC1Config+0xf8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d003      	beq.n	8001742 <OC1Config+0x8a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <OC1Config+0xfc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11e      	bne.n	8001780 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f023 0208 	bic.w	r2, r3, #8
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f023 0204 	bic.w	r2, r3, #4
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe6a 	bl	800146c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	40014000 	.word	0x40014000
 80017b0:	40014400 	.word	0x40014400
 80017b4:	40014800 	.word	0x40014800

080017b8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	f023 0210 	bic.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	0212      	lsls	r2, r2, #8
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f023 0220 	bic.w	r2, r3, #32
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f023 0210 	bic.w	r2, r3, #16
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <OC2Config+0xf8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00b      	beq.n	8001848 <OC2Config+0x90>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <OC2Config+0xfc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <OC2Config+0x90>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <OC2Config+0x100>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d003      	beq.n	8001848 <OC2Config+0x90>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <OC2Config+0x104>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d11f      	bne.n	8001888 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	019b      	lsls	r3, r3, #6
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdf4 	bl	8001488 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40014000 	.word	0x40014000
 80018b8:	40014400 	.word	0x40014400
 80018bc:	40014800 	.word	0x40014800

080018c0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <OC3Config+0xf8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <OC3Config+0x8e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <OC3Config+0xfc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <OC3Config+0x8e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <OC3Config+0x100>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <OC3Config+0x8e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <OC3Config+0x104>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11f      	bne.n	800198e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	029b      	lsls	r3, r3, #10
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fd7f 	bl	80014a4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40014000 	.word	0x40014000
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800

080019c8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a02:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	0212      	lsls	r2, r2, #8
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	031b      	lsls	r3, r3, #12
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	031b      	lsls	r3, r3, #12
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <OC4Config+0xc8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00b      	beq.n	8001a58 <OC4Config+0x90>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <OC4Config+0xcc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <OC4Config+0x90>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <OC4Config+0xd0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <OC4Config+0x90>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <OC4Config+0xd4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d107      	bne.n	8001a68 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	019b      	lsls	r3, r3, #6
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fd20 	bl	80014c0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40012c00 	.word	0x40012c00
 8001a94:	40014000 	.word	0x40014000
 8001a98:	40014400 	.word	0x40014400
 8001a9c:	40014800 	.word	0x40014800

08001aa0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <OC5Config+0xb4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00b      	beq.n	8001b1c <OC5Config+0x7c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <OC5Config+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <OC5Config+0x7c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <OC5Config+0xbc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d003      	beq.n	8001b1c <OC5Config+0x7c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <OC5Config+0xc0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d109      	bne.n	8001b30 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fccd 	bl	80014dc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40014000 	.word	0x40014000
 8001b5c:	40014400 	.word	0x40014400
 8001b60:	40014800 	.word	0x40014800

08001b64 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	0212      	lsls	r2, r2, #8
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	051b      	lsls	r3, r3, #20
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	051b      	lsls	r3, r3, #20
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <OC6Config+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00b      	beq.n	8001be2 <OC6Config+0x7e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <OC6Config+0xb8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <OC6Config+0x7e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <OC6Config+0xbc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d003      	beq.n	8001be2 <OC6Config+0x7e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <OC6Config+0xc0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d109      	bne.n	8001bf6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	029b      	lsls	r3, r3, #10
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fc78 	bl	80014f8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40014000 	.word	0x40014000
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40014800 	.word	0x40014800

08001c28 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <LL_InitTick+0x30>)
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <LL_InitTick+0x30>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <LL_InitTick+0x30>)
 8001c48:	2205      	movs	r2, #5
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffdd 	bl	8001c28 <LL_InitTick>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <LL_mDelay+0x44>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001c86:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d00c      	beq.n	8001caa <LL_mDelay+0x32>
  {
    Delay++;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3301      	adds	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001c96:	e008      	b.n	8001caa <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <LL_mDelay+0x44>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <LL_mDelay+0x32>
    {
      Delay--;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f3      	bne.n	8001c98 <LL_mDelay+0x20>
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <LL_SetSystemCoreClock+0x1c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	619a      	str	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_TIM_ClearFlag_UPDATE>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f06f 0201 	mvn.w	r2, #1
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d68:	f7ff ffba 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f7ff ffb4 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001d78:	2102      	movs	r1, #2
 8001d7a:	480e      	ldr	r0, [pc, #56]	; (8001db4 <resetSegments+0x58>)
 8001d7c:	f7ff ffb0 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001d80:	2120      	movs	r1, #32
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <resetSegments+0x58>)
 8001d84:	f7ff ffac 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001d88:	2110      	movs	r1, #16
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <resetSegments+0x58>)
 8001d8c:	f7ff ffa8 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001d90:	2101      	movs	r1, #1
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f7ff ffa3 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da0:	f7ff ff9e 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001da4:	2108      	movs	r1, #8
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f7ff ff99 	bl	8001ce0 <LL_GPIO_SetOutputPin>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	48000400 	.word	0x48000400

08001db8 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f7ff ff9a 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd0:	f7ff ff94 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	480e      	ldr	r0, [pc, #56]	; (8001e10 <setSegments+0x58>)
 8001dd8:	f7ff ff90 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ddc:	2120      	movs	r1, #32
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <setSegments+0x58>)
 8001de0:	f7ff ff8c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001de4:	2110      	movs	r1, #16
 8001de6:	480a      	ldr	r0, [pc, #40]	; (8001e10 <setSegments+0x58>)
 8001de8:	f7ff ff88 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001dec:	2101      	movs	r1, #1
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f7ff ff83 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001df6:	2102      	movs	r1, #2
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfc:	f7ff ff7e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001e00:	2108      	movs	r1, #8
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f7ff ff79 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	48000400 	.word	0x48000400

08001e14 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f7ff ff6d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001e22:	2101      	movs	r1, #1
 8001e24:	480a      	ldr	r0, [pc, #40]	; (8001e50 <resetDigits+0x3c>)
 8001e26:	f7ff ff69 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e30:	f7ff ff64 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8001e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f7ff ff5e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f7ff ff59 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	48000400 	.word	0x48000400

08001e54 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001e58:	2101      	movs	r1, #1
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <setDigits+0x3c>)
 8001e5c:	f7ff ff40 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001e60:	2110      	movs	r1, #16
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f7ff ff3b 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e72:	f7ff ff35 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001e76:	2104      	movs	r1, #4
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f7ff ff30 	bl	8001ce0 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e86:	f7ff ff2b 	bl	8001ce0 <LL_GPIO_SetOutputPin>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	48000400 	.word	0x48000400

08001e94 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <setDecimalPoint+0x10>)
 8001e9c:	f7ff ff2e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001eac:	2101      	movs	r1, #1
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb2:	f7ff ff23 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f7ff ff1d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <setTwo>:

void setTwo(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed2:	f7ff ff13 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f7ff ff0e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <setTwo+0x38>)
 8001ee4:	f7ff ff0a 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f7ff ff04 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <setTwo+0x38>)
 8001ef8:	f7ff ff00 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	48000400 	.word	0x48000400

08001f04 <setThree>:

void setThree(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f7ff fef5 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f12:	2102      	movs	r1, #2
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f7ff fef0 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <setThree+0x38>)
 8001f20:	f7ff feec 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f7ff fee6 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f30:	2120      	movs	r1, #32
 8001f32:	4802      	ldr	r0, [pc, #8]	; (8001f3c <setThree+0x38>)
 8001f34:	f7ff fee2 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	48000400 	.word	0x48000400

08001f40 <setFour>:

void setFour(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f44:	2108      	movs	r1, #8
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4a:	f7ff fed7 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f7ff fed2 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <setFour+0x30>)
 8001f5c:	f7ff fece 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f7ff fec8 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	48000400 	.word	0x48000400

08001f74 <setFive>:

void setFive(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f78:	2108      	movs	r1, #8
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f7ff febd 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f82:	2120      	movs	r1, #32
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <setFive+0x38>)
 8001f86:	f7ff feb9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <setFive+0x38>)
 8001f8e:	f7ff feb5 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9a:	f7ff feaf 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa4:	f7ff feaa 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	48000400 	.word	0x48000400

08001fb0 <setSix>:

void setSix(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f7ff fe9f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <setSix+0x44>)
 8001fc2:	f7ff fe9b 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <setSix+0x44>)
 8001fca:	f7ff fe97 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f7ff fe91 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fda:	2102      	movs	r1, #2
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f7ff fe8c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f7ff fe86 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <setSeven>:

void setSeven(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f7ff fe7b 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200e:	f7ff fe75 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002012:	2102      	movs	r1, #2
 8002014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002018:	f7ff fe70 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <setEight>:

void setEight(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002024:	2108      	movs	r1, #8
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202a:	f7ff fe67 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800202e:	2120      	movs	r1, #32
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <setEight+0x50>)
 8002032:	f7ff fe63 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002036:	2110      	movs	r1, #16
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <setEight+0x50>)
 800203a:	f7ff fe5f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800203e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f7ff fe59 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800204a:	2102      	movs	r1, #2
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f7ff fe54 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f7ff fe4e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002060:	2101      	movs	r1, #1
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f7ff fe49 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	48000400 	.word	0x48000400

08002074 <setNine>:

void setNine(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002078:	2101      	movs	r1, #1
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f7ff fe3d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208a:	f7ff fe37 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800208e:	2102      	movs	r1, #2
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f7ff fe32 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002098:	2110      	movs	r1, #16
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <setNine+0x3c>)
 800209c:	f7ff fe2e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020a0:	2108      	movs	r1, #8
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f7ff fe29 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	48000400 	.word	0x48000400

080020b4 <setZero>:

void setZero(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020b8:	2108      	movs	r1, #8
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020be:	f7ff fe1d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020c2:	2120      	movs	r1, #32
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <setZero+0x48>)
 80020c6:	f7ff fe19 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f7ff fe13 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020d6:	2102      	movs	r1, #2
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f7ff fe0e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80020e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f7ff fe08 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80020ec:	2101      	movs	r1, #1
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f7ff fe03 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	48000400 	.word	0x48000400

08002100 <setA>:

void setA(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002104:	2108      	movs	r1, #8
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f7ff fdf7 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800210e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f7ff fdf1 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800211a:	2102      	movs	r1, #2
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fdec 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff fde6 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002130:	2101      	movs	r1, #1
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f7ff fde1 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800213a:	2110      	movs	r1, #16
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <setA+0x48>)
 800213e:	f7ff fddd 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	48000400 	.word	0x48000400

0800214c <setB>:

void setB(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f7ff fdd0 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800215c:	2120      	movs	r1, #32
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <setB+0x3c>)
 8002160:	f7ff fdcc 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f7ff fdc6 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002170:	2108      	movs	r1, #8
 8002172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002176:	f7ff fdc1 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800217a:	2110      	movs	r1, #16
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <setB+0x3c>)
 800217e:	f7ff fdbd 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	48000400 	.word	0x48000400

0800218c <setC>:

void setC(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002190:	2102      	movs	r1, #2
 8002192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002196:	f7ff fdb1 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800219a:	2120      	movs	r1, #32
 800219c:	4807      	ldr	r0, [pc, #28]	; (80021bc <setC+0x30>)
 800219e:	f7ff fdad 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f7ff fda7 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021ae:	2108      	movs	r1, #8
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f7ff fda2 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	48000400 	.word	0x48000400

080021c0 <setD>:

void setD(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021c4:	2101      	movs	r1, #1
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f7ff fd97 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d6:	f7ff fd91 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021da:	2120      	movs	r1, #32
 80021dc:	4807      	ldr	r0, [pc, #28]	; (80021fc <setD+0x3c>)
 80021de:	f7ff fd8d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f7ff fd87 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021ee:	2110      	movs	r1, #16
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <setD+0x3c>)
 80021f2:	f7ff fd83 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	48000400 	.word	0x48000400

08002200 <setE>:

void setE(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002204:	2102      	movs	r1, #2
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f7ff fd77 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800220e:	2120      	movs	r1, #32
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <setE+0x38>)
 8002212:	f7ff fd73 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f7ff fd6d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002222:	2108      	movs	r1, #8
 8002224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002228:	f7ff fd68 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800222c:	2110      	movs	r1, #16
 800222e:	4802      	ldr	r0, [pc, #8]	; (8002238 <setE+0x38>)
 8002230:	f7ff fd64 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	48000400 	.word	0x48000400

0800223c <setF>:

void setF(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002240:	2102      	movs	r1, #2
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f7ff fd59 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800224a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f7ff fd53 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002256:	2108      	movs	r1, #8
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f7ff fd4e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002260:	2110      	movs	r1, #16
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <setF+0x30>)
 8002264:	f7ff fd4a 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	48000400 	.word	0x48000400

08002270 <setG>:

void setG(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002274:	2102      	movs	r1, #2
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f7ff fd3f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800227e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002286:	f7ff fd39 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800228a:	2120      	movs	r1, #32
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <setG+0x3c>)
 800228e:	f7ff fd35 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f7ff fd2f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800229e:	2108      	movs	r1, #8
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a4:	f7ff fd2a 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	48000400 	.word	0x48000400

080022b0 <setH>:

void setH(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80022b4:	2101      	movs	r1, #1
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f7ff fd1f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f7ff fd19 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f7ff fd13 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022d6:	2108      	movs	r1, #8
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f7ff fd0e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022e0:	2110      	movs	r1, #16
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <setH+0x3c>)
 80022e4:	f7ff fd0a 	bl	8001cfc <LL_GPIO_ResetOutputPin>

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	48000400 	.word	0x48000400

080022f0 <setI>:

void setI(void){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fc:	f7ff fcfe 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002300:	2108      	movs	r1, #8
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f7ff fcf9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <setJ>:

void setJ(void){
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002314:	2101      	movs	r1, #1
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231a:	f7ff fcef 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800231e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f7ff fce9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800232a:	2120      	movs	r1, #32
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <setJ+0x34>)
 800232e:	f7ff fce5 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233a:	f7ff fcdf 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	48000400 	.word	0x48000400

08002348 <setL>:

void setL(void){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800234c:	2120      	movs	r1, #32
 800234e:	4808      	ldr	r0, [pc, #32]	; (8002370 <setL+0x28>)
 8002350:	f7ff fcd4 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235c:	f7ff fcce 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002360:	2108      	movs	r1, #8
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f7ff fcc9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	48000400 	.word	0x48000400

08002374 <setN>:

void setN(void){
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f7ff fcbc 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238c:	f7ff fcb6 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002390:	2110      	movs	r1, #16
 8002392:	4802      	ldr	r0, [pc, #8]	; (800239c <setN+0x28>)
 8002394:	f7ff fcb2 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	48000400 	.word	0x48000400

080023a0 <setO>:

void setO(void){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023a4:	2102      	movs	r1, #2
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f7ff fca7 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023ae:	2101      	movs	r1, #1
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f7ff fca2 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f7ff fc9c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80023c4:	2120      	movs	r1, #32
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <setO+0x48>)
 80023c8:	f7ff fc98 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f7ff fc92 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023d8:	2108      	movs	r1, #8
 80023da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023de:	f7ff fc8d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	48000400 	.word	0x48000400

080023ec <setP>:

void setP(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023f0:	2102      	movs	r1, #2
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f6:	f7ff fc81 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023fa:	2101      	movs	r1, #1
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f7ff fc7c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f7ff fc76 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002410:	2108      	movs	r1, #8
 8002412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002416:	f7ff fc71 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800241a:	2110      	movs	r1, #16
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <setP+0x3c>)
 800241e:	f7ff fc6d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	48000400 	.word	0x48000400

0800242c <setQ>:

void setQ(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002430:	2102      	movs	r1, #2
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f7ff fc61 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800243a:	2101      	movs	r1, #1
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002440:	f7ff fc5c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f7ff fc56 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002450:	2108      	movs	r1, #8
 8002452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002456:	f7ff fc51 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800245a:	2110      	movs	r1, #16
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <setQ+0x3c>)
 800245e:	f7ff fc4d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	48000400 	.word	0x48000400

0800246c <setR>:

void setR(void){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002478:	f7ff fc40 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800247c:	2110      	movs	r1, #16
 800247e:	4802      	ldr	r0, [pc, #8]	; (8002488 <setR+0x1c>)
 8002480:	f7ff fc3c 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	48000400 	.word	0x48000400

0800248c <setS>:

void setS(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002490:	2102      	movs	r1, #2
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f7ff fc31 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800249a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a2:	f7ff fc2b 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024a6:	2120      	movs	r1, #32
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <setS+0x38>)
 80024aa:	f7ff fc27 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024ae:	2108      	movs	r1, #8
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f7ff fc22 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024b8:	2110      	movs	r1, #16
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <setS+0x38>)
 80024bc:	f7ff fc1e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	48000400 	.word	0x48000400

080024c8 <setT>:

void setT(void){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024cc:	2120      	movs	r1, #32
 80024ce:	480a      	ldr	r0, [pc, #40]	; (80024f8 <setT+0x30>)
 80024d0:	f7ff fc14 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f7ff fc0e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024e0:	2108      	movs	r1, #8
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f7ff fc09 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024ea:	2110      	movs	r1, #16
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <setT+0x30>)
 80024ee:	f7ff fc05 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	48000400 	.word	0x48000400

080024fc <setU>:

void setU(void){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002500:	2101      	movs	r1, #1
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f7ff fbf9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800250a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f7ff fbf3 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002516:	2120      	movs	r1, #32
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <setU+0x3c>)
 800251a:	f7ff fbef 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800251e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f7ff fbe9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800252a:	2108      	movs	r1, #8
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f7ff fbe4 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	48000400 	.word	0x48000400

0800253c <setY>:

void setY(void){
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002540:	2101      	movs	r1, #1
 8002542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002546:	f7ff fbd9 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800254a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800254e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002552:	f7ff fbd3 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002556:	2120      	movs	r1, #32
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <setY+0x38>)
 800255a:	f7ff fbcf 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800255e:	2108      	movs	r1, #8
 8002560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002564:	f7ff fbca 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002568:	2110      	movs	r1, #16
 800256a:	4802      	ldr	r0, [pc, #8]	; (8002574 <setY+0x38>)
 800256c:	f7ff fbc6 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	48000400 	.word	0x48000400

08002578 <setK>:

void setK(void){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	// B,C,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800257c:	2101      	movs	r1, #1
 800257e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002582:	f7ff fbbb 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258e:	f7ff fbb5 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002592:	2110      	movs	r1, #16
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <setK+0x28>)
 8002596:	f7ff fbb1 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	48000400 	.word	0x48000400

080025a4 <setM>:

void setM(void){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	// A,C,E
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80025a8:	2102      	movs	r1, #2
 80025aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ae:	f7ff fba5 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ba:	f7ff fb9f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f7ff fb99 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <setV>:

void setV(void){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80025d4:	2101      	movs	r1, #1
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f7ff fb8f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025de:	2120      	movs	r1, #32
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <setV+0x24>)
 80025e2:	f7ff fb8b 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025e6:	2108      	movs	r1, #8
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ec:	f7ff fb86 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	48000400 	.word	0x48000400

080025f8 <setW>:

void setW(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025fc:	2108      	movs	r1, #8
 80025fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002602:	f7ff fb7b 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002606:	2120      	movs	r1, #32
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <setW+0x44>)
 800260a:	f7ff fb77 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800260e:	2110      	movs	r1, #16
 8002610:	480a      	ldr	r0, [pc, #40]	; (800263c <setW+0x44>)
 8002612:	f7ff fb73 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261e:	f7ff fb6d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262a:	f7ff fb67 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800262e:	2101      	movs	r1, #1
 8002630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002634:	f7ff fb62 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	48000400 	.word	0x48000400

08002640 <setX>:

void setX(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	// A,D,G
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002644:	2102      	movs	r1, #2
 8002646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264a:	f7ff fb57 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800264e:	2120      	movs	r1, #32
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <setX+0x24>)
 8002652:	f7ff fb53 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002656:	2110      	movs	r1, #16
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <setX+0x24>)
 800265a:	f7ff fb4f 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	48000400 	.word	0x48000400

08002668 <setZ>:

void setZ(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	// B,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800266c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f7ff fb42 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002678:	2101      	movs	r1, #1
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f7ff fb3d 	bl	8001cfc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002682:	2110      	movs	r1, #16
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <setZ+0x28>)
 8002686:	f7ff fb39 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	48000400 	.word	0x48000400

08002694 <set_>:

void set_(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002698:	2120      	movs	r1, #32
 800269a:	4802      	ldr	r0, [pc, #8]	; (80026a4 <set_+0x10>)
 800269c:	f7ff fb2e 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	48000400 	.word	0x48000400

080026a8 <set_minus>:

void set_minus(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	// G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026ac:	2110      	movs	r1, #16
 80026ae:	4802      	ldr	r0, [pc, #8]	; (80026b8 <set_minus+0x10>)
 80026b0:	f7ff fb24 	bl	8001cfc <LL_GPIO_ResetOutputPin>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	48000400 	.word	0x48000400

080026bc <displayString>:
	        i++;
	    }
	}
}

void displayString(uint8_t str[4]){
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    dDisplayData.digit_num = 4;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <displayString+0x54>)
 80026c6:	2204      	movs	r2, #4
 80026c8:	711a      	strb	r2, [r3, #4]
    dDisplayData.negative = 0;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <displayString+0x54>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	715a      	strb	r2, [r3, #5]
    dDisplayData.resolution = 0;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <displayString+0x54>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	719a      	strb	r2, [r3, #6]

    int j = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 80026da:	2303      	movs	r3, #3
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	e00e      	b.n	80026fe <displayString+0x42>
        dDisplayData.digit[i] = str[j];
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	7819      	ldrb	r1, [r3, #0]
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <displayString+0x54>)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	460a      	mov	r2, r1
 80026f0:	701a      	strb	r2, [r3, #0]
        j++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
    for (int i = 3; i>=0; i--){
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	daed      	bge.n	80026e0 <displayString+0x24>
    }
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	2000008c 	.word	0x2000008c

08002714 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d823      	bhi.n	800276c <setDigit+0x58>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <setDigit+0x18>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002749 	.word	0x08002749
 8002734:	08002757 	.word	0x08002757
 8002738:	08002763 	.word	0x08002763
	{
		case 0:
			DIGIT_4_ON;
 800273c:	2104      	movs	r1, #4
 800273e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002742:	f7ff facd 	bl	8001ce0 <LL_GPIO_SetOutputPin>
			break;
 8002746:	e011      	b.n	800276c <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8002748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f7ff fac6 	bl	8001ce0 <LL_GPIO_SetOutputPin>
			break;
 8002754:	e00a      	b.n	800276c <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 8002756:	2110      	movs	r1, #16
 8002758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275c:	f7ff fac0 	bl	8001ce0 <LL_GPIO_SetOutputPin>
			break;
 8002760:	e004      	b.n	800276c <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 8002762:	2101      	movs	r1, #1
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <setDigit+0x60>)
 8002766:	f7ff fabb 	bl	8001ce0 <LL_GPIO_SetOutputPin>
			break;
 800276a:	bf00      	nop
	}
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	48000400 	.word	0x48000400

08002778 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	e1d4      	b.n	8002b2e <updateDisplay+0x3b6>
	{
		switch(dDisplayData.digit[i])
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4ad4      	ldr	r2, [pc, #848]	; (8002ad8 <updateDisplay+0x360>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	3b2d      	subs	r3, #45	; 0x2d
 800278c:	2b4d      	cmp	r3, #77	; 0x4d
 800278e:	f200 81ac 	bhi.w	8002aea <updateDisplay+0x372>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <updateDisplay+0x20>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	08002add 	.word	0x08002add
 800279c:	08002aeb 	.word	0x08002aeb
 80027a0:	08002aeb 	.word	0x08002aeb
 80027a4:	080028d1 	.word	0x080028d1
 80027a8:	080028df 	.word	0x080028df
 80027ac:	080028ed 	.word	0x080028ed
 80027b0:	080028fb 	.word	0x080028fb
 80027b4:	08002909 	.word	0x08002909
 80027b8:	08002917 	.word	0x08002917
 80027bc:	08002925 	.word	0x08002925
 80027c0:	08002933 	.word	0x08002933
 80027c4:	08002941 	.word	0x08002941
 80027c8:	0800294f 	.word	0x0800294f
 80027cc:	08002aeb 	.word	0x08002aeb
 80027d0:	08002aeb 	.word	0x08002aeb
 80027d4:	08002aeb 	.word	0x08002aeb
 80027d8:	08002aeb 	.word	0x08002aeb
 80027dc:	08002aeb 	.word	0x08002aeb
 80027e0:	08002aeb 	.word	0x08002aeb
 80027e4:	08002aeb 	.word	0x08002aeb
 80027e8:	08002aeb 	.word	0x08002aeb
 80027ec:	08002aeb 	.word	0x08002aeb
 80027f0:	08002aeb 	.word	0x08002aeb
 80027f4:	08002aeb 	.word	0x08002aeb
 80027f8:	08002aeb 	.word	0x08002aeb
 80027fc:	08002aeb 	.word	0x08002aeb
 8002800:	08002aeb 	.word	0x08002aeb
 8002804:	08002aeb 	.word	0x08002aeb
 8002808:	08002aeb 	.word	0x08002aeb
 800280c:	08002aeb 	.word	0x08002aeb
 8002810:	08002aeb 	.word	0x08002aeb
 8002814:	08002aeb 	.word	0x08002aeb
 8002818:	08002aeb 	.word	0x08002aeb
 800281c:	08002aeb 	.word	0x08002aeb
 8002820:	08002aeb 	.word	0x08002aeb
 8002824:	08002aeb 	.word	0x08002aeb
 8002828:	08002aeb 	.word	0x08002aeb
 800282c:	08002aeb 	.word	0x08002aeb
 8002830:	08002aeb 	.word	0x08002aeb
 8002834:	08002aeb 	.word	0x08002aeb
 8002838:	08002aeb 	.word	0x08002aeb
 800283c:	08002aeb 	.word	0x08002aeb
 8002840:	08002aeb 	.word	0x08002aeb
 8002844:	08002aeb 	.word	0x08002aeb
 8002848:	08002aeb 	.word	0x08002aeb
 800284c:	08002aeb 	.word	0x08002aeb
 8002850:	08002aeb 	.word	0x08002aeb
 8002854:	08002aeb 	.word	0x08002aeb
 8002858:	08002aeb 	.word	0x08002aeb
 800285c:	08002aeb 	.word	0x08002aeb
 8002860:	08002ac9 	.word	0x08002ac9
 8002864:	08002aeb 	.word	0x08002aeb
 8002868:	0800295d 	.word	0x0800295d
 800286c:	0800296b 	.word	0x0800296b
 8002870:	08002979 	.word	0x08002979
 8002874:	08002987 	.word	0x08002987
 8002878:	08002995 	.word	0x08002995
 800287c:	080029a3 	.word	0x080029a3
 8002880:	080029b1 	.word	0x080029b1
 8002884:	080029bf 	.word	0x080029bf
 8002888:	080029cd 	.word	0x080029cd
 800288c:	080029db 	.word	0x080029db
 8002890:	080029e9 	.word	0x080029e9
 8002894:	080029f7 	.word	0x080029f7
 8002898:	08002a05 	.word	0x08002a05
 800289c:	08002a13 	.word	0x08002a13
 80028a0:	08002a21 	.word	0x08002a21
 80028a4:	08002a2f 	.word	0x08002a2f
 80028a8:	08002a3d 	.word	0x08002a3d
 80028ac:	08002a4b 	.word	0x08002a4b
 80028b0:	08002a59 	.word	0x08002a59
 80028b4:	08002a67 	.word	0x08002a67
 80028b8:	08002a75 	.word	0x08002a75
 80028bc:	08002a83 	.word	0x08002a83
 80028c0:	08002a91 	.word	0x08002a91
 80028c4:	08002a9f 	.word	0x08002a9f
 80028c8:	08002aad 	.word	0x08002aad
 80028cc:	08002abb 	.word	0x08002abb
		{
			case 48:
			  setDigit(i);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff1e 	bl	8002714 <setDigit>
			  setZero();
 80028d8:	f7ff fbec 	bl	80020b4 <setZero>
			  break;
 80028dc:	e105      	b.n	8002aea <updateDisplay+0x372>
			case 49:
			  setDigit(i);
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff17 	bl	8002714 <setDigit>
			  setOne();
 80028e6:	f7ff fadf 	bl	8001ea8 <setOne>
			  break;
 80028ea:	e0fe      	b.n	8002aea <updateDisplay+0x372>
			case 50:
			  setDigit(i);
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff10 	bl	8002714 <setDigit>
			  setTwo();
 80028f4:	f7ff fae8 	bl	8001ec8 <setTwo>
			  break;
 80028f8:	e0f7      	b.n	8002aea <updateDisplay+0x372>
			case 51:
			  setDigit(i);
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff09 	bl	8002714 <setDigit>
			  setThree();
 8002902:	f7ff faff 	bl	8001f04 <setThree>
			  break;
 8002906:	e0f0      	b.n	8002aea <updateDisplay+0x372>
			case 52:
			  setDigit(i);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff02 	bl	8002714 <setDigit>
			  setFour();
 8002910:	f7ff fb16 	bl	8001f40 <setFour>
			  break;
 8002914:	e0e9      	b.n	8002aea <updateDisplay+0x372>
			case 53:
			  setDigit(i);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fefb 	bl	8002714 <setDigit>
			  setFive();
 800291e:	f7ff fb29 	bl	8001f74 <setFive>
			  break;
 8002922:	e0e2      	b.n	8002aea <updateDisplay+0x372>
			case 54:
			  setDigit(i);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fef4 	bl	8002714 <setDigit>
			  setSix();
 800292c:	f7ff fb40 	bl	8001fb0 <setSix>
			  break;
 8002930:	e0db      	b.n	8002aea <updateDisplay+0x372>
			case 55:
			  setDigit(i);
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff feed 	bl	8002714 <setDigit>
			  setSeven();
 800293a:	f7ff fb5d 	bl	8001ff8 <setSeven>
			  break;
 800293e:	e0d4      	b.n	8002aea <updateDisplay+0x372>
			case 56:
			  setDigit(i);
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fee6 	bl	8002714 <setDigit>
			  setEight();
 8002948:	f7ff fb6a 	bl	8002020 <setEight>
			  break;
 800294c:	e0cd      	b.n	8002aea <updateDisplay+0x372>
			case 57:
			  setDigit(i);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fedf 	bl	8002714 <setDigit>
			  setNine();
 8002956:	f7ff fb8d 	bl	8002074 <setNine>
			  break;
 800295a:	e0c6      	b.n	8002aea <updateDisplay+0x372>

			// Letters - ASCII code of small letter

			case 97:
			  setDigit(i);
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fed8 	bl	8002714 <setDigit>
			  setA();
 8002964:	f7ff fbcc 	bl	8002100 <setA>
			  break;
 8002968:	e0bf      	b.n	8002aea <updateDisplay+0x372>
			case 98:
			  setDigit(i);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fed1 	bl	8002714 <setDigit>
		      setB();
 8002972:	f7ff fbeb 	bl	800214c <setB>
		      break;
 8002976:	e0b8      	b.n	8002aea <updateDisplay+0x372>
			case 99:
			  setDigit(i);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff feca 	bl	8002714 <setDigit>
			  setC();
 8002980:	f7ff fc04 	bl	800218c <setC>
			  break;
 8002984:	e0b1      	b.n	8002aea <updateDisplay+0x372>
			case 100:
			  setDigit(i);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fec3 	bl	8002714 <setDigit>
			  setD();
 800298e:	f7ff fc17 	bl	80021c0 <setD>
		      break;
 8002992:	e0aa      	b.n	8002aea <updateDisplay+0x372>
			case 101:
			  setDigit(i);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff febc 	bl	8002714 <setDigit>
		      setE();
 800299c:	f7ff fc30 	bl	8002200 <setE>
		      break;
 80029a0:	e0a3      	b.n	8002aea <updateDisplay+0x372>
			case 102:
			  setDigit(i);
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff feb5 	bl	8002714 <setDigit>
			  setF();
 80029aa:	f7ff fc47 	bl	800223c <setF>
			  break;
 80029ae:	e09c      	b.n	8002aea <updateDisplay+0x372>
			case 103:
			  setDigit(i);
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff feae 	bl	8002714 <setDigit>
			  setG();
 80029b8:	f7ff fc5a 	bl	8002270 <setG>
			  break;
 80029bc:	e095      	b.n	8002aea <updateDisplay+0x372>
			case 104:
			  setDigit(i);
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fea7 	bl	8002714 <setDigit>
			  setH();
 80029c6:	f7ff fc73 	bl	80022b0 <setH>
			  break;
 80029ca:	e08e      	b.n	8002aea <updateDisplay+0x372>
			case 105:
			  setDigit(i);
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fea0 	bl	8002714 <setDigit>
			  setI();
 80029d4:	f7ff fc8c 	bl	80022f0 <setI>
			  break;
 80029d8:	e087      	b.n	8002aea <updateDisplay+0x372>
			case 106:
			  setDigit(i);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fe99 	bl	8002714 <setDigit>
			  setJ();
 80029e2:	f7ff fc95 	bl	8002310 <setJ>
			  break;
 80029e6:	e080      	b.n	8002aea <updateDisplay+0x372>
			case 107:
			  setDigit(i);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fe92 	bl	8002714 <setDigit>
			  setK();
 80029f0:	f7ff fdc2 	bl	8002578 <setK>
			  break;
 80029f4:	e079      	b.n	8002aea <updateDisplay+0x372>
			case 108:
			  setDigit(i);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe8b 	bl	8002714 <setDigit>
			  setL();
 80029fe:	f7ff fca3 	bl	8002348 <setL>
			  break;
 8002a02:	e072      	b.n	8002aea <updateDisplay+0x372>
			case 109:
			  setDigit(i);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fe84 	bl	8002714 <setDigit>
			  setM();
 8002a0c:	f7ff fdca 	bl	80025a4 <setM>
			  break;
 8002a10:	e06b      	b.n	8002aea <updateDisplay+0x372>
			case 110:
			  setDigit(i);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe7d 	bl	8002714 <setDigit>
			  setN();
 8002a1a:	f7ff fcab 	bl	8002374 <setN>
			  break;
 8002a1e:	e064      	b.n	8002aea <updateDisplay+0x372>
			case 111:
			  setDigit(i);
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fe76 	bl	8002714 <setDigit>
			  setO();
 8002a28:	f7ff fcba 	bl	80023a0 <setO>
			  break;
 8002a2c:	e05d      	b.n	8002aea <updateDisplay+0x372>
			case 112:
			  setDigit(i);
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe6f 	bl	8002714 <setDigit>
			  setP();
 8002a36:	f7ff fcd9 	bl	80023ec <setP>
			  break;
 8002a3a:	e056      	b.n	8002aea <updateDisplay+0x372>
			case 113:
    		  setDigit(i);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fe68 	bl	8002714 <setDigit>
    		  setQ();
 8002a44:	f7ff fcf2 	bl	800242c <setQ>
    		  break;
 8002a48:	e04f      	b.n	8002aea <updateDisplay+0x372>
			case 114:
			  setDigit(i);
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe61 	bl	8002714 <setDigit>
			  setR();
 8002a52:	f7ff fd0b 	bl	800246c <setR>
			  break;
 8002a56:	e048      	b.n	8002aea <updateDisplay+0x372>
			case 115:
			  setDigit(i);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fe5a 	bl	8002714 <setDigit>
			  setS();
 8002a60:	f7ff fd14 	bl	800248c <setS>
			  break;
 8002a64:	e041      	b.n	8002aea <updateDisplay+0x372>
			case 116:
			  setDigit(i);
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe53 	bl	8002714 <setDigit>
			  setT();
 8002a6e:	f7ff fd2b 	bl	80024c8 <setT>
			  break;
 8002a72:	e03a      	b.n	8002aea <updateDisplay+0x372>
			case 117:
     		  setDigit(i);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe4c 	bl	8002714 <setDigit>
     		  setU();
 8002a7c:	f7ff fd3e 	bl	80024fc <setU>
     		  break;
 8002a80:	e033      	b.n	8002aea <updateDisplay+0x372>
			case 118:
			  setDigit(i);
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe45 	bl	8002714 <setDigit>
			  setV();
 8002a8a:	f7ff fda1 	bl	80025d0 <setV>
			  break;
 8002a8e:	e02c      	b.n	8002aea <updateDisplay+0x372>
			case 119:
			  setDigit(i);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fe3e 	bl	8002714 <setDigit>
			  setW();
 8002a98:	f7ff fdae 	bl	80025f8 <setW>
			  break;
 8002a9c:	e025      	b.n	8002aea <updateDisplay+0x372>
			case 120:
			  setDigit(i);
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fe37 	bl	8002714 <setDigit>
			  setX();
 8002aa6:	f7ff fdcb 	bl	8002640 <setX>
			  break;
 8002aaa:	e01e      	b.n	8002aea <updateDisplay+0x372>
			case 121:
			  setDigit(i);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe30 	bl	8002714 <setDigit>
			  setY();
 8002ab4:	f7ff fd42 	bl	800253c <setY>
			  break;
 8002ab8:	e017      	b.n	8002aea <updateDisplay+0x372>
			case 122:
			  setDigit(i);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fe29 	bl	8002714 <setDigit>
			  setZ();
 8002ac2:	f7ff fdd1 	bl	8002668 <setZ>
			  break;
 8002ac6:	e010      	b.n	8002aea <updateDisplay+0x372>
			case 95:
    		  setDigit(i);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fe22 	bl	8002714 <setDigit>
    		  set_();
 8002ad0:	f7ff fde0 	bl	8002694 <set_>
    		  break;
 8002ad4:	e009      	b.n	8002aea <updateDisplay+0x372>
 8002ad6:	bf00      	nop
 8002ad8:	2000008c 	.word	0x2000008c
			case 45:
			  setDigit(i);
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe18 	bl	8002714 <setDigit>
			  set_minus();
 8002ae4:	f7ff fde0 	bl	80026a8 <set_minus>
			  break;
 8002ae8:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <updateDisplay+0x3c8>)
 8002aec:	799b      	ldrb	r3, [r3, #6]
 8002aee:	79fa      	ldrb	r2, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d101      	bne.n	8002af8 <updateDisplay+0x380>
		{
			setDecimalPoint();
 8002af4:	f7ff f9ce 	bl	8001e94 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <updateDisplay+0x3cc>)
 8002afa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <updateDisplay+0x3d0>)
 8002b00:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8002b04:	bf00      	nop
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <updateDisplay+0x3d0>)
 8002b08:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002b0c:	1c8b      	adds	r3, r1, #2
 8002b0e:	f142 0400 	adc.w	r4, r2, #0
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <updateDisplay+0x3cc>)
 8002b14:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002b18:	42a2      	cmp	r2, r4
 8002b1a:	bf08      	it	eq
 8002b1c:	4299      	cmpeq	r1, r3
 8002b1e:	d3f2      	bcc.n	8002b06 <updateDisplay+0x38e>

		resetDigits();
 8002b20:	f7ff f978 	bl	8001e14 <resetDigits>
		resetSegments();
 8002b24:	f7ff f91a 	bl	8001d5c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	f67f ae27 	bls.w	8002784 <updateDisplay+0xc>
	}
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000008c 	.word	0x2000008c
 8002b44:	20000098 	.word	0x20000098
 8002b48:	200000a0 	.word	0x200000a0

08002b4c <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002b50:	4806      	ldr	r0, [pc, #24]	; (8002b6c <TIM3_IRQHandler+0x20>)
 8002b52:	f7ff f8ef 	bl	8001d34 <LL_TIM_IsActiveFlag_UPDATE>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002b5c:	f7ff fe0c 	bl	8002778 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM3_IRQHandler+0x20>)
 8002b62:	f7ff f8d9 	bl	8001d18 <LL_TIM_ClearFlag_UPDATE>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40000400 	.word	0x40000400

08002b70 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <NVIC_GetPriorityGrouping+0x18>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0307 	and.w	r3, r3, #7
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <NVIC_EnableIRQ+0x30>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	da0b      	bge.n	8002bec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <NVIC_SetPriority+0x4c>)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	3b04      	subs	r3, #4
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bea:	e009      	b.n	8002c00 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <NVIC_SetPriority+0x50>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	4907      	ldr	r1, [pc, #28]	; (8002ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40021000 	.word	0x40021000

08002cac <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <LL_SYSCFG_SetEXTISource+0x54>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	ea02 0103 	and.w	r1, r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <LL_SYSCFG_SetEXTISource+0x54>)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	430a      	orrs	r2, r1
 8002cec:	3302      	adds	r3, #2
 8002cee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000

08002d04 <LL_GPIO_SetPinMode>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2103      	movs	r1, #3
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	401a      	ands	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_GPIO_SetPinPull>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b089      	sub	sp, #36	; 0x24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	613b      	str	r3, [r7, #16]
  return(result);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2103      	movs	r1, #3
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_GPIO_ResetOutputPin>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002df6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dfa:	f7ff ff3f 	bl	8002c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002dfe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e02:	f7ff ff3b 	bl	8002c7c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002e06:	f640 111b 	movw	r1, #2331	; 0x91b
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0e:	f7ff ffd3 	bl	8002db8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8002e12:	2132      	movs	r1, #50	; 0x32
 8002e14:	482b      	ldr	r0, [pc, #172]	; (8002ec4 <MX_GPIO_Init+0xf0>)
 8002e16:	f7ff ffcf 	bl	8002db8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8002e1a:	f641 139f 	movw	r3, #6559	; 0x199f
 8002e1e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e20:	2301      	movs	r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e38:	f7fe f995 	bl	8001166 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 8002e3c:	2333      	movs	r3, #51	; 0x33
 8002e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e40:	2301      	movs	r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	481b      	ldr	r0, [pc, #108]	; (8002ec4 <MX_GPIO_Init+0xf0>)
 8002e56:	f7fe f986 	bl	8001166 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8002e5a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7ff ff24 	bl	8002cac <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8002e64:	2201      	movs	r2, #1
 8002e66:	2108      	movs	r1, #8
 8002e68:	4816      	ldr	r0, [pc, #88]	; (8002ec4 <MX_GPIO_Init+0xf0>)
 8002e6a:	f7ff ff78 	bl	8002d5e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2108      	movs	r1, #8
 8002e72:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <MX_GPIO_Init+0xf0>)
 8002e74:	f7ff ff46 	bl	8002d04 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff82 	bl	8000da0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002e9c:	f7ff fe68 	bl	8002b70 <NVIC_GetPriorityGrouping>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff feb4 	bl	8002c14 <NVIC_EncodePriority>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4619      	mov	r1, r3
 8002eb0:	2009      	movs	r0, #9
 8002eb2:	f7ff fe85 	bl	8002bc0 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002eb6:	2009      	movs	r0, #9
 8002eb8:	f7ff fe68 	bl	8002b8c <NVIC_EnableIRQ>

}
 8002ebc:	bf00      	nop
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	48000400 	.word	0x48000400

08002ec8 <NVIC_GetPriorityGrouping>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EnableIRQ>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <NVIC_EnableIRQ+0x30>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <NVIC_SetPriority>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da0b      	bge.n	8002f44 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <NVIC_SetPriority+0x4c>)
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	3b04      	subs	r3, #4
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	761a      	strb	r2, [r3, #24]
}
 8002f42:	e009      	b.n	8002f58 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4907      	ldr	r1, [pc, #28]	; (8002f68 <NVIC_SetPriority+0x50>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <NVIC_EncodePriority>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_I2C_Enable>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_I2C_EnableClockStretching>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_I2C_DisableGeneralCall>:
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_I2C_SetOwnAddress2>:
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003046:	f023 0306 	bic.w	r3, r3, #6
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	430a      	orrs	r2, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	60da      	str	r2, [r3, #12]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_I2C_DisableOwnAddress2>:
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60da      	str	r2, [r3, #12]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_I2C_EnableIT_RX>:
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_I2C_DisableIT_RX>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0204 	bic.w	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_I2C_IsActiveFlag_TXIS>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_I2C_IsActiveFlag_RXNE>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_I2C_IsActiveFlag_STOP>:
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_I2C_ClearFlag_STOP>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	61da      	str	r2, [r3, #28]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_I2C_EnableAutoEndMode>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	0d5b      	lsrs	r3, r3, #21
 800318a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <LL_I2C_HandleTransfer+0x48>)
 8003190:	430b      	orrs	r3, r1
 8003192:	43db      	mvns	r3, r3
 8003194:	401a      	ands	r2, r3
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4319      	orrs	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	4319      	orrs	r1, r3
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4319      	orrs	r1, r3
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	03ff7bff 	.word	0x03ff7bff

080031c0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_AHB1_GRP1_EnableClock>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4313      	orrs	r3, r2
 800320a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4013      	ands	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40021000 	.word	0x40021000

08003228 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4313      	orrs	r3, r2
 800323a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <LL_APB1_GRP1_EnableClock+0x2c>)
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40021000 	.word	0x40021000

08003258 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08e      	sub	sp, #56	; 0x38
 800325c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	615a      	str	r2, [r3, #20]
 8003270:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003282:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003286:	f7ff ffb7 	bl	80031f8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800328e:	2302      	movs	r3, #2
 8003290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003292:	2303      	movs	r3, #3
 8003294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003296:	2301      	movs	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800329a:	2301      	movs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800329e:	2304      	movs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <MX_I2C1_Init+0xd4>)
 80032a8:	f7fd ff5d 	bl	8001166 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80032ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032b0:	f7ff ffba 	bl	8003228 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032b4:	f7ff fe08 	bl	8002ec8 <NVIC_GetPriorityGrouping>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fe54 	bl	8002f6c <NVIC_EncodePriority>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4619      	mov	r1, r3
 80032c8:	201f      	movs	r0, #31
 80032ca:	f7ff fe25 	bl	8002f18 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032ce:	201f      	movs	r0, #31
 80032d0:	f7ff fe08 	bl	8002ee4 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80032d4:	4816      	ldr	r0, [pc, #88]	; (8003330 <MX_I2C1_Init+0xd8>)
 80032d6:	f7ff ff3d 	bl	8003154 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80032da:	4815      	ldr	r0, [pc, #84]	; (8003330 <MX_I2C1_Init+0xd8>)
 80032dc:	f7ff fec1 	bl	8003062 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80032e0:	4813      	ldr	r0, [pc, #76]	; (8003330 <MX_I2C1_Init+0xd8>)
 80032e2:	f7ff fe96 	bl	8003012 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80032e6:	4812      	ldr	r0, [pc, #72]	; (8003330 <MX_I2C1_Init+0xd8>)
 80032e8:	f7ff fe83 	bl	8002ff2 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <MX_I2C1_Init+0xdc>)
 80032f2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80032fc:	2302      	movs	r3, #2
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003300:	2300      	movs	r3, #0
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003304:	2300      	movs	r3, #0
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	4619      	mov	r1, r3
 800330e:	4808      	ldr	r0, [pc, #32]	; (8003330 <MX_I2C1_Init+0xd8>)
 8003310:	f7fe f846 	bl	80013a0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <MX_I2C1_Init+0xd8>)
 800331a:	f7ff fe8a 	bl	8003032 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800331e:	4804      	ldr	r0, [pc, #16]	; (8003330 <MX_I2C1_Init+0xd8>)
 8003320:	f7ff fe57 	bl	8002fd2 <LL_I2C_Enable>
}
 8003324:	bf00      	nop
 8003326:	3738      	adds	r7, #56	; 0x38
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	48000400 	.word	0x48000400
 8003330:	40005400 	.word	0x40005400
 8003334:	2000090e 	.word	0x2000090e

08003338 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b085      	sub	sp, #20
 800333c:	af02      	add	r7, sp, #8
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4623      	mov	r3, r4
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	4603      	mov	r3, r0
 800334c:	71bb      	strb	r3, [r7, #6]
 800334e:	460b      	mov	r3, r1
 8003350:	717b      	strb	r3, [r7, #5]
 8003352:	4613      	mov	r3, r2
 8003354:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8003356:	793b      	ldrb	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800335c:	79bb      	ldrb	r3, [r7, #6]
 800335e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003362:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003364:	7979      	ldrb	r1, [r7, #5]
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <i2c_master_write+0x80>)
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2302      	movs	r3, #2
 8003372:	2200      	movs	r2, #0
 8003374:	4811      	ldr	r0, [pc, #68]	; (80033bc <i2c_master_write+0x84>)
 8003376:	f7ff fefd 	bl	8003174 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	4619      	mov	r1, r3
 800337e:	480f      	ldr	r0, [pc, #60]	; (80033bc <i2c_master_write+0x84>)
 8003380:	f7ff ff2b 	bl	80031da <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003384:	e00a      	b.n	800339c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003386:	480d      	ldr	r0, [pc, #52]	; (80033bc <i2c_master_write+0x84>)
 8003388:	f7ff fe9b 	bl	80030c2 <LL_I2C_IsActiveFlag_TXIS>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4619      	mov	r1, r3
 8003396:	4809      	ldr	r0, [pc, #36]	; (80033bc <i2c_master_write+0x84>)
 8003398:	f7ff ff1f 	bl	80031da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800339c:	4807      	ldr	r0, [pc, #28]	; (80033bc <i2c_master_write+0x84>)
 800339e:	f7ff feb6 	bl	800310e <LL_I2C_IsActiveFlag_STOP>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ee      	beq.n	8003386 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <i2c_master_write+0x84>)
 80033aa:	f7ff fec3 	bl	8003134 <LL_I2C_ClearFlag_STOP>
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	80002000 	.word	0x80002000
 80033bc:	40005400 	.word	0x40005400

080033c0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	70fb      	strb	r3, [r7, #3]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70bb      	strb	r3, [r7, #2]
 80033d6:	4613      	mov	r3, r2
 80033d8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80033da:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <i2c_master_read+0xe0>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80033e0:	7c3b      	ldrb	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80033e6:	78bb      	ldrb	r3, [r7, #2]
 80033e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033ec:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80033ee:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <i2c_master_read+0xe4>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80033f4:	482c      	ldr	r0, [pc, #176]	; (80034a8 <i2c_master_read+0xe8>)
 80033f6:	f7ff fe44 	bl	8003082 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80033fa:	7879      	ldrb	r1, [r7, #1]
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <i2c_master_read+0xec>)
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2301      	movs	r3, #1
 8003408:	2200      	movs	r2, #0
 800340a:	4827      	ldr	r0, [pc, #156]	; (80034a8 <i2c_master_read+0xe8>)
 800340c:	f7ff feb2 	bl	8003174 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003410:	e00a      	b.n	8003428 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003412:	4825      	ldr	r0, [pc, #148]	; (80034a8 <i2c_master_read+0xe8>)
 8003414:	f7ff fe55 	bl	80030c2 <LL_I2C_IsActiveFlag_TXIS>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800341e:	78bb      	ldrb	r3, [r7, #2]
 8003420:	4619      	mov	r1, r3
 8003422:	4821      	ldr	r0, [pc, #132]	; (80034a8 <i2c_master_read+0xe8>)
 8003424:	f7ff fed9 	bl	80031da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003428:	481f      	ldr	r0, [pc, #124]	; (80034a8 <i2c_master_read+0xe8>)
 800342a:	f7ff fe70 	bl	800310e <LL_I2C_IsActiveFlag_STOP>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ee      	beq.n	8003412 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003434:	481c      	ldr	r0, [pc, #112]	; (80034a8 <i2c_master_read+0xe8>)
 8003436:	f7ff fe7d 	bl	8003134 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800343a:	bf00      	nop
 800343c:	481a      	ldr	r0, [pc, #104]	; (80034a8 <i2c_master_read+0xe8>)
 800343e:	f7ff fe66 	bl	800310e <LL_I2C_IsActiveFlag_STOP>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f9      	bne.n	800343c <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8003448:	7879      	ldrb	r1, [r7, #1]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <i2c_master_read+0xf0>)
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	2200      	movs	r2, #0
 800345a:	4813      	ldr	r0, [pc, #76]	; (80034a8 <i2c_master_read+0xe8>)
 800345c:	f7ff fe8a 	bl	8003174 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8003460:	bf00      	nop
 8003462:	4811      	ldr	r0, [pc, #68]	; (80034a8 <i2c_master_read+0xe8>)
 8003464:	f7ff fe53 	bl	800310e <LL_I2C_IsActiveFlag_STOP>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f9      	beq.n	8003462 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800346e:	480e      	ldr	r0, [pc, #56]	; (80034a8 <i2c_master_read+0xe8>)
 8003470:	f7ff fe60 	bl	8003134 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <i2c_master_read+0xe8>)
 8003476:	f7ff fe14 	bl	80030a2 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <i2c_master_read+0xe8>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <i2c_master_read+0xe8>)
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <i2c_master_read+0xf4>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <i2c_master_read+0xe4>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8003492:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <i2c_master_read+0xe0>)
 8003494:	681b      	ldr	r3, [r3, #0]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200000ac 	.word	0x200000ac
 80034a4:	200000a8 	.word	0x200000a8
 80034a8:	40005400 	.word	0x40005400
 80034ac:	80002000 	.word	0x80002000
 80034b0:	80002400 	.word	0x80002400
 80034b4:	200000a9 	.word	0x200000a9

080034b8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80034b8:	b598      	push	{r3, r4, r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80034bc:	4812      	ldr	r0, [pc, #72]	; (8003508 <I2C1_EV_IRQHandler+0x50>)
 80034be:	f7ff fe13 	bl	80030e8 <LL_I2C_IsActiveFlag_RXNE>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01c      	beq.n	8003502 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80034c8:	4b10      	ldr	r3, [pc, #64]	; (800350c <I2C1_EV_IRQHandler+0x54>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <I2C1_EV_IRQHandler+0x58>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	b2c8      	uxtb	r0, r1
 80034d6:	490e      	ldr	r1, [pc, #56]	; (8003510 <I2C1_EV_IRQHandler+0x58>)
 80034d8:	7008      	strb	r0, [r1, #0]
 80034da:	18d4      	adds	r4, r2, r3
 80034dc:	480a      	ldr	r0, [pc, #40]	; (8003508 <I2C1_EV_IRQHandler+0x50>)
 80034de:	f7ff fe6f 	bl	80031c0 <LL_I2C_ReceiveData8>
 80034e2:	4603      	mov	r3, r0
 80034e4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <I2C1_EV_IRQHandler+0x58>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b13      	cmp	r3, #19
 80034ee:	d903      	bls.n	80034f8 <I2C1_EV_IRQHandler+0x40>
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <I2C1_EV_IRQHandler+0x58>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e001      	b.n	80034fc <I2C1_EV_IRQHandler+0x44>
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <I2C1_EV_IRQHandler+0x58>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <I2C1_EV_IRQHandler+0x5c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
	}
}
 8003502:	bf00      	nop
 8003504:	bd98      	pop	{r3, r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	40005400 	.word	0x40005400
 800350c:	200000ac 	.word	0x200000ac
 8003510:	200000a9 	.word	0x200000a9
 8003514:	200000a8 	.word	0x200000a8

08003518 <NVIC_SetPriorityGrouping>:
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <NVIC_SetPriorityGrouping+0x44>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003534:	4013      	ands	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354a:	4a04      	ldr	r2, [pc, #16]	; (800355c <NVIC_SetPriorityGrouping+0x44>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	60d3      	str	r3, [r2, #12]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <LL_RCC_HSI_Enable+0x1c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <LL_RCC_HSI_Enable+0x1c>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000

08003580 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <LL_RCC_HSI_IsReady+0x20>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40021000 	.word	0x40021000

080035a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <LL_RCC_SetSysClkSource+0x24>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 0203 	bic.w	r2, r3, #3
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <LL_RCC_SetSysClkSource+0x24>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40021000 	.word	0x40021000

080035f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <LL_RCC_GetSysClkSource+0x18>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 030c 	and.w	r3, r3, #12
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <LL_RCC_SetAHBPrescaler+0x24>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <LL_RCC_SetAHBPrescaler+0x24>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40021000 	.word	0x40021000

0800363c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800364c:	4904      	ldr	r1, [pc, #16]	; (8003660 <LL_RCC_SetAPB1Prescaler+0x24>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40021000 	.word	0x40021000

08003664 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <LL_RCC_SetAPB2Prescaler+0x24>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000

0800368c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <LL_RCC_SetI2CClockSource+0x2c>)
 8003696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036a6:	4904      	ldr	r1, [pc, #16]	; (80036b8 <LL_RCC_SetI2CClockSource+0x2c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	630b      	str	r3, [r1, #48]	; 0x30
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40021000 	.word	0x40021000

080036bc <LL_APB1_GRP1_EnableClock>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	4907      	ldr	r1, [pc, #28]	; (80036e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4013      	ands	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40021000 	.word	0x40021000

080036ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <LL_APB2_GRP1_EnableClock+0x2c>)
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	4907      	ldr	r1, [pc, #28]	; (8003718 <LL_APB2_GRP1_EnableClock+0x2c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40021000 	.word	0x40021000

0800371c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <LL_FLASH_SetLatency+0x24>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 0207 	bic.w	r2, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <LL_FLASH_SetLatency+0x24>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40022000 	.word	0x40022000

08003744 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <LL_FLASH_GetLatency+0x18>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40022000 	.word	0x40022000

08003760 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4013      	ands	r3, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40010400 	.word	0x40010400

0800378c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6153      	str	r3, [r2, #20]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010400 	.word	0x40010400

080037ac <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d106      	bne.n	80037c8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <LL_SYSTICK_SetClkSource+0x34>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <LL_SYSTICK_SetClkSource+0x34>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80037c6:	e005      	b.n	80037d4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <LL_SYSTICK_SetClkSource+0x34>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <LL_SYSTICK_SetClkSource+0x34>)
 80037ce:	f023 0304 	bic.w	r3, r3, #4
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <LL_SYSTICK_EnableIT+0x1c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <LL_SYSTICK_EnableIT+0x1c>)
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <LL_GPIO_IsInputPinSet>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4013      	ands	r3, r2
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <get_altitude>:

extern uint64_t disp_time;
uint64_t saved_time;
double num_to_display = 10;

float get_altitude(int8_t temp, int16_t press){
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	460a      	mov	r2, r1
 800383a:	71fb      	strb	r3, [r7, #7]
 800383c:	4613      	mov	r3, r2
 800383e:	80bb      	strh	r3, [r7, #4]
    double tmp1 = 1013/(double)press;
 8003840:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe11 	bl	800046c <__aeabi_i2d>
 800384a:	4603      	mov	r3, r0
 800384c:	460c      	mov	r4, r1
 800384e:	461a      	mov	r2, r3
 8003850:	4623      	mov	r3, r4
 8003852:	a126      	add	r1, pc, #152	; (adr r1, 80038ec <get_altitude+0xbc>)
 8003854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003858:	f7fc ff9c 	bl	8000794 <__aeabi_ddiv>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	e9c7 3406 	strd	r3, r4, [r7, #24]
    double tmp2 = pow(tmp1, (1/5.257));
 8003864:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80038d8 <get_altitude+0xa8>
 8003868:	ed97 0b06 	vldr	d0, [r7, #24]
 800386c:	f000 fdf6 	bl	800445c <pow>
 8003870:	ed87 0b04 	vstr	d0, [r7, #16]
    float alti = ((tmp2 - 1)*(temp + 273))/0.0065; // Vypocet nadmorskej vysky
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <get_altitude+0xb8>)
 800387a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800387e:	f7fc fca7 	bl	80001d0 <__aeabi_dsub>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	4625      	mov	r5, r4
 8003888:	461c      	mov	r4, r3
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fdea 	bl	800046c <__aeabi_i2d>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fe4e 	bl	8000540 <__aeabi_dmul>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4618      	mov	r0, r3
 80038aa:	4621      	mov	r1, r4
 80038ac:	a30c      	add	r3, pc, #48	; (adr r3, 80038e0 <get_altitude+0xb0>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc ff6f 	bl	8000794 <__aeabi_ddiv>
 80038b6:	4603      	mov	r3, r0
 80038b8:	460c      	mov	r4, r1
 80038ba:	4618      	mov	r0, r3
 80038bc:	4621      	mov	r1, r4
 80038be:	f7fd f8ef 	bl	8000aa0 <__aeabi_d2f>
 80038c2:	4603      	mov	r3, r0
 80038c4:	60fb      	str	r3, [r7, #12]
    return alti;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	ee07 3a90 	vmov	s15, r3
}
 80038cc:	eeb0 0a67 	vmov.f32	s0, s15
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bdb0      	pop	{r4, r5, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	7dee2d4a 	.word	0x7dee2d4a
 80038dc:	3fc85936 	.word	0x3fc85936
 80038e0:	76c8b439 	.word	0x76c8b439
 80038e4:	3f7a9fbe 	.word	0x3f7a9fbe
 80038e8:	3ff00000 	.word	0x3ff00000
 80038ec:	00000000 	.word	0x00000000
 80038f0:	408fa800 	.word	0x408fa800

080038f4 <main>:

int main(void)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b090      	sub	sp, #64	; 0x40
 80038f8:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f7ff fef6 	bl	80036ec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003900:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003904:	f7ff feda 	bl	80036bc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003908:	2003      	movs	r0, #3
 800390a:	f7ff fe05 	bl	8003518 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 800390e:	f000 f905 	bl	8003b1c <SystemClock_Config>

  MX_GPIO_Init();
 8003912:	f7ff fa5f 	bl	8002dd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003916:	f7ff fc9f 	bl	8003258 <MX_I2C1_Init>

  setSegments();
 800391a:	f7fe fa4d 	bl	8001db8 <setSegments>
  setDigits();
 800391e:	f7fe fa99 	bl	8001e54 <setDigits>

  LL_mDelay(2000);
 8003922:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003926:	f7fe f9a7 	bl	8001c78 <LL_mDelay>

  resetDigits();
 800392a:	f7fe fa73 	bl	8001e14 <resetDigits>
  resetSegments();
 800392e:	f7fe fa15 	bl	8001d5c <resetSegments>

  MX_TIM3_Init();
 8003932:	f000 fb75 	bl	8004020 <MX_TIM3_Init>
  uint8_t lps = lps25hb_init();
 8003936:	f000 fd2b 	bl	8004390 <lps25hb_init>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t hts = hts221_init();
 8003940:	f000 fc6c 	bl	800421c <hts221_init>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  uint8_t text[21];
  uint8_t txtIndex = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t cycleRight = 1;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  while (1)
  {
	  float lps_press = lps25hb_get_press();
 8003956:	f000 fcff 	bl	8004358 <lps25hb_get_press>
 800395a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	  float lps_temp = lps25hb_get_temp();
 800395e:	f000 fcc7 	bl	80042f0 <lps25hb_get_temp>
 8003962:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	  int8_t hts_humi = hts221_get_humi();
 8003966:	f000 fc2f 	bl	80041c8 <hts221_get_humi>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  float alt = get_altitude(lps_temp, lps_press);
 8003970:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003978:	edc7 7a01 	vstr	s15, [r7, #4]
 800397c:	793b      	ldrb	r3, [r7, #4]
 800397e:	b25b      	sxtb	r3, r3
 8003980:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003988:	ee17 2a90 	vmov	r2, s15
 800398c:	b212      	sxth	r2, r2
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff4d 	bl	8003830 <get_altitude>
 8003996:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	  if(switch_state == 0){
 800399a:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <main+0x20c>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d164      	bne.n	8003a6c <main+0x178>
		  memset(text, 0, 21);
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	2215      	movs	r2, #21
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd4e 	bl	800444c <memset>
		  strcpy(text,"branislav_kutas_98344");
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	4a53      	ldr	r2, [pc, #332]	; (8003b04 <main+0x210>)
 80039b6:	461c      	mov	r4, r3
 80039b8:	4615      	mov	r5, r2
 80039ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039c2:	6020      	str	r0, [r4, #0]
 80039c4:	3404      	adds	r4, #4
 80039c6:	8021      	strh	r1, [r4, #0]

		  if(disp_time > (saved_time + 500))
 80039c8:	4b4f      	ldr	r3, [pc, #316]	; (8003b08 <main+0x214>)
 80039ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039ce:	f513 71fa 	adds.w	r1, r3, #500	; 0x1f4
 80039d2:	f144 0200 	adc.w	r2, r4, #0
 80039d6:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <main+0x218>)
 80039d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039dc:	42a2      	cmp	r2, r4
 80039de:	bf08      	it	eq
 80039e0:	4299      	cmpeq	r1, r3
 80039e2:	d2b8      	bcs.n	8003956 <main+0x62>
		 	         {
		 	             uint8_t toDisplay[4] = "";
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]

		 	             if (txtIndex >= 17){
 80039e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d903      	bls.n	80039f8 <main+0x104>
		 	                 cycleRight = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80039f6:	e006      	b.n	8003a06 <main+0x112>
		 	             }
		 	             else if (txtIndex <= 0){
 80039f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <main+0x112>
		 	                 cycleRight = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		 	             }

		 	             for (int i = 0; i<4; i++){
 8003a06:	2300      	movs	r3, #0
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a0a:	e011      	b.n	8003a30 <main+0x13c>
		 	                 toDisplay[i] = text[i + txtIndex];
 8003a0c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	4413      	add	r3, r2
 8003a14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003a18:	4413      	add	r3, r2
 8003a1a:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8003a1e:	f107 0208 	add.w	r2, r7, #8
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	4413      	add	r3, r2
 8003a26:	460a      	mov	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
		 	             for (int i = 0; i<4; i++){
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	ddea      	ble.n	8003a0c <main+0x118>
		 	             }

		 	             if (cycleRight){
 8003a36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <main+0x156>
		 	                 txtIndex++;
 8003a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a42:	3301      	adds	r3, #1
 8003a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a48:	e004      	b.n	8003a54 <main+0x160>
		 	             }
		 	             else {
		 	                 txtIndex--;
 8003a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		 	             }

		 	             displayString(toDisplay);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fe2f 	bl	80026bc <displayString>

		 	             saved_time = disp_time;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <main+0x218>)
 8003a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a64:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <main+0x214>)
 8003a66:	e9c2 3400 	strd	r3, r4, [r2]
 8003a6a:	e774      	b.n	8003956 <main+0x62>
		 	         }

	  }else if(switch_state == 1){
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <main+0x20c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d113      	bne.n	8003a9c <main+0x1a8>
		  memset(text, 0, 21);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	2215      	movs	r2, #21
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fce5 	bl	800444c <memset>
		  strcpy(text,"aaaaaaaaa_kutas_98344");
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <main+0x21c>)
 8003a88:	461c      	mov	r4, r3
 8003a8a:	4615      	mov	r5, r2
 8003a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a94:	6020      	str	r0, [r4, #0]
 8003a96:	3404      	adds	r4, #4
 8003a98:	8021      	strh	r1, [r4, #0]
 8003a9a:	e75c      	b.n	8003956 <main+0x62>
	  }else if(switch_state == 2){
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <main+0x20c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d113      	bne.n	8003acc <main+0x1d8>
		  memset(text, 0, 21);
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	2215      	movs	r2, #21
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fccd 	bl	800444c <memset>
		  strcpy(text,"bbbbbbbbb_kutas_98344");
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <main+0x220>)
 8003ab8:	461c      	mov	r4, r3
 8003aba:	4615      	mov	r5, r2
 8003abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ac4:	6020      	str	r0, [r4, #0]
 8003ac6:	3404      	adds	r4, #4
 8003ac8:	8021      	strh	r1, [r4, #0]
 8003aca:	e744      	b.n	8003956 <main+0x62>
	  }else if(switch_state == 3){
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <main+0x20c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	f47f af40 	bne.w	8003956 <main+0x62>
		  memset(text, 0, 21);
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	2215      	movs	r2, #21
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fcb4 	bl	800444c <memset>
		  strcpy(text,"ccccccccc_kutas_98344");
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <main+0x224>)
 8003aea:	461c      	mov	r4, r3
 8003aec:	4615      	mov	r5, r2
 8003aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003af6:	6020      	str	r0, [r4, #0]
 8003af8:	3404      	adds	r4, #4
 8003afa:	8021      	strh	r1, [r4, #0]
  {
 8003afc:	e72b      	b.n	8003956 <main+0x62>
 8003afe:	bf00      	nop
 8003b00:	200000aa 	.word	0x200000aa
 8003b04:	08005528 	.word	0x08005528
 8003b08:	200000c0 	.word	0x200000c0
 8003b0c:	20000098 	.word	0x20000098
 8003b10:	08005540 	.word	0x08005540
 8003b14:	08005558 	.word	0x08005558
 8003b18:	08005570 	.word	0x08005570

08003b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff fdfb 	bl	800371c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003b26:	f7ff fe0d 	bl	8003744 <LL_FLASH_GetLatency>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003b30:	f000 f89a 	bl	8003c68 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003b34:	f7ff fd14 	bl	8003560 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003b38:	bf00      	nop
 8003b3a:	f7ff fd21 	bl	8003580 <LL_RCC_HSI_IsReady>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d1fa      	bne.n	8003b3a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003b44:	2010      	movs	r0, #16
 8003b46:	f7ff fd2d 	bl	80035a4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7ff fd62 	bl	8003614 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7ff fd73 	bl	800363c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7ff fd84 	bl	8003664 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7ff fd37 	bl	80035d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003b62:	bf00      	nop
 8003b64:	f7ff fd48 	bl	80035f8 <LL_RCC_GetSysClkSource>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1fa      	bne.n	8003b64 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8003b6e:	4808      	ldr	r0, [pc, #32]	; (8003b90 <SystemClock_Config+0x74>)
 8003b70:	f7fe f874 	bl	8001c5c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003b74:	2004      	movs	r0, #4
 8003b76:	f7ff fe19 	bl	80037ac <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <SystemClock_Config+0x74>)
 8003b7c:	f7fe f8a0 	bl	8001cc0 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003b80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b84:	f7ff fd82 	bl	800368c <LL_RCC_SetI2CClockSource>
  LL_SYSTICK_EnableIT();
 8003b88:	f7ff fe2c 	bl	80037e4 <LL_SYSTICK_EnableIT>
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	007a1200 	.word	0x007a1200

08003b94 <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	70fb      	strb	r3, [r7, #3]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	70bb      	strb	r3, [r7, #2]
 8003baa:	4613      	mov	r3, r2
 8003bac:	707b      	strb	r3, [r7, #1]
		uint8_t button_state = 0, timeout = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 8003bb6:	e013      	b.n	8003be0 <checkButtonState+0x4c>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN)))
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fe21 	bl	8003804 <LL_GPIO_IsInputPinSet>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <checkButtonState+0x3c>
			{
				button_state += 1;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e001      	b.n	8003bd4 <checkButtonState+0x40>
			}
			else
			{
				button_state = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 8003bd4:	7bbb      	ldrb	r3, [r7, #14]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7fe f84c 	bl	8001c78 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	7e3b      	ldrb	r3, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d203      	bcs.n	8003bf0 <checkButtonState+0x5c>
 8003be8:	7bba      	ldrb	r2, [r7, #14]
 8003bea:	787b      	ldrb	r3, [r7, #1]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3e3      	bcc.n	8003bb8 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	7e3b      	ldrb	r3, [r7, #24]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d305      	bcc.n	8003c04 <checkButtonState+0x70>
 8003bf8:	7bba      	ldrb	r2, [r7, #14]
 8003bfa:	787b      	ldrb	r3, [r7, #1]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d801      	bhi.n	8003c04 <checkButtonState+0x70>
		{
			return 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <checkButtonState+0x72>
		}
		else
		{
			return 0;
 8003c04:	2300      	movs	r3, #0
		}
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003c16:	2314      	movs	r3, #20
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	231e      	movs	r3, #30
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2103      	movs	r1, #3
 8003c20:	480f      	ldr	r0, [pc, #60]	; (8003c60 <EXTI3_IRQHandler+0x50>)
 8003c22:	f7ff ffb7 	bl	8003b94 <checkButtonState>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <EXTI3_IRQHandler+0x36>
						GPIO_PIN_BUTTON,
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		switch_state += 1;
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <EXTI3_IRQHandler+0x54>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <EXTI3_IRQHandler+0x54>)
 8003c36:	701a      	strb	r2, [r3, #0]

		if(switch_state >=4){
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <EXTI3_IRQHandler+0x54>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d902      	bls.n	8003c46 <EXTI3_IRQHandler+0x36>
			switch_state = 0;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <EXTI3_IRQHandler+0x54>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]

	/* Clear EXTI4 pending register flag */
	//EXTI->PR |= (EXTI_PR_PIF4);
	//LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003c46:	2008      	movs	r0, #8
 8003c48:	f7ff fd8a 	bl	8003760 <LL_EXTI_IsActiveFlag_0_31>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <EXTI3_IRQHandler+0x48>
	{
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003c52:	2008      	movs	r0, #8
 8003c54:	f7ff fd9a 	bl	800378c <LL_EXTI_ClearFlag_0_31>
	}
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	48000400 	.word	0x48000400
 8003c64:	200000aa 	.word	0x200000aa

08003c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c6e:	e7fe      	b.n	8003c6e <Error_Handler+0x6>

08003c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <BusFault_Handler+0x4>

08003c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <UsageFault_Handler+0x4>

08003c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc0:	b490      	push	{r4, r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <SysTick_Handler+0x20>)
 8003cc6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003cca:	1c4b      	adds	r3, r1, #1
 8003ccc:	f142 0400 	adc.w	r4, r2, #0
 8003cd0:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <SysTick_Handler+0x20>)
 8003cd2:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc90      	pop	{r4, r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000098 	.word	0x20000098

08003ce4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <SystemInit+0x84>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <SystemInit+0x84>)
 8003cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <SystemInit+0x88>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <SystemInit+0x88>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <SystemInit+0x88>)
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	4918      	ldr	r1, [pc, #96]	; (8003d6c <SystemInit+0x88>)
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <SystemInit+0x8c>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <SystemInit+0x88>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <SystemInit+0x88>)
 8003d16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <SystemInit+0x88>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <SystemInit+0x88>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <SystemInit+0x88>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <SystemInit+0x88>)
 8003d32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d36:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <SystemInit+0x88>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <SystemInit+0x88>)
 8003d3e:	f023 030f 	bic.w	r3, r3, #15
 8003d42:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <SystemInit+0x88>)
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	4908      	ldr	r1, [pc, #32]	; (8003d6c <SystemInit+0x88>)
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <SystemInit+0x90>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <SystemInit+0x88>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <SystemInit+0x84>)
 8003d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d5c:	609a      	str	r2, [r3, #8]
#endif
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	f87fc00c 	.word	0xf87fc00c
 8003d74:	ff00fccc 	.word	0xff00fccc

08003d78 <NVIC_GetPriorityGrouping>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <NVIC_GetPriorityGrouping+0x18>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	f003 0307 	and.w	r3, r3, #7
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EnableIRQ>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	4907      	ldr	r1, [pc, #28]	; (8003dc4 <NVIC_EnableIRQ+0x30>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2001      	movs	r0, #1
 8003dae:	fa00 f202 	lsl.w	r2, r0, r2
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000e100 	.word	0xe000e100

08003dc8 <NVIC_SetPriority>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	6039      	str	r1, [r7, #0]
 8003dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da0b      	bge.n	8003df4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	490c      	ldr	r1, [pc, #48]	; (8003e14 <NVIC_SetPriority+0x4c>)
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	3b04      	subs	r3, #4
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	761a      	strb	r2, [r3, #24]
}
 8003df2:	e009      	b.n	8003e08 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <NVIC_SetPriority+0x50>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	440b      	add	r3, r1
 8003e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <NVIC_EncodePriority>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f1c3 0307 	rsb	r3, r3, #7
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf28      	it	cs
 8003e3a:	2304      	movcs	r3, #4
 8003e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3304      	adds	r3, #4
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d902      	bls.n	8003e4c <NVIC_EncodePriority+0x30>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3b03      	subs	r3, #3
 8003e4a:	e000      	b.n	8003e4e <NVIC_EncodePriority+0x32>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e50:	f04f 32ff 	mov.w	r2, #4294967295
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	401a      	ands	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e64:	f04f 31ff 	mov.w	r1, #4294967295
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	43d9      	mvns	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e74:	4313      	orrs	r3, r2
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <LL_APB1_GRP1_EnableClock>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <LL_TIM_EnableCounter>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_TIM_EnableARRPreload>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	601a      	str	r2, [r3, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_TIM_OC_DisableFast>:
{
 8003ef4:	b4b0      	push	{r4, r5, r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d028      	beq.n	8003f56 <LL_TIM_OC_DisableFast+0x62>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d023      	beq.n	8003f52 <LL_TIM_OC_DisableFast+0x5e>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d01e      	beq.n	8003f4e <LL_TIM_OC_DisableFast+0x5a>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d019      	beq.n	8003f4a <LL_TIM_OC_DisableFast+0x56>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1c:	d013      	beq.n	8003f46 <LL_TIM_OC_DisableFast+0x52>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d00d      	beq.n	8003f42 <LL_TIM_OC_DisableFast+0x4e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d007      	beq.n	8003f3e <LL_TIM_OC_DisableFast+0x4a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d101      	bne.n	8003f3a <LL_TIM_OC_DisableFast+0x46>
 8003f36:	2307      	movs	r3, #7
 8003f38:	e00e      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	e00c      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f3e:	2306      	movs	r3, #6
 8003f40:	e00a      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e008      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f46:	2304      	movs	r3, #4
 8003f48:	e006      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e004      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e002      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <LL_TIM_OC_DisableFast+0x64>
 8003f56:	2300      	movs	r3, #0
 8003f58:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4629      	mov	r1, r5
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <LL_TIM_OC_DisableFast+0x94>)
 8003f64:	5c5b      	ldrb	r3, [r3, r1]
 8003f66:	4413      	add	r3, r2
 8003f68:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <LL_TIM_OC_DisableFast+0x98>)
 8003f70:	5c5b      	ldrb	r3, [r3, r1]
 8003f72:	4619      	mov	r1, r3
 8003f74:	2304      	movs	r3, #4
 8003f76:	408b      	lsls	r3, r1
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	6023      	str	r3, [r4, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bcb0      	pop	{r4, r5, r7}
 8003f86:	4770      	bx	lr
 8003f88:	08005588 	.word	0x08005588
 8003f8c:	08005594 	.word	0x08005594

08003f90 <LL_TIM_SetClockSource>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_TIM_SetTriggerOutput>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_TIM_DisableMasterSlaveMode>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_TIM_EnableIT_UPDATE>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	2220      	movs	r2, #32
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fa05 	bl	800444c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004042:	2002      	movs	r0, #2
 8004044:	f7ff ff1e 	bl	8003e84 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8004048:	f7ff fe96 	bl	8003d78 <NVIC_GetPriorityGrouping>
 800404c:	4603      	mov	r3, r0
 800404e:	2202      	movs	r2, #2
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fee2 	bl	8003e1c <NVIC_EncodePriority>
 8004058:	4603      	mov	r3, r0
 800405a:	4619      	mov	r1, r3
 800405c:	201d      	movs	r0, #29
 800405e:	f7ff feb3 	bl	8003dc8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8004062:	201d      	movs	r0, #29
 8004064:	f7ff fe96 	bl	8003d94 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8004068:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800406c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800406e:	2300      	movs	r3, #0
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8004072:	2313      	movs	r3, #19
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004076:	2300      	movs	r3, #0
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800407a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800407e:	4619      	mov	r1, r3
 8004080:	4817      	ldr	r0, [pc, #92]	; (80040e0 <MX_TIM3_Init+0xc0>)
 8004082:	f7fd fa57 	bl	8001534 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8004086:	4816      	ldr	r0, [pc, #88]	; (80040e0 <MX_TIM3_Init+0xc0>)
 8004088:	f7ff ff24 	bl	8003ed4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800408c:	2100      	movs	r1, #0
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <MX_TIM3_Init+0xc0>)
 8004090:	f7ff ff7e 	bl	8003f90 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8004094:	2310      	movs	r3, #16
 8004096:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	461a      	mov	r2, r3
 80040ac:	2101      	movs	r1, #1
 80040ae:	480c      	ldr	r0, [pc, #48]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040b0:	f7fd fab4 	bl	800161c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80040b4:	2101      	movs	r1, #1
 80040b6:	480a      	ldr	r0, [pc, #40]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040b8:	f7ff ff1c 	bl	8003ef4 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80040bc:	2100      	movs	r1, #0
 80040be:	4808      	ldr	r0, [pc, #32]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040c0:	f7ff ff7b 	bl	8003fba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80040c4:	4806      	ldr	r0, [pc, #24]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040c6:	f7ff ff8b 	bl	8003fe0 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040cc:	f7ff ff98 	bl	8004000 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80040d0:	4803      	ldr	r0, [pc, #12]	; (80040e0 <MX_TIM3_Init+0xc0>)
 80040d2:	f7ff feef 	bl	8003eb4 <LL_TIM_EnableCounter>

}
 80040d6:	bf00      	nop
 80040d8:	3738      	adds	r7, #56	; 0x38
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40000400 	.word	0x40000400

080040e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800411c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80040e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80040ea:	e003      	b.n	80040f4 <LoopCopyDataInit>

080040ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80040ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80040f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80040f2:	3104      	adds	r1, #4

080040f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80040f4:	480b      	ldr	r0, [pc, #44]	; (8004124 <LoopForever+0xa>)
	ldr	r3, =_edata
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <LoopForever+0xe>)
	adds	r2, r0, r1
 80040f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80040fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040fc:	d3f6      	bcc.n	80040ec <CopyDataInit>
	ldr	r2, =_sbss
 80040fe:	4a0b      	ldr	r2, [pc, #44]	; (800412c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004100:	e002      	b.n	8004108 <LoopFillZerobss>

08004102 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004102:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004104:	f842 3b04 	str.w	r3, [r2], #4

08004108 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <LoopForever+0x16>)
	cmp	r2, r3
 800410a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800410c:	d3f9      	bcc.n	8004102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800410e:	f7ff fde9 	bl	8003ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004112:	f000 f977 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004116:	f7ff fbed 	bl	80038f4 <main>

0800411a <LoopForever>:

LoopForever:
    b LoopForever
 800411a:	e7fe      	b.n	800411a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800411c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004120:	080055f0 	.word	0x080055f0
	ldr	r0, =_sdata
 8004124:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004128:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800412c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004130:	200000d4 	.word	0x200000d4

08004134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004134:	e7fe      	b.n	8004134 <ADC1_2_IRQHandler>
	...

08004138 <hts221_read_byte>:
#include "hts221.h"

uint8_t addres = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <hts221_read_byte+0x30>)
 8004148:	7819      	ldrb	r1, [r3, #0]
 800414a:	79fa      	ldrb	r2, [r7, #7]
 800414c:	f107 000f 	add.w	r0, r7, #15
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	460b      	mov	r3, r1
 8004156:	2101      	movs	r1, #1
 8004158:	f7ff f932 	bl	80033c0 <i2c_master_read>
 800415c:	4603      	mov	r3, r0
 800415e:	781b      	ldrb	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000004 	.word	0x20000004

0800416c <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	460a      	mov	r2, r1
 8004176:	71fb      	strb	r3, [r7, #7]
 8004178:	4613      	mov	r3, r2
 800417a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <hts221_write_byte+0x28>)
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	79f9      	ldrb	r1, [r7, #7]
 8004182:	79b8      	ldrb	r0, [r7, #6]
 8004184:	2300      	movs	r3, #0
 8004186:	f7ff f8d7 	bl	8003338 <i2c_master_write>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000004 	.word	0x20000004

08004198 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
 80041a4:	4613      	mov	r3, r2
 80041a6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <hts221_readArray+0x2c>)
 80041aa:	7818      	ldrb	r0, [r3, #0]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	78b9      	ldrb	r1, [r7, #2]
 80041b0:	2301      	movs	r3, #1
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4603      	mov	r3, r0
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff f902 	bl	80033c0 <i2c_master_read>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000004 	.word	0x20000004

080041c8 <hts221_get_humi>:

    return temperature;
}

int8_t hts221_get_humi()
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
    uint8_t temp[2];

    hts221_readArray(temp, HTS221_ADDRESS_HUMI_L, 2);
 80041ce:	463b      	mov	r3, r7
 80041d0:	2202      	movs	r2, #2
 80041d2:	2128      	movs	r1, #40	; 0x28
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ffdf 	bl	8004198 <hts221_readArray>
    uint16_t tmp = ((temp[1] << 8) | temp[0]);
 80041da:	787b      	ldrb	r3, [r7, #1]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	b21a      	sxth	r2, r3
 80041e0:	783b      	ldrb	r3, [r7, #0]
 80041e2:	b21b      	sxth	r3, r3
 80041e4:	4313      	orrs	r3, r2
 80041e6:	b21b      	sxth	r3, r3
 80041e8:	80fb      	strh	r3, [r7, #6]
    int8_t humi = (20*(tmp - 4000))/(2000) + 20;
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <hts221_get_humi+0x50>)
 80041fa:	fb82 1203 	smull	r1, r2, r2, r3
 80041fe:	11d2      	asrs	r2, r2, #7
 8004200:	17db      	asrs	r3, r3, #31
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3314      	adds	r3, #20
 8004208:	b2db      	uxtb	r3, r3
 800420a:	717b      	strb	r3, [r7, #5]
    return humi;
 800420c:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	10624dd3 	.word	0x10624dd3

0800421c <hts221_init>:


uint8_t hts221_init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8004226:	2064      	movs	r0, #100	; 0x64
 8004228:	f7fd fd26 	bl	8001c78 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 800422c:	200f      	movs	r0, #15
 800422e:	f7ff ff83 	bl	8004138 <hts221_read_byte>
 8004232:	4603      	mov	r3, r0
 8004234:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8004236:	79bb      	ldrb	r3, [r7, #6]
 8004238:	2bbc      	cmp	r3, #188	; 0xbc
 800423a:	d10a      	bne.n	8004252 <hts221_init+0x36>
	{
		status = 1;
 800423c:	2301      	movs	r3, #1
 800423e:	71fb      	strb	r3, [r7, #7]
	{
		status = 0;
		return status;
	}

	uint8_t ctrl1 = (8 << 4) | 1;
 8004240:	2381      	movs	r3, #129	; 0x81
 8004242:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8004244:	797b      	ldrb	r3, [r7, #5]
 8004246:	4619      	mov	r1, r3
 8004248:	2020      	movs	r0, #32
 800424a:	f7ff ff8f 	bl	800416c <hts221_write_byte>

	return status;
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	e002      	b.n	8004258 <hts221_init+0x3c>
		status = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	71fb      	strb	r3, [r7, #7]
		return status;
 8004256:	79fb      	ldrb	r3, [r7, #7]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_press = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_press, 0));
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <lps25hb_read_byte+0x30>)
 8004270:	7819      	ldrb	r1, [r3, #0]
 8004272:	79fa      	ldrb	r2, [r7, #7]
 8004274:	f107 000f 	add.w	r0, r7, #15
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	460b      	mov	r3, r1
 800427e:	2101      	movs	r1, #1
 8004280:	f7ff f89e 	bl	80033c0 <i2c_master_read>
 8004284:	4603      	mov	r3, r0
 8004286:	781b      	ldrb	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000005 	.word	0x20000005

08004294 <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	460a      	mov	r2, r1
 800429e:	71fb      	strb	r3, [r7, #7]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_press, 0);
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <lps25hb_write_byte+0x28>)
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	79f9      	ldrb	r1, [r7, #7]
 80042aa:	79b8      	ldrb	r0, [r7, #6]
 80042ac:	2300      	movs	r3, #0
 80042ae:	f7ff f843 	bl	8003338 <i2c_master_write>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000005 	.word	0x20000005

080042c0 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
 80042cc:	4613      	mov	r3, r2
 80042ce:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_press, 1);
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <lps25hb_readArray+0x2c>)
 80042d2:	7818      	ldrb	r0, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	78b9      	ldrb	r1, [r7, #2]
 80042d8:	2301      	movs	r3, #1
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4603      	mov	r3, r0
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff f86e 	bl	80033c0 <i2c_master_read>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000005 	.word	0x20000005

080042f0 <lps25hb_get_temp>:


float lps25hb_get_temp()
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
    uint8_t temp[2];
    lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP_L, 2);
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	2202      	movs	r2, #2
 80042fa:	212b      	movs	r1, #43	; 0x2b
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ffdf 	bl	80042c0 <lps25hb_readArray>
    int16_t temperature = ((temp[1] << 8) | temp[0]);
 8004302:	797b      	ldrb	r3, [r7, #5]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b21a      	sxth	r2, r3
 8004308:	793b      	ldrb	r3, [r7, #4]
 800430a:	b21b      	sxth	r3, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]

    return (float)(42.5 + (temperature/480));
 8004310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004314:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <lps25hb_get_temp+0x60>)
 8004316:	fb82 1203 	smull	r1, r2, r2, r3
 800431a:	441a      	add	r2, r3
 800431c:	1212      	asrs	r2, r2, #8
 800431e:	17db      	asrs	r3, r3, #31
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	b21b      	sxth	r3, r3
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f8a1 	bl	800046c <__aeabi_i2d>
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <lps25hb_get_temp+0x64>)
 8004330:	f7fb ff50 	bl	80001d4 <__adddf3>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	4618      	mov	r0, r3
 800433a:	4621      	mov	r1, r4
 800433c:	f7fc fbb0 	bl	8000aa0 <__aeabi_d2f>
 8004340:	4603      	mov	r3, r0
 8004342:	ee07 3a90 	vmov	s15, r3
}
 8004346:	eeb0 0a67 	vmov.f32	s0, s15
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}
 8004350:	88888889 	.word	0x88888889
 8004354:	40454000 	.word	0x40454000

08004358 <lps25hb_get_press>:

float lps25hb_get_press()
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	uint8_t data[3];

	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS_XL, 3);
 800435e:	463b      	mov	r3, r7
 8004360:	2203      	movs	r2, #3
 8004362:	2128      	movs	r1, #40	; 0x28
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ffab 	bl	80042c0 <lps25hb_readArray>

	uint32_t press = ((data[2] << 16) | (data[1] << 8) | data[0]);
 800436a:	78bb      	ldrb	r3, [r7, #2]
 800436c:	041a      	lsls	r2, r3, #16
 800436e:	787b      	ldrb	r3, [r7, #1]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	4313      	orrs	r3, r2
 8004374:	783a      	ldrb	r2, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	607b      	str	r3, [r7, #4]

	return (float)(press/4096);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0b1b      	lsrs	r3, r3, #12
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004396:	2301      	movs	r3, #1
 8004398:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	f7fd fc6c 	bl	8001c78 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80043a0:	200f      	movs	r0, #15
 80043a2:	f7ff ff5d 	bl	8004260 <lps25hb_read_byte>
 80043a6:	4603      	mov	r3, r0
 80043a8:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 80043aa:	79bb      	ldrb	r3, [r7, #6]
 80043ac:	2bbd      	cmp	r3, #189	; 0xbd
 80043ae:	d102      	bne.n	80043b6 <lps25hb_init+0x26>
	{
		status = 1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	e011      	b.n	80043da <lps25hb_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		address_press = LPS25HB_DEVICE_ADDRESS_1;
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <lps25hb_init+0x64>)
 80043b8:	22ba      	movs	r2, #186	; 0xba
 80043ba:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80043bc:	200f      	movs	r0, #15
 80043be:	f7ff ff4f 	bl	8004260 <lps25hb_read_byte>
 80043c2:	4603      	mov	r3, r0
 80043c4:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 80043c6:	79bb      	ldrb	r3, [r7, #6]
 80043c8:	2bbd      	cmp	r3, #189	; 0xbd
 80043ca:	d102      	bne.n	80043d2 <lps25hb_init+0x42>
		{
			status = 1;
 80043cc:	2301      	movs	r3, #1
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	e003      	b.n	80043da <lps25hb_init+0x4a>
		}
		else
		{
			status = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	71fb      	strb	r3, [r7, #7]
			return status;
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	e007      	b.n	80043ea <lps25hb_init+0x5a>
		}
	}

	//acc device init

	uint8_t ctrl1 = 9 << 4;
 80043da:	2390      	movs	r3, #144	; 0x90
 80043dc:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 80043de:	797b      	ldrb	r3, [r7, #5]
 80043e0:	4619      	mov	r1, r3
 80043e2:	2020      	movs	r0, #32
 80043e4:	f7ff ff56 	bl	8004294 <lps25hb_write_byte>

	return status;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000005 	.word	0x20000005

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000008 	.word	0x20000008

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4e0d      	ldr	r6, [pc, #52]	; (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440a:	1ba4      	subs	r4, r4, r6
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2500      	movs	r5, #0
 8004410:	42a5      	cmp	r5, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4e0b      	ldr	r6, [pc, #44]	; (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	; (8004448 <__libc_init_array+0x44>)
 8004418:	f001 f878 	bl	800550c <_init>
 800441c:	1ba4      	subs	r4, r4, r6
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2500      	movs	r5, #0
 8004422:	42a5      	cmp	r5, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800442c:	4798      	blx	r3
 800442e:	3501      	adds	r5, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004436:	4798      	blx	r3
 8004438:	3501      	adds	r5, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	080055e8 	.word	0x080055e8
 8004440:	080055e8 	.word	0x080055e8
 8004444:	080055e8 	.word	0x080055e8
 8004448:	080055ec 	.word	0x080055ec

0800444c <memset>:
 800444c:	4402      	add	r2, r0
 800444e:	4603      	mov	r3, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <pow>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	ed2d 8b04 	vpush	{d8-d9}
 8004464:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004738 <pow+0x2dc>
 8004468:	b08d      	sub	sp, #52	; 0x34
 800446a:	ec57 6b10 	vmov	r6, r7, d0
 800446e:	ec55 4b11 	vmov	r4, r5, d1
 8004472:	f000 f965 	bl	8004740 <__ieee754_pow>
 8004476:	f999 3000 	ldrsb.w	r3, [r9]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	eeb0 8a40 	vmov.f32	s16, s0
 8004482:	eef0 8a60 	vmov.f32	s17, s1
 8004486:	46c8      	mov	r8, r9
 8004488:	d05f      	beq.n	800454a <pow+0xee>
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fc faef 	bl	8000a74 <__aeabi_dcmpun>
 8004496:	4683      	mov	fp, r0
 8004498:	2800      	cmp	r0, #0
 800449a:	d156      	bne.n	800454a <pow+0xee>
 800449c:	4632      	mov	r2, r6
 800449e:	463b      	mov	r3, r7
 80044a0:	4630      	mov	r0, r6
 80044a2:	4639      	mov	r1, r7
 80044a4:	f7fc fae6 	bl	8000a74 <__aeabi_dcmpun>
 80044a8:	9001      	str	r0, [sp, #4]
 80044aa:	b1e8      	cbz	r0, 80044e8 <pow+0x8c>
 80044ac:	2200      	movs	r2, #0
 80044ae:	2300      	movs	r3, #0
 80044b0:	4620      	mov	r0, r4
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7fc faac 	bl	8000a10 <__aeabi_dcmpeq>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d046      	beq.n	800454a <pow+0xee>
 80044bc:	2301      	movs	r3, #1
 80044be:	9302      	str	r3, [sp, #8]
 80044c0:	4b96      	ldr	r3, [pc, #600]	; (800471c <pow+0x2c0>)
 80044c2:	9303      	str	r3, [sp, #12]
 80044c4:	4b96      	ldr	r3, [pc, #600]	; (8004720 <pow+0x2c4>)
 80044c6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80044ca:	2200      	movs	r2, #0
 80044cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044d0:	9b00      	ldr	r3, [sp, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80044dc:	d033      	beq.n	8004546 <pow+0xea>
 80044de:	a802      	add	r0, sp, #8
 80044e0:	f000 fefd 	bl	80052de <matherr>
 80044e4:	bb48      	cbnz	r0, 800453a <pow+0xde>
 80044e6:	e05d      	b.n	80045a4 <pow+0x148>
 80044e8:	f04f 0a00 	mov.w	sl, #0
 80044ec:	f04f 0b00 	mov.w	fp, #0
 80044f0:	4652      	mov	r2, sl
 80044f2:	465b      	mov	r3, fp
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fc fa8a 	bl	8000a10 <__aeabi_dcmpeq>
 80044fc:	ec4b ab19 	vmov	d9, sl, fp
 8004500:	2800      	cmp	r0, #0
 8004502:	d054      	beq.n	80045ae <pow+0x152>
 8004504:	4652      	mov	r2, sl
 8004506:	465b      	mov	r3, fp
 8004508:	4620      	mov	r0, r4
 800450a:	4629      	mov	r1, r5
 800450c:	f7fc fa80 	bl	8000a10 <__aeabi_dcmpeq>
 8004510:	4680      	mov	r8, r0
 8004512:	b318      	cbz	r0, 800455c <pow+0x100>
 8004514:	2301      	movs	r3, #1
 8004516:	9302      	str	r3, [sp, #8]
 8004518:	4b80      	ldr	r3, [pc, #512]	; (800471c <pow+0x2c0>)
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	9b01      	ldr	r3, [sp, #4]
 800451e:	930a      	str	r3, [sp, #40]	; 0x28
 8004520:	9b00      	ldr	r3, [sp, #0]
 8004522:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004526:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800452a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0d5      	beq.n	80044de <pow+0x82>
 8004532:	4b7b      	ldr	r3, [pc, #492]	; (8004720 <pow+0x2c4>)
 8004534:	2200      	movs	r2, #0
 8004536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453c:	b11b      	cbz	r3, 8004546 <pow+0xea>
 800453e:	f7ff ff5b 	bl	80043f8 <__errno>
 8004542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004544:	6003      	str	r3, [r0, #0]
 8004546:	ed9d 8b08 	vldr	d8, [sp, #32]
 800454a:	eeb0 0a48 	vmov.f32	s0, s16
 800454e:	eef0 0a68 	vmov.f32	s1, s17
 8004552:	b00d      	add	sp, #52	; 0x34
 8004554:	ecbd 8b04 	vpop	{d8-d9}
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455c:	ec45 4b10 	vmov	d0, r4, r5
 8004560:	f000 feb5 	bl	80052ce <finite>
 8004564:	2800      	cmp	r0, #0
 8004566:	d0f0      	beq.n	800454a <pow+0xee>
 8004568:	4652      	mov	r2, sl
 800456a:	465b      	mov	r3, fp
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fc fa58 	bl	8000a24 <__aeabi_dcmplt>
 8004574:	2800      	cmp	r0, #0
 8004576:	d0e8      	beq.n	800454a <pow+0xee>
 8004578:	2301      	movs	r3, #1
 800457a:	9302      	str	r3, [sp, #8]
 800457c:	4b67      	ldr	r3, [pc, #412]	; (800471c <pow+0x2c0>)
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	f999 3000 	ldrsb.w	r3, [r9]
 8004584:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004588:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800458c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004590:	b913      	cbnz	r3, 8004598 <pow+0x13c>
 8004592:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004596:	e7a2      	b.n	80044de <pow+0x82>
 8004598:	4962      	ldr	r1, [pc, #392]	; (8004724 <pow+0x2c8>)
 800459a:	2000      	movs	r0, #0
 800459c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d19c      	bne.n	80044de <pow+0x82>
 80045a4:	f7ff ff28 	bl	80043f8 <__errno>
 80045a8:	2321      	movs	r3, #33	; 0x21
 80045aa:	6003      	str	r3, [r0, #0]
 80045ac:	e7c5      	b.n	800453a <pow+0xde>
 80045ae:	eeb0 0a48 	vmov.f32	s0, s16
 80045b2:	eef0 0a68 	vmov.f32	s1, s17
 80045b6:	f000 fe8a 	bl	80052ce <finite>
 80045ba:	9000      	str	r0, [sp, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	f040 8081 	bne.w	80046c4 <pow+0x268>
 80045c2:	ec47 6b10 	vmov	d0, r6, r7
 80045c6:	f000 fe82 	bl	80052ce <finite>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d07a      	beq.n	80046c4 <pow+0x268>
 80045ce:	ec45 4b10 	vmov	d0, r4, r5
 80045d2:	f000 fe7c 	bl	80052ce <finite>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d074      	beq.n	80046c4 <pow+0x268>
 80045da:	ec53 2b18 	vmov	r2, r3, d8
 80045de:	ee18 0a10 	vmov	r0, s16
 80045e2:	4619      	mov	r1, r3
 80045e4:	f7fc fa46 	bl	8000a74 <__aeabi_dcmpun>
 80045e8:	f999 9000 	ldrsb.w	r9, [r9]
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <pow+0x2c0>)
 80045ee:	b1b0      	cbz	r0, 800461e <pow+0x1c2>
 80045f0:	2201      	movs	r2, #1
 80045f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045f6:	9b00      	ldr	r3, [sp, #0]
 80045f8:	930a      	str	r3, [sp, #40]	; 0x28
 80045fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80045fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004602:	f1b9 0f00 	cmp.w	r9, #0
 8004606:	d0c4      	beq.n	8004592 <pow+0x136>
 8004608:	4652      	mov	r2, sl
 800460a:	465b      	mov	r3, fp
 800460c:	4650      	mov	r0, sl
 800460e:	4659      	mov	r1, fp
 8004610:	f7fc f8c0 	bl	8000794 <__aeabi_ddiv>
 8004614:	f1b9 0f02 	cmp.w	r9, #2
 8004618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800461c:	e7c1      	b.n	80045a2 <pow+0x146>
 800461e:	2203      	movs	r2, #3
 8004620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004624:	900a      	str	r0, [sp, #40]	; 0x28
 8004626:	4629      	mov	r1, r5
 8004628:	4620      	mov	r0, r4
 800462a:	2200      	movs	r2, #0
 800462c:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <pow+0x2cc>)
 800462e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004632:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004636:	f7fb ff83 	bl	8000540 <__aeabi_dmul>
 800463a:	4604      	mov	r4, r0
 800463c:	460d      	mov	r5, r1
 800463e:	f1b9 0f00 	cmp.w	r9, #0
 8004642:	d124      	bne.n	800468e <pow+0x232>
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <pow+0x2d0>)
 8004646:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800464a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800464e:	4630      	mov	r0, r6
 8004650:	4652      	mov	r2, sl
 8004652:	465b      	mov	r3, fp
 8004654:	4639      	mov	r1, r7
 8004656:	f7fc f9e5 	bl	8000a24 <__aeabi_dcmplt>
 800465a:	2800      	cmp	r0, #0
 800465c:	d056      	beq.n	800470c <pow+0x2b0>
 800465e:	ec45 4b10 	vmov	d0, r4, r5
 8004662:	f000 fe49 	bl	80052f8 <rint>
 8004666:	4622      	mov	r2, r4
 8004668:	462b      	mov	r3, r5
 800466a:	ec51 0b10 	vmov	r0, r1, d0
 800466e:	f7fc f9cf 	bl	8000a10 <__aeabi_dcmpeq>
 8004672:	b920      	cbnz	r0, 800467e <pow+0x222>
 8004674:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <pow+0x2d4>)
 8004676:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800467a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800467e:	f998 3000 	ldrsb.w	r3, [r8]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d142      	bne.n	800470c <pow+0x2b0>
 8004686:	f7ff feb7 	bl	80043f8 <__errno>
 800468a:	2322      	movs	r3, #34	; 0x22
 800468c:	e78d      	b.n	80045aa <pow+0x14e>
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <pow+0x2d8>)
 8004690:	2200      	movs	r2, #0
 8004692:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004696:	4630      	mov	r0, r6
 8004698:	4652      	mov	r2, sl
 800469a:	465b      	mov	r3, fp
 800469c:	4639      	mov	r1, r7
 800469e:	f7fc f9c1 	bl	8000a24 <__aeabi_dcmplt>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0eb      	beq.n	800467e <pow+0x222>
 80046a6:	ec45 4b10 	vmov	d0, r4, r5
 80046aa:	f000 fe25 	bl	80052f8 <rint>
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	ec51 0b10 	vmov	r0, r1, d0
 80046b6:	f7fc f9ab 	bl	8000a10 <__aeabi_dcmpeq>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d1df      	bne.n	800467e <pow+0x222>
 80046be:	2200      	movs	r2, #0
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <pow+0x2c8>)
 80046c2:	e7da      	b.n	800467a <pow+0x21e>
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	ec51 0b18 	vmov	r0, r1, d8
 80046cc:	f7fc f9a0 	bl	8000a10 <__aeabi_dcmpeq>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	f43f af3a 	beq.w	800454a <pow+0xee>
 80046d6:	ec47 6b10 	vmov	d0, r6, r7
 80046da:	f000 fdf8 	bl	80052ce <finite>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f43f af33 	beq.w	800454a <pow+0xee>
 80046e4:	ec45 4b10 	vmov	d0, r4, r5
 80046e8:	f000 fdf1 	bl	80052ce <finite>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	f43f af2c 	beq.w	800454a <pow+0xee>
 80046f2:	2304      	movs	r3, #4
 80046f4:	9302      	str	r3, [sp, #8]
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <pow+0x2c0>)
 80046f8:	9303      	str	r3, [sp, #12]
 80046fa:	2300      	movs	r3, #0
 80046fc:	930a      	str	r3, [sp, #40]	; 0x28
 80046fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004702:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004706:	ed8d 9b08 	vstr	d9, [sp, #32]
 800470a:	e7b8      	b.n	800467e <pow+0x222>
 800470c:	a802      	add	r0, sp, #8
 800470e:	f000 fde6 	bl	80052de <matherr>
 8004712:	2800      	cmp	r0, #0
 8004714:	f47f af11 	bne.w	800453a <pow+0xde>
 8004718:	e7b5      	b.n	8004686 <pow+0x22a>
 800471a:	bf00      	nop
 800471c:	0800559d 	.word	0x0800559d
 8004720:	3ff00000 	.word	0x3ff00000
 8004724:	fff00000 	.word	0xfff00000
 8004728:	3fe00000 	.word	0x3fe00000
 800472c:	47efffff 	.word	0x47efffff
 8004730:	c7efffff 	.word	0xc7efffff
 8004734:	7ff00000 	.word	0x7ff00000
 8004738:	2000006c 	.word	0x2000006c
 800473c:	00000000 	.word	0x00000000

08004740 <__ieee754_pow>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b091      	sub	sp, #68	; 0x44
 8004746:	ed8d 1b00 	vstr	d1, [sp]
 800474a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800474e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004752:	ea58 0302 	orrs.w	r3, r8, r2
 8004756:	ec57 6b10 	vmov	r6, r7, d0
 800475a:	f000 84be 	beq.w	80050da <__ieee754_pow+0x99a>
 800475e:	4b7a      	ldr	r3, [pc, #488]	; (8004948 <__ieee754_pow+0x208>)
 8004760:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004764:	429c      	cmp	r4, r3
 8004766:	463d      	mov	r5, r7
 8004768:	ee10 aa10 	vmov	sl, s0
 800476c:	dc09      	bgt.n	8004782 <__ieee754_pow+0x42>
 800476e:	d103      	bne.n	8004778 <__ieee754_pow+0x38>
 8004770:	b93e      	cbnz	r6, 8004782 <__ieee754_pow+0x42>
 8004772:	45a0      	cmp	r8, r4
 8004774:	dc0d      	bgt.n	8004792 <__ieee754_pow+0x52>
 8004776:	e001      	b.n	800477c <__ieee754_pow+0x3c>
 8004778:	4598      	cmp	r8, r3
 800477a:	dc02      	bgt.n	8004782 <__ieee754_pow+0x42>
 800477c:	4598      	cmp	r8, r3
 800477e:	d10e      	bne.n	800479e <__ieee754_pow+0x5e>
 8004780:	b16a      	cbz	r2, 800479e <__ieee754_pow+0x5e>
 8004782:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800478a:	ea54 030a 	orrs.w	r3, r4, sl
 800478e:	f000 84a4 	beq.w	80050da <__ieee754_pow+0x99a>
 8004792:	486e      	ldr	r0, [pc, #440]	; (800494c <__ieee754_pow+0x20c>)
 8004794:	b011      	add	sp, #68	; 0x44
 8004796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	f000 bda5 	b.w	80052e8 <nan>
 800479e:	2d00      	cmp	r5, #0
 80047a0:	da53      	bge.n	800484a <__ieee754_pow+0x10a>
 80047a2:	4b6b      	ldr	r3, [pc, #428]	; (8004950 <__ieee754_pow+0x210>)
 80047a4:	4598      	cmp	r8, r3
 80047a6:	dc4d      	bgt.n	8004844 <__ieee754_pow+0x104>
 80047a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80047ac:	4598      	cmp	r8, r3
 80047ae:	dd4c      	ble.n	800484a <__ieee754_pow+0x10a>
 80047b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047b8:	2b14      	cmp	r3, #20
 80047ba:	dd26      	ble.n	800480a <__ieee754_pow+0xca>
 80047bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80047c0:	fa22 f103 	lsr.w	r1, r2, r3
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d13e      	bne.n	800484a <__ieee754_pow+0x10a>
 80047cc:	f001 0101 	and.w	r1, r1, #1
 80047d0:	f1c1 0b02 	rsb	fp, r1, #2
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d15b      	bne.n	8004890 <__ieee754_pow+0x150>
 80047d8:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <__ieee754_pow+0x208>)
 80047da:	4598      	cmp	r8, r3
 80047dc:	d124      	bne.n	8004828 <__ieee754_pow+0xe8>
 80047de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80047e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80047e6:	ea53 030a 	orrs.w	r3, r3, sl
 80047ea:	f000 8476 	beq.w	80050da <__ieee754_pow+0x99a>
 80047ee:	4b59      	ldr	r3, [pc, #356]	; (8004954 <__ieee754_pow+0x214>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	dd2d      	ble.n	8004850 <__ieee754_pow+0x110>
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	f280 8473 	bge.w	80050e2 <__ieee754_pow+0x9a2>
 80047fc:	2000      	movs	r0, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	ec41 0b10 	vmov	d0, r0, r1
 8004804:	b011      	add	sp, #68	; 0x44
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	2a00      	cmp	r2, #0
 800480c:	d13e      	bne.n	800488c <__ieee754_pow+0x14c>
 800480e:	f1c3 0314 	rsb	r3, r3, #20
 8004812:	fa48 f103 	asr.w	r1, r8, r3
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	4543      	cmp	r3, r8
 800481c:	f040 8469 	bne.w	80050f2 <__ieee754_pow+0x9b2>
 8004820:	f001 0101 	and.w	r1, r1, #1
 8004824:	f1c1 0b02 	rsb	fp, r1, #2
 8004828:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <__ieee754_pow+0x218>)
 800482a:	4598      	cmp	r8, r3
 800482c:	d118      	bne.n	8004860 <__ieee754_pow+0x120>
 800482e:	f1b9 0f00 	cmp.w	r9, #0
 8004832:	f280 845a 	bge.w	80050ea <__ieee754_pow+0x9aa>
 8004836:	4948      	ldr	r1, [pc, #288]	; (8004958 <__ieee754_pow+0x218>)
 8004838:	4632      	mov	r2, r6
 800483a:	463b      	mov	r3, r7
 800483c:	2000      	movs	r0, #0
 800483e:	f7fb ffa9 	bl	8000794 <__aeabi_ddiv>
 8004842:	e7dd      	b.n	8004800 <__ieee754_pow+0xc0>
 8004844:	f04f 0b02 	mov.w	fp, #2
 8004848:	e7c4      	b.n	80047d4 <__ieee754_pow+0x94>
 800484a:	f04f 0b00 	mov.w	fp, #0
 800484e:	e7c1      	b.n	80047d4 <__ieee754_pow+0x94>
 8004850:	f1b9 0f00 	cmp.w	r9, #0
 8004854:	dad2      	bge.n	80047fc <__ieee754_pow+0xbc>
 8004856:	e9dd 0300 	ldrd	r0, r3, [sp]
 800485a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800485e:	e7cf      	b.n	8004800 <__ieee754_pow+0xc0>
 8004860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004864:	d106      	bne.n	8004874 <__ieee754_pow+0x134>
 8004866:	4632      	mov	r2, r6
 8004868:	463b      	mov	r3, r7
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	f7fb fe67 	bl	8000540 <__aeabi_dmul>
 8004872:	e7c5      	b.n	8004800 <__ieee754_pow+0xc0>
 8004874:	4b39      	ldr	r3, [pc, #228]	; (800495c <__ieee754_pow+0x21c>)
 8004876:	4599      	cmp	r9, r3
 8004878:	d10a      	bne.n	8004890 <__ieee754_pow+0x150>
 800487a:	2d00      	cmp	r5, #0
 800487c:	db08      	blt.n	8004890 <__ieee754_pow+0x150>
 800487e:	ec47 6b10 	vmov	d0, r6, r7
 8004882:	b011      	add	sp, #68	; 0x44
 8004884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	f000 bc68 	b.w	800515c <__ieee754_sqrt>
 800488c:	f04f 0b00 	mov.w	fp, #0
 8004890:	ec47 6b10 	vmov	d0, r6, r7
 8004894:	f000 fd12 	bl	80052bc <fabs>
 8004898:	ec51 0b10 	vmov	r0, r1, d0
 800489c:	f1ba 0f00 	cmp.w	sl, #0
 80048a0:	d127      	bne.n	80048f2 <__ieee754_pow+0x1b2>
 80048a2:	b124      	cbz	r4, 80048ae <__ieee754_pow+0x16e>
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <__ieee754_pow+0x218>)
 80048a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d121      	bne.n	80048f2 <__ieee754_pow+0x1b2>
 80048ae:	f1b9 0f00 	cmp.w	r9, #0
 80048b2:	da05      	bge.n	80048c0 <__ieee754_pow+0x180>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	2000      	movs	r0, #0
 80048ba:	4927      	ldr	r1, [pc, #156]	; (8004958 <__ieee754_pow+0x218>)
 80048bc:	f7fb ff6a 	bl	8000794 <__aeabi_ddiv>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	da9d      	bge.n	8004800 <__ieee754_pow+0xc0>
 80048c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80048c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80048cc:	ea54 030b 	orrs.w	r3, r4, fp
 80048d0:	d108      	bne.n	80048e4 <__ieee754_pow+0x1a4>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	f7fb fc79 	bl	80001d0 <__aeabi_dsub>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e7ac      	b.n	800483e <__ieee754_pow+0xfe>
 80048e4:	f1bb 0f01 	cmp.w	fp, #1
 80048e8:	d18a      	bne.n	8004800 <__ieee754_pow+0xc0>
 80048ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048ee:	4619      	mov	r1, r3
 80048f0:	e786      	b.n	8004800 <__ieee754_pow+0xc0>
 80048f2:	0fed      	lsrs	r5, r5, #31
 80048f4:	1e6b      	subs	r3, r5, #1
 80048f6:	930d      	str	r3, [sp, #52]	; 0x34
 80048f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80048fc:	d102      	bne.n	8004904 <__ieee754_pow+0x1c4>
 80048fe:	4632      	mov	r2, r6
 8004900:	463b      	mov	r3, r7
 8004902:	e7e8      	b.n	80048d6 <__ieee754_pow+0x196>
 8004904:	4b16      	ldr	r3, [pc, #88]	; (8004960 <__ieee754_pow+0x220>)
 8004906:	4598      	cmp	r8, r3
 8004908:	f340 80fe 	ble.w	8004b08 <__ieee754_pow+0x3c8>
 800490c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004910:	4598      	cmp	r8, r3
 8004912:	dd0a      	ble.n	800492a <__ieee754_pow+0x1ea>
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <__ieee754_pow+0x214>)
 8004916:	429c      	cmp	r4, r3
 8004918:	dc0d      	bgt.n	8004936 <__ieee754_pow+0x1f6>
 800491a:	f1b9 0f00 	cmp.w	r9, #0
 800491e:	f6bf af6d 	bge.w	80047fc <__ieee754_pow+0xbc>
 8004922:	a307      	add	r3, pc, #28	; (adr r3, 8004940 <__ieee754_pow+0x200>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	e79f      	b.n	800486a <__ieee754_pow+0x12a>
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <__ieee754_pow+0x224>)
 800492c:	429c      	cmp	r4, r3
 800492e:	ddf4      	ble.n	800491a <__ieee754_pow+0x1da>
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <__ieee754_pow+0x218>)
 8004932:	429c      	cmp	r4, r3
 8004934:	dd18      	ble.n	8004968 <__ieee754_pow+0x228>
 8004936:	f1b9 0f00 	cmp.w	r9, #0
 800493a:	dcf2      	bgt.n	8004922 <__ieee754_pow+0x1e2>
 800493c:	e75e      	b.n	80047fc <__ieee754_pow+0xbc>
 800493e:	bf00      	nop
 8004940:	8800759c 	.word	0x8800759c
 8004944:	7e37e43c 	.word	0x7e37e43c
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	080055a0 	.word	0x080055a0
 8004950:	433fffff 	.word	0x433fffff
 8004954:	3fefffff 	.word	0x3fefffff
 8004958:	3ff00000 	.word	0x3ff00000
 800495c:	3fe00000 	.word	0x3fe00000
 8004960:	41e00000 	.word	0x41e00000
 8004964:	3feffffe 	.word	0x3feffffe
 8004968:	2200      	movs	r2, #0
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <__ieee754_pow+0x3b8>)
 800496c:	f7fb fc30 	bl	80001d0 <__aeabi_dsub>
 8004970:	a355      	add	r3, pc, #340	; (adr r3, 8004ac8 <__ieee754_pow+0x388>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
 800497a:	f7fb fde1 	bl	8000540 <__aeabi_dmul>
 800497e:	a354      	add	r3, pc, #336	; (adr r3, 8004ad0 <__ieee754_pow+0x390>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	4620      	mov	r0, r4
 800498a:	4629      	mov	r1, r5
 800498c:	f7fb fdd8 	bl	8000540 <__aeabi_dmul>
 8004990:	2200      	movs	r2, #0
 8004992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004996:	4b59      	ldr	r3, [pc, #356]	; (8004afc <__ieee754_pow+0x3bc>)
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fdd0 	bl	8000540 <__aeabi_dmul>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	a14c      	add	r1, pc, #304	; (adr r1, 8004ad8 <__ieee754_pow+0x398>)
 80049a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049aa:	f7fb fc11 	bl	80001d0 <__aeabi_dsub>
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	f7fb fdc5 	bl	8000540 <__aeabi_dmul>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	2000      	movs	r0, #0
 80049bc:	4950      	ldr	r1, [pc, #320]	; (8004b00 <__ieee754_pow+0x3c0>)
 80049be:	f7fb fc07 	bl	80001d0 <__aeabi_dsub>
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	4680      	mov	r8, r0
 80049c8:	4689      	mov	r9, r1
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fb fdb7 	bl	8000540 <__aeabi_dmul>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f7fb fdb1 	bl	8000540 <__aeabi_dmul>
 80049de:	a340      	add	r3, pc, #256	; (adr r3, 8004ae0 <__ieee754_pow+0x3a0>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fdac 	bl	8000540 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f0:	f7fb fbee 	bl	80001d0 <__aeabi_dsub>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4604      	mov	r4, r0
 80049fa:	460d      	mov	r5, r1
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	f7fb fbe8 	bl	80001d4 <__adddf3>
 8004a04:	2000      	movs	r0, #0
 8004a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	f7fb fbdf 	bl	80001d0 <__aeabi_dsub>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fb fbd9 	bl	80001d0 <__aeabi_dsub>
 8004a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a20:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004a24:	4313      	orrs	r3, r2
 8004a26:	4606      	mov	r6, r0
 8004a28:	460f      	mov	r7, r1
 8004a2a:	f040 81eb 	bne.w	8004e04 <__ieee754_pow+0x6c4>
 8004a2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004ae8 <__ieee754_pow+0x3a8>
 8004a32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004a36:	2400      	movs	r4, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a44:	f7fb fbc4 	bl	80001d0 <__aeabi_dsub>
 8004a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a4c:	f7fb fd78 	bl	8000540 <__aeabi_dmul>
 8004a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a54:	4680      	mov	r8, r0
 8004a56:	4689      	mov	r9, r1
 8004a58:	4630      	mov	r0, r6
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	f7fb fd70 	bl	8000540 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fb fbb4 	bl	80001d4 <__adddf3>
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	462b      	mov	r3, r5
 8004a70:	4680      	mov	r8, r0
 8004a72:	4689      	mov	r9, r1
 8004a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a78:	f7fb fd62 	bl	8000540 <__aeabi_dmul>
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4604      	mov	r4, r0
 8004a80:	460d      	mov	r5, r1
 8004a82:	4602      	mov	r2, r0
 8004a84:	4649      	mov	r1, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	e9cd 4500 	strd	r4, r5, [sp]
 8004a8c:	f7fb fba2 	bl	80001d4 <__adddf3>
 8004a90:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <__ieee754_pow+0x3c4>)
 8004a92:	4299      	cmp	r1, r3
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	468b      	mov	fp, r1
 8004a9a:	f340 82f7 	ble.w	800508c <__ieee754_pow+0x94c>
 8004a9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004aa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004aa6:	4303      	orrs	r3, r0
 8004aa8:	f000 81ea 	beq.w	8004e80 <__ieee754_pow+0x740>
 8004aac:	a310      	add	r3, pc, #64	; (adr r3, 8004af0 <__ieee754_pow+0x3b0>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab6:	f7fb fd43 	bl	8000540 <__aeabi_dmul>
 8004aba:	a30d      	add	r3, pc, #52	; (adr r3, 8004af0 <__ieee754_pow+0x3b0>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	e6d5      	b.n	800486e <__ieee754_pow+0x12e>
 8004ac2:	bf00      	nop
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	60000000 	.word	0x60000000
 8004acc:	3ff71547 	.word	0x3ff71547
 8004ad0:	f85ddf44 	.word	0xf85ddf44
 8004ad4:	3e54ae0b 	.word	0x3e54ae0b
 8004ad8:	55555555 	.word	0x55555555
 8004adc:	3fd55555 	.word	0x3fd55555
 8004ae0:	652b82fe 	.word	0x652b82fe
 8004ae4:	3ff71547 	.word	0x3ff71547
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	bff00000 	.word	0xbff00000
 8004af0:	8800759c 	.word	0x8800759c
 8004af4:	7e37e43c 	.word	0x7e37e43c
 8004af8:	3ff00000 	.word	0x3ff00000
 8004afc:	3fd00000 	.word	0x3fd00000
 8004b00:	3fe00000 	.word	0x3fe00000
 8004b04:	408fffff 	.word	0x408fffff
 8004b08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	da05      	bge.n	8004b1e <__ieee754_pow+0x3de>
 8004b12:	4bd3      	ldr	r3, [pc, #844]	; (8004e60 <__ieee754_pow+0x720>)
 8004b14:	f7fb fd14 	bl	8000540 <__aeabi_dmul>
 8004b18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	1523      	asrs	r3, r4, #20
 8004b20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b24:	4413      	add	r3, r2
 8004b26:	9309      	str	r3, [sp, #36]	; 0x24
 8004b28:	4bce      	ldr	r3, [pc, #824]	; (8004e64 <__ieee754_pow+0x724>)
 8004b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b32:	429c      	cmp	r4, r3
 8004b34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b38:	dd08      	ble.n	8004b4c <__ieee754_pow+0x40c>
 8004b3a:	4bcb      	ldr	r3, [pc, #812]	; (8004e68 <__ieee754_pow+0x728>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	f340 815e 	ble.w	8004dfe <__ieee754_pow+0x6be>
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	3301      	adds	r3, #1
 8004b46:	9309      	str	r3, [sp, #36]	; 0x24
 8004b48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b4c:	f04f 0a00 	mov.w	sl, #0
 8004b50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004b54:	930c      	str	r3, [sp, #48]	; 0x30
 8004b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b58:	4bc4      	ldr	r3, [pc, #784]	; (8004e6c <__ieee754_pow+0x72c>)
 8004b5a:	4413      	add	r3, r2
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	4629      	mov	r1, r5
 8004b62:	ec53 2b17 	vmov	r2, r3, d7
 8004b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b6e:	f7fb fb2f 	bl	80001d0 <__aeabi_dsub>
 8004b72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b76:	4606      	mov	r6, r0
 8004b78:	460f      	mov	r7, r1
 8004b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b7e:	f7fb fb29 	bl	80001d4 <__adddf3>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	2000      	movs	r0, #0
 8004b88:	49b9      	ldr	r1, [pc, #740]	; (8004e70 <__ieee754_pow+0x730>)
 8004b8a:	f7fb fe03 	bl	8000794 <__aeabi_ddiv>
 8004b8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4630      	mov	r0, r6
 8004b98:	4639      	mov	r1, r7
 8004b9a:	f7fb fcd1 	bl	8000540 <__aeabi_dmul>
 8004b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9302      	str	r3, [sp, #8]
 8004bae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004bb2:	106d      	asrs	r5, r5, #1
 8004bb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004bb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	461d      	mov	r5, r3
 8004bca:	f7fb fcb9 	bl	8000540 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb fafb 	bl	80001d0 <__aeabi_dsub>
 8004bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bde:	4606      	mov	r6, r0
 8004be0:	460f      	mov	r7, r1
 8004be2:	4620      	mov	r0, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	f7fb faf3 	bl	80001d0 <__aeabi_dsub>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bf2:	f7fb faed 	bl	80001d0 <__aeabi_dsub>
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	f7fb fca1 	bl	8000540 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4630      	mov	r0, r6
 8004c04:	4639      	mov	r1, r7
 8004c06:	f7fb fae3 	bl	80001d0 <__aeabi_dsub>
 8004c0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c0e:	f7fb fc97 	bl	8000540 <__aeabi_dmul>
 8004c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f7fb fc8f 	bl	8000540 <__aeabi_dmul>
 8004c22:	a37b      	add	r3, pc, #492	; (adr r3, 8004e10 <__ieee754_pow+0x6d0>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	4604      	mov	r4, r0
 8004c2a:	460d      	mov	r5, r1
 8004c2c:	f7fb fc88 	bl	8000540 <__aeabi_dmul>
 8004c30:	a379      	add	r3, pc, #484	; (adr r3, 8004e18 <__ieee754_pow+0x6d8>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f7fb facd 	bl	80001d4 <__adddf3>
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f7fb fc7f 	bl	8000540 <__aeabi_dmul>
 8004c42:	a377      	add	r3, pc, #476	; (adr r3, 8004e20 <__ieee754_pow+0x6e0>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fac4 	bl	80001d4 <__adddf3>
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	f7fb fc76 	bl	8000540 <__aeabi_dmul>
 8004c54:	a374      	add	r3, pc, #464	; (adr r3, 8004e28 <__ieee754_pow+0x6e8>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fabb 	bl	80001d4 <__adddf3>
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f7fb fc6d 	bl	8000540 <__aeabi_dmul>
 8004c66:	a372      	add	r3, pc, #456	; (adr r3, 8004e30 <__ieee754_pow+0x6f0>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fab2 	bl	80001d4 <__adddf3>
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	f7fb fc64 	bl	8000540 <__aeabi_dmul>
 8004c78:	a36f      	add	r3, pc, #444	; (adr r3, 8004e38 <__ieee754_pow+0x6f8>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb faa9 	bl	80001d4 <__adddf3>
 8004c82:	4622      	mov	r2, r4
 8004c84:	4606      	mov	r6, r0
 8004c86:	460f      	mov	r7, r1
 8004c88:	462b      	mov	r3, r5
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	f7fb fc57 	bl	8000540 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4630      	mov	r0, r6
 8004c98:	4639      	mov	r1, r7
 8004c9a:	f7fb fc51 	bl	8000540 <__aeabi_dmul>
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004caa:	f7fb fa93 	bl	80001d4 <__adddf3>
 8004cae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cb2:	f7fb fc45 	bl	8000540 <__aeabi_dmul>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f7fb fa8b 	bl	80001d4 <__adddf3>
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	460f      	mov	r7, r1
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	4649      	mov	r1, r9
 8004cca:	f7fb fc39 	bl	8000540 <__aeabi_dmul>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <__ieee754_pow+0x734>)
 8004cd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cd6:	f7fb fa7d 	bl	80001d4 <__adddf3>
 8004cda:	4632      	mov	r2, r6
 8004cdc:	463b      	mov	r3, r7
 8004cde:	f7fb fa79 	bl	80001d4 <__adddf3>
 8004ce2:	9802      	ldr	r0, [sp, #8]
 8004ce4:	460d      	mov	r5, r1
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb fc26 	bl	8000540 <__aeabi_dmul>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4680      	mov	r8, r0
 8004cf8:	4689      	mov	r9, r1
 8004cfa:	4b5e      	ldr	r3, [pc, #376]	; (8004e74 <__ieee754_pow+0x734>)
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fa66 	bl	80001d0 <__aeabi_dsub>
 8004d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d08:	f7fb fa62 	bl	80001d0 <__aeabi_dsub>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4630      	mov	r0, r6
 8004d12:	4639      	mov	r1, r7
 8004d14:	f7fb fa5c 	bl	80001d0 <__aeabi_dsub>
 8004d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d1c:	f7fb fc10 	bl	8000540 <__aeabi_dmul>
 8004d20:	4622      	mov	r2, r4
 8004d22:	4606      	mov	r6, r0
 8004d24:	460f      	mov	r7, r1
 8004d26:	462b      	mov	r3, r5
 8004d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2c:	f7fb fc08 	bl	8000540 <__aeabi_dmul>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4630      	mov	r0, r6
 8004d36:	4639      	mov	r1, r7
 8004d38:	f7fb fa4c 	bl	80001d4 <__adddf3>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	460f      	mov	r7, r1
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4640      	mov	r0, r8
 8004d46:	4649      	mov	r1, r9
 8004d48:	f7fb fa44 	bl	80001d4 <__adddf3>
 8004d4c:	9802      	ldr	r0, [sp, #8]
 8004d4e:	a33c      	add	r3, pc, #240	; (adr r3, 8004e40 <__ieee754_pow+0x700>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	4604      	mov	r4, r0
 8004d56:	460d      	mov	r5, r1
 8004d58:	f7fb fbf2 	bl	8000540 <__aeabi_dmul>
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d62:	464b      	mov	r3, r9
 8004d64:	4620      	mov	r0, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	f7fb fa32 	bl	80001d0 <__aeabi_dsub>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fa2c 	bl	80001d0 <__aeabi_dsub>
 8004d78:	a333      	add	r3, pc, #204	; (adr r3, 8004e48 <__ieee754_pow+0x708>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fbdf 	bl	8000540 <__aeabi_dmul>
 8004d82:	a333      	add	r3, pc, #204	; (adr r3, 8004e50 <__ieee754_pow+0x710>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	4606      	mov	r6, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fbd6 	bl	8000540 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f7fb fa1a 	bl	80001d4 <__adddf3>
 8004da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004da2:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <__ieee754_pow+0x738>)
 8004da4:	4413      	add	r3, r2
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fa13 	bl	80001d4 <__adddf3>
 8004dae:	4604      	mov	r4, r0
 8004db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db2:	460d      	mov	r5, r1
 8004db4:	f7fb fb5a 	bl	800046c <__aeabi_i2d>
 8004db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dba:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <__ieee754_pow+0x73c>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	462b      	mov	r3, r5
 8004dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dce:	f7fb fa01 	bl	80001d4 <__adddf3>
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	f7fb f9fd 	bl	80001d4 <__adddf3>
 8004dda:	4632      	mov	r2, r6
 8004ddc:	463b      	mov	r3, r7
 8004dde:	f7fb f9f9 	bl	80001d4 <__adddf3>
 8004de2:	9802      	ldr	r0, [sp, #8]
 8004de4:	4632      	mov	r2, r6
 8004de6:	463b      	mov	r3, r7
 8004de8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dec:	f7fb f9f0 	bl	80001d0 <__aeabi_dsub>
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	f7fb f9ec 	bl	80001d0 <__aeabi_dsub>
 8004df8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dfc:	e607      	b.n	8004a0e <__ieee754_pow+0x2ce>
 8004dfe:	f04f 0a01 	mov.w	sl, #1
 8004e02:	e6a5      	b.n	8004b50 <__ieee754_pow+0x410>
 8004e04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004e58 <__ieee754_pow+0x718>
 8004e08:	e613      	b.n	8004a32 <__ieee754_pow+0x2f2>
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w
 8004e10:	4a454eef 	.word	0x4a454eef
 8004e14:	3fca7e28 	.word	0x3fca7e28
 8004e18:	93c9db65 	.word	0x93c9db65
 8004e1c:	3fcd864a 	.word	0x3fcd864a
 8004e20:	a91d4101 	.word	0xa91d4101
 8004e24:	3fd17460 	.word	0x3fd17460
 8004e28:	518f264d 	.word	0x518f264d
 8004e2c:	3fd55555 	.word	0x3fd55555
 8004e30:	db6fabff 	.word	0xdb6fabff
 8004e34:	3fdb6db6 	.word	0x3fdb6db6
 8004e38:	33333303 	.word	0x33333303
 8004e3c:	3fe33333 	.word	0x3fe33333
 8004e40:	e0000000 	.word	0xe0000000
 8004e44:	3feec709 	.word	0x3feec709
 8004e48:	dc3a03fd 	.word	0xdc3a03fd
 8004e4c:	3feec709 	.word	0x3feec709
 8004e50:	145b01f5 	.word	0x145b01f5
 8004e54:	be3e2fe0 	.word	0xbe3e2fe0
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	3ff00000 	.word	0x3ff00000
 8004e60:	43400000 	.word	0x43400000
 8004e64:	0003988e 	.word	0x0003988e
 8004e68:	000bb679 	.word	0x000bb679
 8004e6c:	080055a8 	.word	0x080055a8
 8004e70:	3ff00000 	.word	0x3ff00000
 8004e74:	40080000 	.word	0x40080000
 8004e78:	080055c8 	.word	0x080055c8
 8004e7c:	080055b8 	.word	0x080055b8
 8004e80:	a3b4      	add	r3, pc, #720	; (adr r3, 8005154 <__ieee754_pow+0xa14>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb f9a3 	bl	80001d4 <__adddf3>
 8004e8e:	4622      	mov	r2, r4
 8004e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e94:	462b      	mov	r3, r5
 8004e96:	4630      	mov	r0, r6
 8004e98:	4639      	mov	r1, r7
 8004e9a:	f7fb f999 	bl	80001d0 <__aeabi_dsub>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ea6:	f7fb fddb 	bl	8000a60 <__aeabi_dcmpgt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f47f adfe 	bne.w	8004aac <__ieee754_pow+0x36c>
 8004eb0:	4aa3      	ldr	r2, [pc, #652]	; (8005140 <__ieee754_pow+0xa00>)
 8004eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	f340 810a 	ble.w	80050d0 <__ieee754_pow+0x990>
 8004ebc:	151b      	asrs	r3, r3, #20
 8004ebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004ec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004ec6:	fa4a f303 	asr.w	r3, sl, r3
 8004eca:	445b      	add	r3, fp
 8004ecc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004ed0:	4e9c      	ldr	r6, [pc, #624]	; (8005144 <__ieee754_pow+0xa04>)
 8004ed2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004ed6:	4116      	asrs	r6, r2
 8004ed8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004edc:	2000      	movs	r0, #0
 8004ede:	ea23 0106 	bic.w	r1, r3, r6
 8004ee2:	f1c2 0214 	rsb	r2, r2, #20
 8004ee6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004eea:	fa4a fa02 	asr.w	sl, sl, r2
 8004eee:	f1bb 0f00 	cmp.w	fp, #0
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	bfb8      	it	lt
 8004efc:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	e9cd 0100 	strd	r0, r1, [sp]
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f10:	f7fb f960 	bl	80001d4 <__adddf3>
 8004f14:	2000      	movs	r0, #0
 8004f16:	a378      	add	r3, pc, #480	; (adr r3, 80050f8 <__ieee754_pow+0x9b8>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	f7fb fb0e 	bl	8000540 <__aeabi_dmul>
 8004f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f28:	4606      	mov	r6, r0
 8004f2a:	460f      	mov	r7, r1
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f94e 	bl	80001d0 <__aeabi_dsub>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	f7fb f948 	bl	80001d0 <__aeabi_dsub>
 8004f40:	a36f      	add	r3, pc, #444	; (adr r3, 8005100 <__ieee754_pow+0x9c0>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb fafb 	bl	8000540 <__aeabi_dmul>
 8004f4a:	a36f      	add	r3, pc, #444	; (adr r3, 8005108 <__ieee754_pow+0x9c8>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	4680      	mov	r8, r0
 8004f52:	4689      	mov	r9, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb faf2 	bl	8000540 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb f936 	bl	80001d4 <__adddf3>
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4630      	mov	r0, r6
 8004f72:	4639      	mov	r1, r7
 8004f74:	f7fb f92e 	bl	80001d4 <__adddf3>
 8004f78:	4632      	mov	r2, r6
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4689      	mov	r9, r1
 8004f80:	f7fb f926 	bl	80001d0 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	4642      	mov	r2, r8
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	464b      	mov	r3, r9
 8004f98:	4640      	mov	r0, r8
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	f7fb fad0 	bl	8000540 <__aeabi_dmul>
 8004fa0:	a35b      	add	r3, pc, #364	; (adr r3, 8005110 <__ieee754_pow+0x9d0>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	f7fb fac9 	bl	8000540 <__aeabi_dmul>
 8004fae:	a35a      	add	r3, pc, #360	; (adr r3, 8005118 <__ieee754_pow+0x9d8>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb f90c 	bl	80001d0 <__aeabi_dsub>
 8004fb8:	4622      	mov	r2, r4
 8004fba:	462b      	mov	r3, r5
 8004fbc:	f7fb fac0 	bl	8000540 <__aeabi_dmul>
 8004fc0:	a357      	add	r3, pc, #348	; (adr r3, 8005120 <__ieee754_pow+0x9e0>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb f905 	bl	80001d4 <__adddf3>
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	f7fb fab7 	bl	8000540 <__aeabi_dmul>
 8004fd2:	a355      	add	r3, pc, #340	; (adr r3, 8005128 <__ieee754_pow+0x9e8>)
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f7fb f8fa 	bl	80001d0 <__aeabi_dsub>
 8004fdc:	4622      	mov	r2, r4
 8004fde:	462b      	mov	r3, r5
 8004fe0:	f7fb faae 	bl	8000540 <__aeabi_dmul>
 8004fe4:	a352      	add	r3, pc, #328	; (adr r3, 8005130 <__ieee754_pow+0x9f0>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f7fb f8f3 	bl	80001d4 <__adddf3>
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	f7fb faa5 	bl	8000540 <__aeabi_dmul>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	f7fb f8e7 	bl	80001d0 <__aeabi_dsub>
 8005002:	4604      	mov	r4, r0
 8005004:	460d      	mov	r5, r1
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4640      	mov	r0, r8
 800500c:	4649      	mov	r1, r9
 800500e:	f7fb fa97 	bl	8000540 <__aeabi_dmul>
 8005012:	2200      	movs	r2, #0
 8005014:	e9cd 0100 	strd	r0, r1, [sp]
 8005018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f8d6 	bl	80001d0 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800502c:	f7fb fbb2 	bl	8000794 <__aeabi_ddiv>
 8005030:	4632      	mov	r2, r6
 8005032:	4604      	mov	r4, r0
 8005034:	460d      	mov	r5, r1
 8005036:	463b      	mov	r3, r7
 8005038:	4640      	mov	r0, r8
 800503a:	4649      	mov	r1, r9
 800503c:	f7fb fa80 	bl	8000540 <__aeabi_dmul>
 8005040:	4632      	mov	r2, r6
 8005042:	463b      	mov	r3, r7
 8005044:	f7fb f8c6 	bl	80001d4 <__adddf3>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_dsub>
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	f7fb f8ba 	bl	80001d0 <__aeabi_dsub>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	2000      	movs	r0, #0
 8005062:	4939      	ldr	r1, [pc, #228]	; (8005148 <__ieee754_pow+0xa08>)
 8005064:	f7fb f8b4 	bl	80001d0 <__aeabi_dsub>
 8005068:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800506c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	da2f      	bge.n	80050d6 <__ieee754_pow+0x996>
 8005076:	4650      	mov	r0, sl
 8005078:	ec43 2b10 	vmov	d0, r2, r3
 800507c:	f000 f9c0 	bl	8005400 <scalbn>
 8005080:	ec51 0b10 	vmov	r0, r1, d0
 8005084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005088:	f7ff bbf1 	b.w	800486e <__ieee754_pow+0x12e>
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <__ieee754_pow+0xa0c>)
 800508e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005092:	429e      	cmp	r6, r3
 8005094:	f77f af0c 	ble.w	8004eb0 <__ieee754_pow+0x770>
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <__ieee754_pow+0xa10>)
 800509a:	440b      	add	r3, r1
 800509c:	4303      	orrs	r3, r0
 800509e:	d00b      	beq.n	80050b8 <__ieee754_pow+0x978>
 80050a0:	a325      	add	r3, pc, #148	; (adr r3, 8005138 <__ieee754_pow+0x9f8>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050aa:	f7fb fa49 	bl	8000540 <__aeabi_dmul>
 80050ae:	a322      	add	r3, pc, #136	; (adr r3, 8005138 <__ieee754_pow+0x9f8>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7ff bbdb 	b.w	800486e <__ieee754_pow+0x12e>
 80050b8:	4622      	mov	r2, r4
 80050ba:	462b      	mov	r3, r5
 80050bc:	f7fb f888 	bl	80001d0 <__aeabi_dsub>
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f7fb fcc2 	bl	8000a4c <__aeabi_dcmpge>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	f43f aef1 	beq.w	8004eb0 <__ieee754_pow+0x770>
 80050ce:	e7e7      	b.n	80050a0 <__ieee754_pow+0x960>
 80050d0:	f04f 0a00 	mov.w	sl, #0
 80050d4:	e718      	b.n	8004f08 <__ieee754_pow+0x7c8>
 80050d6:	4621      	mov	r1, r4
 80050d8:	e7d4      	b.n	8005084 <__ieee754_pow+0x944>
 80050da:	2000      	movs	r0, #0
 80050dc:	491a      	ldr	r1, [pc, #104]	; (8005148 <__ieee754_pow+0xa08>)
 80050de:	f7ff bb8f 	b.w	8004800 <__ieee754_pow+0xc0>
 80050e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e6:	f7ff bb8b 	b.w	8004800 <__ieee754_pow+0xc0>
 80050ea:	4630      	mov	r0, r6
 80050ec:	4639      	mov	r1, r7
 80050ee:	f7ff bb87 	b.w	8004800 <__ieee754_pow+0xc0>
 80050f2:	4693      	mov	fp, r2
 80050f4:	f7ff bb98 	b.w	8004828 <__ieee754_pow+0xe8>
 80050f8:	00000000 	.word	0x00000000
 80050fc:	3fe62e43 	.word	0x3fe62e43
 8005100:	fefa39ef 	.word	0xfefa39ef
 8005104:	3fe62e42 	.word	0x3fe62e42
 8005108:	0ca86c39 	.word	0x0ca86c39
 800510c:	be205c61 	.word	0xbe205c61
 8005110:	72bea4d0 	.word	0x72bea4d0
 8005114:	3e663769 	.word	0x3e663769
 8005118:	c5d26bf1 	.word	0xc5d26bf1
 800511c:	3ebbbd41 	.word	0x3ebbbd41
 8005120:	af25de2c 	.word	0xaf25de2c
 8005124:	3f11566a 	.word	0x3f11566a
 8005128:	16bebd93 	.word	0x16bebd93
 800512c:	3f66c16c 	.word	0x3f66c16c
 8005130:	5555553e 	.word	0x5555553e
 8005134:	3fc55555 	.word	0x3fc55555
 8005138:	c2f8f359 	.word	0xc2f8f359
 800513c:	01a56e1f 	.word	0x01a56e1f
 8005140:	3fe00000 	.word	0x3fe00000
 8005144:	000fffff 	.word	0x000fffff
 8005148:	3ff00000 	.word	0x3ff00000
 800514c:	4090cbff 	.word	0x4090cbff
 8005150:	3f6f3400 	.word	0x3f6f3400
 8005154:	652b82fe 	.word	0x652b82fe
 8005158:	3c971547 	.word	0x3c971547

0800515c <__ieee754_sqrt>:
 800515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005160:	4955      	ldr	r1, [pc, #340]	; (80052b8 <__ieee754_sqrt+0x15c>)
 8005162:	ec55 4b10 	vmov	r4, r5, d0
 8005166:	43a9      	bics	r1, r5
 8005168:	462b      	mov	r3, r5
 800516a:	462a      	mov	r2, r5
 800516c:	d112      	bne.n	8005194 <__ieee754_sqrt+0x38>
 800516e:	ee10 2a10 	vmov	r2, s0
 8005172:	ee10 0a10 	vmov	r0, s0
 8005176:	4629      	mov	r1, r5
 8005178:	f7fb f9e2 	bl	8000540 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4620      	mov	r0, r4
 8005182:	4629      	mov	r1, r5
 8005184:	f7fb f826 	bl	80001d4 <__adddf3>
 8005188:	4604      	mov	r4, r0
 800518a:	460d      	mov	r5, r1
 800518c:	ec45 4b10 	vmov	d0, r4, r5
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	2d00      	cmp	r5, #0
 8005196:	ee10 0a10 	vmov	r0, s0
 800519a:	4621      	mov	r1, r4
 800519c:	dc0f      	bgt.n	80051be <__ieee754_sqrt+0x62>
 800519e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80051a2:	4330      	orrs	r0, r6
 80051a4:	d0f2      	beq.n	800518c <__ieee754_sqrt+0x30>
 80051a6:	b155      	cbz	r5, 80051be <__ieee754_sqrt+0x62>
 80051a8:	ee10 2a10 	vmov	r2, s0
 80051ac:	4620      	mov	r0, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	f7fb f80e 	bl	80001d0 <__aeabi_dsub>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	f7fb faec 	bl	8000794 <__aeabi_ddiv>
 80051bc:	e7e4      	b.n	8005188 <__ieee754_sqrt+0x2c>
 80051be:	151b      	asrs	r3, r3, #20
 80051c0:	d073      	beq.n	80052aa <__ieee754_sqrt+0x14e>
 80051c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051c6:	07dd      	lsls	r5, r3, #31
 80051c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80051cc:	bf48      	it	mi
 80051ce:	0fc8      	lsrmi	r0, r1, #31
 80051d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051d4:	bf44      	itt	mi
 80051d6:	0049      	lslmi	r1, r1, #1
 80051d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80051dc:	2500      	movs	r5, #0
 80051de:	1058      	asrs	r0, r3, #1
 80051e0:	0fcb      	lsrs	r3, r1, #31
 80051e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80051e6:	0049      	lsls	r1, r1, #1
 80051e8:	2316      	movs	r3, #22
 80051ea:	462c      	mov	r4, r5
 80051ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80051f0:	19a7      	adds	r7, r4, r6
 80051f2:	4297      	cmp	r7, r2
 80051f4:	bfde      	ittt	le
 80051f6:	19bc      	addle	r4, r7, r6
 80051f8:	1bd2      	suble	r2, r2, r7
 80051fa:	19ad      	addle	r5, r5, r6
 80051fc:	0fcf      	lsrs	r7, r1, #31
 80051fe:	3b01      	subs	r3, #1
 8005200:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005204:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005208:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800520c:	d1f0      	bne.n	80051f0 <__ieee754_sqrt+0x94>
 800520e:	f04f 0c20 	mov.w	ip, #32
 8005212:	469e      	mov	lr, r3
 8005214:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005218:	42a2      	cmp	r2, r4
 800521a:	eb06 070e 	add.w	r7, r6, lr
 800521e:	dc02      	bgt.n	8005226 <__ieee754_sqrt+0xca>
 8005220:	d112      	bne.n	8005248 <__ieee754_sqrt+0xec>
 8005222:	428f      	cmp	r7, r1
 8005224:	d810      	bhi.n	8005248 <__ieee754_sqrt+0xec>
 8005226:	2f00      	cmp	r7, #0
 8005228:	eb07 0e06 	add.w	lr, r7, r6
 800522c:	da42      	bge.n	80052b4 <__ieee754_sqrt+0x158>
 800522e:	f1be 0f00 	cmp.w	lr, #0
 8005232:	db3f      	blt.n	80052b4 <__ieee754_sqrt+0x158>
 8005234:	f104 0801 	add.w	r8, r4, #1
 8005238:	1b12      	subs	r2, r2, r4
 800523a:	428f      	cmp	r7, r1
 800523c:	bf88      	it	hi
 800523e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005242:	1bc9      	subs	r1, r1, r7
 8005244:	4433      	add	r3, r6
 8005246:	4644      	mov	r4, r8
 8005248:	0052      	lsls	r2, r2, #1
 800524a:	f1bc 0c01 	subs.w	ip, ip, #1
 800524e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005252:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005256:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800525a:	d1dd      	bne.n	8005218 <__ieee754_sqrt+0xbc>
 800525c:	430a      	orrs	r2, r1
 800525e:	d006      	beq.n	800526e <__ieee754_sqrt+0x112>
 8005260:	1c5c      	adds	r4, r3, #1
 8005262:	bf13      	iteet	ne
 8005264:	3301      	addne	r3, #1
 8005266:	3501      	addeq	r5, #1
 8005268:	4663      	moveq	r3, ip
 800526a:	f023 0301 	bicne.w	r3, r3, #1
 800526e:	106a      	asrs	r2, r5, #1
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	07e9      	lsls	r1, r5, #31
 8005274:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005278:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800527c:	bf48      	it	mi
 800527e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005282:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005286:	461c      	mov	r4, r3
 8005288:	e780      	b.n	800518c <__ieee754_sqrt+0x30>
 800528a:	0aca      	lsrs	r2, r1, #11
 800528c:	3815      	subs	r0, #21
 800528e:	0549      	lsls	r1, r1, #21
 8005290:	2a00      	cmp	r2, #0
 8005292:	d0fa      	beq.n	800528a <__ieee754_sqrt+0x12e>
 8005294:	02d6      	lsls	r6, r2, #11
 8005296:	d50a      	bpl.n	80052ae <__ieee754_sqrt+0x152>
 8005298:	f1c3 0420 	rsb	r4, r3, #32
 800529c:	fa21 f404 	lsr.w	r4, r1, r4
 80052a0:	1e5d      	subs	r5, r3, #1
 80052a2:	4099      	lsls	r1, r3
 80052a4:	4322      	orrs	r2, r4
 80052a6:	1b43      	subs	r3, r0, r5
 80052a8:	e78b      	b.n	80051c2 <__ieee754_sqrt+0x66>
 80052aa:	4618      	mov	r0, r3
 80052ac:	e7f0      	b.n	8005290 <__ieee754_sqrt+0x134>
 80052ae:	0052      	lsls	r2, r2, #1
 80052b0:	3301      	adds	r3, #1
 80052b2:	e7ef      	b.n	8005294 <__ieee754_sqrt+0x138>
 80052b4:	46a0      	mov	r8, r4
 80052b6:	e7bf      	b.n	8005238 <__ieee754_sqrt+0xdc>
 80052b8:	7ff00000 	.word	0x7ff00000

080052bc <fabs>:
 80052bc:	ec51 0b10 	vmov	r0, r1, d0
 80052c0:	ee10 2a10 	vmov	r2, s0
 80052c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052c8:	ec43 2b10 	vmov	d0, r2, r3
 80052cc:	4770      	bx	lr

080052ce <finite>:
 80052ce:	ee10 3a90 	vmov	r3, s1
 80052d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80052d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80052da:	0fc0      	lsrs	r0, r0, #31
 80052dc:	4770      	bx	lr

080052de <matherr>:
 80052de:	2000      	movs	r0, #0
 80052e0:	4770      	bx	lr
 80052e2:	0000      	movs	r0, r0
 80052e4:	0000      	movs	r0, r0
	...

080052e8 <nan>:
 80052e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80052f0 <nan+0x8>
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	00000000 	.word	0x00000000
 80052f4:	7ff80000 	.word	0x7ff80000

080052f8 <rint>:
 80052f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fa:	ec51 0b10 	vmov	r0, r1, d0
 80052fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005302:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005306:	2e13      	cmp	r6, #19
 8005308:	460b      	mov	r3, r1
 800530a:	ee10 4a10 	vmov	r4, s0
 800530e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005312:	dc56      	bgt.n	80053c2 <rint+0xca>
 8005314:	2e00      	cmp	r6, #0
 8005316:	da2b      	bge.n	8005370 <rint+0x78>
 8005318:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800531c:	4302      	orrs	r2, r0
 800531e:	d023      	beq.n	8005368 <rint+0x70>
 8005320:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005324:	4302      	orrs	r2, r0
 8005326:	4254      	negs	r4, r2
 8005328:	4314      	orrs	r4, r2
 800532a:	0c4b      	lsrs	r3, r1, #17
 800532c:	0b24      	lsrs	r4, r4, #12
 800532e:	045b      	lsls	r3, r3, #17
 8005330:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005334:	ea44 0103 	orr.w	r1, r4, r3
 8005338:	460b      	mov	r3, r1
 800533a:	492f      	ldr	r1, [pc, #188]	; (80053f8 <rint+0x100>)
 800533c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005340:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005344:	4602      	mov	r2, r0
 8005346:	4639      	mov	r1, r7
 8005348:	4630      	mov	r0, r6
 800534a:	f7fa ff43 	bl	80001d4 <__adddf3>
 800534e:	e9cd 0100 	strd	r0, r1, [sp]
 8005352:	463b      	mov	r3, r7
 8005354:	4632      	mov	r2, r6
 8005356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800535a:	f7fa ff39 	bl	80001d0 <__aeabi_dsub>
 800535e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005362:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005366:	4639      	mov	r1, r7
 8005368:	ec41 0b10 	vmov	d0, r0, r1
 800536c:	b003      	add	sp, #12
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <rint+0x104>)
 8005372:	4132      	asrs	r2, r6
 8005374:	ea01 0702 	and.w	r7, r1, r2
 8005378:	4307      	orrs	r7, r0
 800537a:	d0f5      	beq.n	8005368 <rint+0x70>
 800537c:	0852      	lsrs	r2, r2, #1
 800537e:	4011      	ands	r1, r2
 8005380:	430c      	orrs	r4, r1
 8005382:	d00b      	beq.n	800539c <rint+0xa4>
 8005384:	ea23 0202 	bic.w	r2, r3, r2
 8005388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800538c:	2e13      	cmp	r6, #19
 800538e:	fa43 f306 	asr.w	r3, r3, r6
 8005392:	bf0c      	ite	eq
 8005394:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005398:	2400      	movne	r4, #0
 800539a:	4313      	orrs	r3, r2
 800539c:	4916      	ldr	r1, [pc, #88]	; (80053f8 <rint+0x100>)
 800539e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80053a2:	4622      	mov	r2, r4
 80053a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053a8:	4620      	mov	r0, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	f7fa ff12 	bl	80001d4 <__adddf3>
 80053b0:	e9cd 0100 	strd	r0, r1, [sp]
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053bc:	f7fa ff08 	bl	80001d0 <__aeabi_dsub>
 80053c0:	e7d2      	b.n	8005368 <rint+0x70>
 80053c2:	2e33      	cmp	r6, #51	; 0x33
 80053c4:	dd07      	ble.n	80053d6 <rint+0xde>
 80053c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80053ca:	d1cd      	bne.n	8005368 <rint+0x70>
 80053cc:	ee10 2a10 	vmov	r2, s0
 80053d0:	f7fa ff00 	bl	80001d4 <__adddf3>
 80053d4:	e7c8      	b.n	8005368 <rint+0x70>
 80053d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	40f2      	lsrs	r2, r6
 80053e0:	4210      	tst	r0, r2
 80053e2:	d0c1      	beq.n	8005368 <rint+0x70>
 80053e4:	0852      	lsrs	r2, r2, #1
 80053e6:	4210      	tst	r0, r2
 80053e8:	bf1f      	itttt	ne
 80053ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80053ee:	ea20 0202 	bicne.w	r2, r0, r2
 80053f2:	4134      	asrne	r4, r6
 80053f4:	4314      	orrne	r4, r2
 80053f6:	e7d1      	b.n	800539c <rint+0xa4>
 80053f8:	080055d8 	.word	0x080055d8
 80053fc:	000fffff 	.word	0x000fffff

08005400 <scalbn>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	ec55 4b10 	vmov	r4, r5, d0
 8005406:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800540a:	4606      	mov	r6, r0
 800540c:	462b      	mov	r3, r5
 800540e:	b9aa      	cbnz	r2, 800543c <scalbn+0x3c>
 8005410:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005414:	4323      	orrs	r3, r4
 8005416:	d03b      	beq.n	8005490 <scalbn+0x90>
 8005418:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <scalbn+0xe0>)
 800541a:	4629      	mov	r1, r5
 800541c:	2200      	movs	r2, #0
 800541e:	ee10 0a10 	vmov	r0, s0
 8005422:	f7fb f88d 	bl	8000540 <__aeabi_dmul>
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <scalbn+0xe4>)
 8005428:	429e      	cmp	r6, r3
 800542a:	4604      	mov	r4, r0
 800542c:	460d      	mov	r5, r1
 800542e:	da12      	bge.n	8005456 <scalbn+0x56>
 8005430:	a327      	add	r3, pc, #156	; (adr r3, 80054d0 <scalbn+0xd0>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f7fb f883 	bl	8000540 <__aeabi_dmul>
 800543a:	e009      	b.n	8005450 <scalbn+0x50>
 800543c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005440:	428a      	cmp	r2, r1
 8005442:	d10c      	bne.n	800545e <scalbn+0x5e>
 8005444:	ee10 2a10 	vmov	r2, s0
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fa fec2 	bl	80001d4 <__adddf3>
 8005450:	4604      	mov	r4, r0
 8005452:	460d      	mov	r5, r1
 8005454:	e01c      	b.n	8005490 <scalbn+0x90>
 8005456:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800545a:	460b      	mov	r3, r1
 800545c:	3a36      	subs	r2, #54	; 0x36
 800545e:	4432      	add	r2, r6
 8005460:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005464:	428a      	cmp	r2, r1
 8005466:	dd0b      	ble.n	8005480 <scalbn+0x80>
 8005468:	ec45 4b11 	vmov	d1, r4, r5
 800546c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80054d8 <scalbn+0xd8>
 8005470:	f000 f83c 	bl	80054ec <copysign>
 8005474:	a318      	add	r3, pc, #96	; (adr r3, 80054d8 <scalbn+0xd8>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	ec51 0b10 	vmov	r0, r1, d0
 800547e:	e7da      	b.n	8005436 <scalbn+0x36>
 8005480:	2a00      	cmp	r2, #0
 8005482:	dd08      	ble.n	8005496 <scalbn+0x96>
 8005484:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005488:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800548c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005490:	ec45 4b10 	vmov	d0, r4, r5
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800549a:	da0d      	bge.n	80054b8 <scalbn+0xb8>
 800549c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80054a0:	429e      	cmp	r6, r3
 80054a2:	ec45 4b11 	vmov	d1, r4, r5
 80054a6:	dce1      	bgt.n	800546c <scalbn+0x6c>
 80054a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80054d0 <scalbn+0xd0>
 80054ac:	f000 f81e 	bl	80054ec <copysign>
 80054b0:	a307      	add	r3, pc, #28	; (adr r3, 80054d0 <scalbn+0xd0>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	e7e0      	b.n	800547a <scalbn+0x7a>
 80054b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054bc:	3236      	adds	r2, #54	; 0x36
 80054be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	2200      	movs	r2, #0
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <scalbn+0xe8>)
 80054ce:	e7b2      	b.n	8005436 <scalbn+0x36>
 80054d0:	c2f8f359 	.word	0xc2f8f359
 80054d4:	01a56e1f 	.word	0x01a56e1f
 80054d8:	8800759c 	.word	0x8800759c
 80054dc:	7e37e43c 	.word	0x7e37e43c
 80054e0:	43500000 	.word	0x43500000
 80054e4:	ffff3cb0 	.word	0xffff3cb0
 80054e8:	3c900000 	.word	0x3c900000

080054ec <copysign>:
 80054ec:	ec51 0b10 	vmov	r0, r1, d0
 80054f0:	ee11 0a90 	vmov	r0, s3
 80054f4:	ee10 2a10 	vmov	r2, s0
 80054f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80054fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005500:	ea41 0300 	orr.w	r3, r1, r0
 8005504:	ec43 2b10 	vmov	d0, r2, r3
 8005508:	4770      	bx	lr
	...

0800550c <_init>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

08005518 <_fini>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr
